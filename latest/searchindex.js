Search.setIndex({"docnames": ["autoapi/644ec953a7dc_pruning_support/index", "autoapi/6ece06672ed3_v1_14/index", "autoapi/6f0d0f71d92e_v1_13/index", "autoapi/9e89549a08c8_v1_11/index", "autoapi/block_mask/index", "autoapi/env/index", "autoapi/neural_compressor/adaptor/adaptor/index", "autoapi/neural_compressor/adaptor/index", "autoapi/neural_compressor/adaptor/keras/index", "autoapi/neural_compressor/adaptor/keras_utils/conv2d/index", "autoapi/neural_compressor/adaptor/keras_utils/dense/index", "autoapi/neural_compressor/adaptor/keras_utils/depthwise_conv2d/index", "autoapi/neural_compressor/adaptor/keras_utils/index", "autoapi/neural_compressor/adaptor/keras_utils/quantizer/index", "autoapi/neural_compressor/adaptor/keras_utils/separable_conv2d/index", "autoapi/neural_compressor/adaptor/mxnet/index", "autoapi/neural_compressor/adaptor/mxnet_utils/index", "autoapi/neural_compressor/adaptor/mxnet_utils/util/index", "autoapi/neural_compressor/adaptor/onnxrt/index", "autoapi/neural_compressor/adaptor/ox_utils/calibration/index", "autoapi/neural_compressor/adaptor/ox_utils/calibrator/index", "autoapi/neural_compressor/adaptor/ox_utils/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/activation/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/argmax/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/attention/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/binary_op/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/concat/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/conv/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/direct_q8/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/embed_layernorm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gather/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gavgpool/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gemm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/lstm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/matmul/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/maxpool/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/ops/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/pad/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/pooling/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/resize/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/split/index", "autoapi/neural_compressor/adaptor/ox_utils/quantizer/index", "autoapi/neural_compressor/adaptor/ox_utils/util/index", "autoapi/neural_compressor/adaptor/pytorch/index", "autoapi/neural_compressor/adaptor/query/index", "autoapi/neural_compressor/adaptor/tensorflow/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter_without_calib/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/bf16_convert/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_add_to_biasadd/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_layout/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_leakyrelu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_nan_to_random/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_placeholder_to_const/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dequantize_cast_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dilated_contraction/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dummy_biasadd/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/expanddims_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fetch_weight_from_reshape/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_batch_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_constant/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_biasadd_add/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_column_wise_mul/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_conv_with_math/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_in/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_gelu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_layer_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_fp32_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_reshape_transpose/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/graph_cse_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/grappler_pass/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/insert_print_node/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/move_squeeze_after_relu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/pre_optimize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/remove_training_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/rename_batch_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/split_shared_input/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_equivalent_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_unused_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/switch_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/graph_base/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_fake_quant/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value_without_calib/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_redundant_dequantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_requantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_redundant_dequantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_requantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/meta_op_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_hostconst_converter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_quantized_op_cse/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/rnn_convert/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/scale_propagation/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_graph/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_node/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_schema/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/tf2onnx_utils/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/insert_qdq_pattern/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/merge_duplicated_qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/share_qdq_y_pattern/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_util/index", "autoapi/neural_compressor/adaptor/tf_utils/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/fake_quantize/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_config/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_helper/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/optimize_layer/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_add/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_base/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_wrapper/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_concatv2/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_deconv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_in/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_matmul/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_pooling/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/optimize_qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_base/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_concatv2/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_for_intel_cpu/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_matmul/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_pooling/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph_common/index", "autoapi/neural_compressor/adaptor/tf_utils/tf2onnx_converter/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/bias_correction/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/graph_transform_base/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/insert_logging/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/rerange_quantized_concat/index", "autoapi/neural_compressor/adaptor/tf_utils/util/index", "autoapi/neural_compressor/adaptor/torch_utils/bf16_convert/index", "autoapi/neural_compressor/adaptor/torch_utils/hawq_metric/index", "autoapi/neural_compressor/adaptor/torch_utils/index", "autoapi/neural_compressor/adaptor/torch_utils/model_wrapper/index", "autoapi/neural_compressor/adaptor/torch_utils/smooth_quant/index", "autoapi/neural_compressor/adaptor/torch_utils/symbolic_trace/index", "autoapi/neural_compressor/adaptor/torch_utils/util/index", "autoapi/neural_compressor/algorithm/algorithm/index", "autoapi/neural_compressor/algorithm/fast_bias_correction/index", "autoapi/neural_compressor/algorithm/index", "autoapi/neural_compressor/algorithm/smooth_quant/index", "autoapi/neural_compressor/algorithm/weight_correction/index", "autoapi/neural_compressor/benchmark/index", "autoapi/neural_compressor/compression/callbacks/index", "autoapi/neural_compressor/compression/distillation/criterions/index", "autoapi/neural_compressor/compression/distillation/index", "autoapi/neural_compressor/compression/index", "autoapi/neural_compressor/compression/pruner/criteria/index", "autoapi/neural_compressor/compression/pruner/index", "autoapi/neural_compressor/compression/pruner/model_slim/auto_slim/index", "autoapi/neural_compressor/compression/pruner/model_slim/index", "autoapi/neural_compressor/compression/pruner/model_slim/pattern_analyzer/index", "autoapi/neural_compressor/compression/pruner/model_slim/weight_slim/index", "autoapi/neural_compressor/compression/pruner/patterns/index", "autoapi/neural_compressor/compression/pruner/pruners/index", "autoapi/neural_compressor/compression/pruner/regs/index", "autoapi/neural_compressor/compression/pruner/schedulers/index", "autoapi/neural_compressor/compression/pruner/utils/index", "autoapi/neural_compressor/conf/config/index", "autoapi/neural_compressor/conf/dotdict/index", "autoapi/neural_compressor/conf/index", "autoapi/neural_compressor/conf/pythonic_config/index", "autoapi/neural_compressor/config/index", "autoapi/neural_compressor/contrib/index", "autoapi/neural_compressor/contrib/strategy/index", "autoapi/neural_compressor/contrib/strategy/sigopt/index", "autoapi/neural_compressor/contrib/strategy/tpe/index", "autoapi/neural_compressor/data/dataloaders/base_dataloader/index", "autoapi/neural_compressor/data/dataloaders/dataloader/index", "autoapi/neural_compressor/data/dataloaders/default_dataloader/index", "autoapi/neural_compressor/data/dataloaders/fetcher/index", "autoapi/neural_compressor/data/dataloaders/index", "autoapi/neural_compressor/data/dataloaders/mxnet_dataloader/index", "autoapi/neural_compressor/data/dataloaders/onnxrt_dataloader/index", "autoapi/neural_compressor/data/dataloaders/pytorch_dataloader/index", "autoapi/neural_compressor/data/dataloaders/sampler/index", "autoapi/neural_compressor/data/dataloaders/tensorflow_dataloader/index", "autoapi/neural_compressor/data/datasets/bert_dataset/index", "autoapi/neural_compressor/data/datasets/coco_dataset/index", "autoapi/neural_compressor/data/datasets/dataset/index", "autoapi/neural_compressor/data/datasets/dummy_dataset/index", "autoapi/neural_compressor/data/datasets/dummy_dataset_v2/index", "autoapi/neural_compressor/data/datasets/imagenet_dataset/index", "autoapi/neural_compressor/data/datasets/index", "autoapi/neural_compressor/data/datasets/style_transfer_dataset/index", "autoapi/neural_compressor/data/filters/coco_filter/index", "autoapi/neural_compressor/data/filters/filter/index", "autoapi/neural_compressor/data/filters/index", "autoapi/neural_compressor/data/index", "autoapi/neural_compressor/data/transforms/coco_transform/index", "autoapi/neural_compressor/data/transforms/imagenet_transform/index", "autoapi/neural_compressor/data/transforms/index", "autoapi/neural_compressor/data/transforms/postprocess/index", "autoapi/neural_compressor/data/transforms/tokenization/index", "autoapi/neural_compressor/data/transforms/transform/index", "autoapi/neural_compressor/experimental/benchmark/index", "autoapi/neural_compressor/experimental/common/criterion/index", "autoapi/neural_compressor/experimental/common/dataloader/index", "autoapi/neural_compressor/experimental/common/index", "autoapi/neural_compressor/experimental/common/metric/index", "autoapi/neural_compressor/experimental/common/model/index", "autoapi/neural_compressor/experimental/common/optimizer/index", "autoapi/neural_compressor/experimental/common/postprocess/index", "autoapi/neural_compressor/experimental/common/torch_utils/index", "autoapi/neural_compressor/experimental/component/index", "autoapi/neural_compressor/experimental/compression/index", "autoapi/neural_compressor/experimental/compression/pruning/index", "autoapi/neural_compressor/experimental/data/dataloaders/base_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/default_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/fetcher/index", "autoapi/neural_compressor/experimental/data/dataloaders/index", "autoapi/neural_compressor/experimental/data/dataloaders/mxnet_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/onnxrt_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/pytorch_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/sampler/index", "autoapi/neural_compressor/experimental/data/dataloaders/tensorflow_dataloader/index", "autoapi/neural_compressor/experimental/data/datasets/bert_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/coco_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset_v2/index", "autoapi/neural_compressor/experimental/data/datasets/imagenet_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/index", "autoapi/neural_compressor/experimental/data/datasets/style_transfer_dataset/index", "autoapi/neural_compressor/experimental/data/filters/coco_filter/index", "autoapi/neural_compressor/experimental/data/filters/filter/index", "autoapi/neural_compressor/experimental/data/filters/index", "autoapi/neural_compressor/experimental/data/index", "autoapi/neural_compressor/experimental/data/transforms/imagenet_transform/index", "autoapi/neural_compressor/experimental/data/transforms/index", "autoapi/neural_compressor/experimental/data/transforms/tokenization/index", "autoapi/neural_compressor/experimental/data/transforms/transform/index", "autoapi/neural_compressor/experimental/distillation/index", "autoapi/neural_compressor/experimental/export/index", "autoapi/neural_compressor/experimental/export/qlinear2qdq/index", "autoapi/neural_compressor/experimental/export/tf2onnx/index", "autoapi/neural_compressor/experimental/export/torch2onnx/index", "autoapi/neural_compressor/experimental/export/utils/index", "autoapi/neural_compressor/experimental/graph_optimization/index", "autoapi/neural_compressor/experimental/index", "autoapi/neural_compressor/experimental/metric/bleu/index", "autoapi/neural_compressor/experimental/metric/bleu_util/index", "autoapi/neural_compressor/experimental/metric/coco_label_map/index", "autoapi/neural_compressor/experimental/metric/coco_tools/index", "autoapi/neural_compressor/experimental/metric/evaluate_squad/index", "autoapi/neural_compressor/experimental/metric/f1/index", "autoapi/neural_compressor/experimental/metric/index", "autoapi/neural_compressor/experimental/metric/metric/index", "autoapi/neural_compressor/experimental/mixed_precision/index", "autoapi/neural_compressor/experimental/model_conversion/index", "autoapi/neural_compressor/experimental/nas/basic_nas/index", "autoapi/neural_compressor/experimental/nas/dynas/index", "autoapi/neural_compressor/experimental/nas/index", "autoapi/neural_compressor/experimental/nas/nas/index", "autoapi/neural_compressor/experimental/nas/nas_utils/index", "autoapi/neural_compressor/experimental/nas/search_algorithms/index", "autoapi/neural_compressor/experimental/pruner_legacy/gradient_sensitivity/index", "autoapi/neural_compressor/experimental/pruner_legacy/group_lasso/index", "autoapi/neural_compressor/experimental/pruner_legacy/index", "autoapi/neural_compressor/experimental/pruner_legacy/magnitude/index", "autoapi/neural_compressor/experimental/pruner_legacy/pattern_lock/index", "autoapi/neural_compressor/experimental/pruner_legacy/pruner/index", "autoapi/neural_compressor/experimental/pruning/index", "autoapi/neural_compressor/experimental/pruning_recipes/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/pattern/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/tile_pattern/index", "autoapi/neural_compressor/experimental/pruning_v2/index", "autoapi/neural_compressor/experimental/pytorch_pruner/index", "autoapi/neural_compressor/experimental/pytorch_pruner/logger/index", "autoapi/neural_compressor/experimental/pytorch_pruner/patterns/index", "autoapi/neural_compressor/experimental/pytorch_pruner/prune_utils/index", "autoapi/neural_compressor/experimental/pytorch_pruner/pruner/index", "autoapi/neural_compressor/experimental/pytorch_pruner/pruning/index", "autoapi/neural_compressor/experimental/pytorch_pruner/scheduler/index", "autoapi/neural_compressor/experimental/quantization/index", "autoapi/neural_compressor/experimental/scheduler/index", "autoapi/neural_compressor/index", "autoapi/neural_compressor/metric/bleu/index", "autoapi/neural_compressor/metric/bleu_util/index", "autoapi/neural_compressor/metric/coco_label_map/index", "autoapi/neural_compressor/metric/coco_tools/index", "autoapi/neural_compressor/metric/evaluate_squad/index", "autoapi/neural_compressor/metric/f1/index", "autoapi/neural_compressor/metric/index", "autoapi/neural_compressor/metric/metric/index", "autoapi/neural_compressor/mix_precision/index", "autoapi/neural_compressor/model/base_model/index", "autoapi/neural_compressor/model/index", "autoapi/neural_compressor/model/keras_model/index", "autoapi/neural_compressor/model/model/index", "autoapi/neural_compressor/model/mxnet_model/index", "autoapi/neural_compressor/model/nets_factory/index", "autoapi/neural_compressor/model/onnx_model/index", "autoapi/neural_compressor/model/tensorflow_model/index", "autoapi/neural_compressor/model/torch_model/index", "autoapi/neural_compressor/objective/index", "autoapi/neural_compressor/quantization/index", "autoapi/neural_compressor/strategy/auto/index", "autoapi/neural_compressor/strategy/auto_mixed_precision/index", "autoapi/neural_compressor/strategy/basic/index", "autoapi/neural_compressor/strategy/bayesian/index", "autoapi/neural_compressor/strategy/conservative/index", "autoapi/neural_compressor/strategy/exhaustive/index", "autoapi/neural_compressor/strategy/hawq_v2/index", "autoapi/neural_compressor/strategy/index", "autoapi/neural_compressor/strategy/mse/index", "autoapi/neural_compressor/strategy/mse_v2/index", "autoapi/neural_compressor/strategy/random/index", "autoapi/neural_compressor/strategy/strategy/index", "autoapi/neural_compressor/strategy/utils/constant/index", "autoapi/neural_compressor/strategy/utils/index", "autoapi/neural_compressor/strategy/utils/tuning_sampler/index", "autoapi/neural_compressor/strategy/utils/tuning_space/index", "autoapi/neural_compressor/strategy/utils/tuning_structs/index", "autoapi/neural_compressor/strategy/utils/utility/index", "autoapi/neural_compressor/template/api_doc_example/index", "autoapi/neural_compressor/template/index", "autoapi/neural_compressor/training/index", "autoapi/neural_compressor/utils/collect_layer_histogram/index", "autoapi/neural_compressor/utils/constant/index", "autoapi/neural_compressor/utils/create_obj_from_config/index", "autoapi/neural_compressor/utils/index", "autoapi/neural_compressor/utils/kl_divergence/index", "autoapi/neural_compressor/utils/load_huggingface/index", "autoapi/neural_compressor/utils/logger/index", "autoapi/neural_compressor/utils/options/index", "autoapi/neural_compressor/utils/pytorch/index", "autoapi/neural_compressor/utils/utility/index", "autoapi/neural_compressor/ux/components/benchmark/benchmark/index", "autoapi/neural_compressor/ux/components/benchmark/benchmark_model/index", "autoapi/neural_compressor/ux/components/benchmark/execute_benchmark/index", "autoapi/neural_compressor/ux/components/benchmark/index", "autoapi/neural_compressor/ux/components/config_generator/benchmark_config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/graph_optimization_config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/mixed_precision_config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/profiling_config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/pruning_config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/quantization_config_generator/index", "autoapi/neural_compressor/ux/components/configuration_wizard/configuration_parser/index", "autoapi/neural_compressor/ux/components/configuration_wizard/get_boundary_nodes/index", "autoapi/neural_compressor/ux/components/configuration_wizard/get_configuration/index", "autoapi/neural_compressor/ux/components/configuration_wizard/index", "autoapi/neural_compressor/ux/components/configuration_wizard/params_feeder/index", "autoapi/neural_compressor/ux/components/configuration_wizard/pruning_config_parser/index", "autoapi/neural_compressor/ux/components/db_manager/db_manager/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/benchmark/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/benchmark_result/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/dataloader/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/dataset/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/domain/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/domain_flavour/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/example/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/framework/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/metric/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/model/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/optimization/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/optimization_type/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/precision/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/profiling/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/profiling_result/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/project/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/pruning_details/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/transform/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/tuning_details/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/tuning_history/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/benchmark_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/dataset_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/db_operations/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/diagnosis_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/dictionaries_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/examples_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/model_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/optimization_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/profiling_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/project_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/index", "autoapi/neural_compressor/ux/components/db_manager/params_interfaces/index", "autoapi/neural_compressor/ux/components/db_manager/utils/index", "autoapi/neural_compressor/ux/components/diagnosis/diagnosis/index", "autoapi/neural_compressor/ux/components/diagnosis/factory/index", "autoapi/neural_compressor/ux/components/diagnosis/index", "autoapi/neural_compressor/ux/components/diagnosis/onnx_diagnosis/index", "autoapi/neural_compressor/ux/components/diagnosis/onnx_diagnosis/onnxrt_diagnosis/index", "autoapi/neural_compressor/ux/components/diagnosis/op_details/index", "autoapi/neural_compressor/ux/components/diagnosis/op_entry/index", "autoapi/neural_compressor/ux/components/diagnosis/tensorflow_diagnosis/index", "autoapi/neural_compressor/ux/components/diagnosis/tensorflow_diagnosis/tensorflow_diagnosis/index", "autoapi/neural_compressor/ux/components/file_browser/file_browser/index", "autoapi/neural_compressor/ux/components/file_browser/index", "autoapi/neural_compressor/ux/components/graph/attribute/index", "autoapi/neural_compressor/ux/components/graph/collapser/index", "autoapi/neural_compressor/ux/components/graph/edge/index", "autoapi/neural_compressor/ux/components/graph/graph/index", "autoapi/neural_compressor/ux/components/graph/graph_reader/index", "autoapi/neural_compressor/ux/components/graph/index", "autoapi/neural_compressor/ux/components/graph/node/index", "autoapi/neural_compressor/ux/components/graph/reader/index", "autoapi/neural_compressor/ux/components/graph/reader/onnxrt_reader/index", "autoapi/neural_compressor/ux/components/graph/reader/tensorflow_reader/index", "autoapi/neural_compressor/ux/components/index", "autoapi/neural_compressor/ux/components/jobs_management/index", "autoapi/neural_compressor/ux/components/jobs_management/jobs_control_queue/index", "autoapi/neural_compressor/ux/components/jobs_management/jobs_manager/index", "autoapi/neural_compressor/ux/components/jobs_management/request/index", "autoapi/neural_compressor/ux/components/manage_workspace/index", "autoapi/neural_compressor/ux/components/model/domain/index", "autoapi/neural_compressor/ux/components/model/index", "autoapi/neural_compressor/ux/components/model/model/index", "autoapi/neural_compressor/ux/components/model/model_type_getter/index", "autoapi/neural_compressor/ux/components/model/onnxrt/index", "autoapi/neural_compressor/ux/components/model/onnxrt/model/index", "autoapi/neural_compressor/ux/components/model/pytorch/index", "autoapi/neural_compressor/ux/components/model/pytorch/model/index", "autoapi/neural_compressor/ux/components/model/repository/index", "autoapi/neural_compressor/ux/components/model/shape/index", "autoapi/neural_compressor/ux/components/model/tensorflow/frozen_pb/index", "autoapi/neural_compressor/ux/components/model/tensorflow/index", "autoapi/neural_compressor/ux/components/model/tensorflow/keras/index", "autoapi/neural_compressor/ux/components/model/tensorflow/meta_graph/index", "autoapi/neural_compressor/ux/components/model/tensorflow/model/index", "autoapi/neural_compressor/ux/components/model/tensorflow/saved_model/index", "autoapi/neural_compressor/ux/components/model/tensorflow/utils/index", "autoapi/neural_compressor/ux/components/model_zoo/download_config/index", "autoapi/neural_compressor/ux/components/model_zoo/download_model/index", "autoapi/neural_compressor/ux/components/model_zoo/downloader/index", "autoapi/neural_compressor/ux/components/model_zoo/index", "autoapi/neural_compressor/ux/components/model_zoo/list_models/index", "autoapi/neural_compressor/ux/components/names_mapper/index", "autoapi/neural_compressor/ux/components/names_mapper/names_mapper/index", "autoapi/neural_compressor/ux/components/optimization/execute_optimization/index", "autoapi/neural_compressor/ux/components/optimization/factory/index", "autoapi/neural_compressor/ux/components/optimization/graph_optimizer/graph_optimization/index", "autoapi/neural_compressor/ux/components/optimization/graph_optimizer/index", "autoapi/neural_compressor/ux/components/optimization/graph_optimizer/optimize_model/index", "autoapi/neural_compressor/ux/components/optimization/index", "autoapi/neural_compressor/ux/components/optimization/mixed_precision/index", "autoapi/neural_compressor/ux/components/optimization/mixed_precision/mixed_precision/index", "autoapi/neural_compressor/ux/components/optimization/mixed_precision/optimize_model/index", "autoapi/neural_compressor/ux/components/optimization/neural_coder_optimization/index", "autoapi/neural_compressor/ux/components/optimization/neural_coder_optimization/optimize_model/index", "autoapi/neural_compressor/ux/components/optimization/optimization/index", "autoapi/neural_compressor/ux/components/optimization/pruning/index", "autoapi/neural_compressor/ux/components/optimization/pruning/optimize_model/index", "autoapi/neural_compressor/ux/components/optimization/pruning/pruning/index", "autoapi/neural_compressor/ux/components/optimization/tune/index", "autoapi/neural_compressor/ux/components/optimization/tune/tune_model/index", "autoapi/neural_compressor/ux/components/optimization/tune/tuning/index", "autoapi/neural_compressor/ux/components/optimization/tuning_history/index", "autoapi/neural_compressor/ux/components/profiling/execute_profiling/index", "autoapi/neural_compressor/ux/components/profiling/factory/index", "autoapi/neural_compressor/ux/components/profiling/index", "autoapi/neural_compressor/ux/components/profiling/profile_model/index", "autoapi/neural_compressor/ux/components/profiling/profiler/index", "autoapi/neural_compressor/ux/components/profiling/profiling/index", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/factory/index", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/index", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/profiler/index", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/utils/index", "autoapi/neural_compressor/ux/inc_bench/index", "autoapi/neural_compressor/ux/index", "autoapi/neural_compressor/ux/utils/consts/index", "autoapi/neural_compressor/ux/utils/environment/index", "autoapi/neural_compressor/ux/utils/exceptions/index", "autoapi/neural_compressor/ux/utils/executor/index", "autoapi/neural_compressor/ux/utils/expiring_dict/index", "autoapi/neural_compressor/ux/utils/github_info/index", "autoapi/neural_compressor/ux/utils/hw_info/index", "autoapi/neural_compressor/ux/utils/index", "autoapi/neural_compressor/ux/utils/json_serializer/index", "autoapi/neural_compressor/ux/utils/logger/index", "autoapi/neural_compressor/ux/utils/parser/index", "autoapi/neural_compressor/ux/utils/proc/index", "autoapi/neural_compressor/ux/utils/processes/index", "autoapi/neural_compressor/ux/utils/singleton/index", "autoapi/neural_compressor/ux/utils/status_updates/index", "autoapi/neural_compressor/ux/utils/templates/index", "autoapi/neural_compressor/ux/utils/templates/metric/index", "autoapi/neural_compressor/ux/utils/templates/workdir/index", "autoapi/neural_compressor/ux/utils/utils/index", "autoapi/neural_compressor/ux/utils/workload/config/index", "autoapi/neural_compressor/ux/utils/workload/dataloader/index", "autoapi/neural_compressor/ux/utils/workload/evaluation/index", "autoapi/neural_compressor/ux/utils/workload/graph_optimization/index", "autoapi/neural_compressor/ux/utils/workload/index", "autoapi/neural_compressor/ux/utils/workload/mixed_precision/index", "autoapi/neural_compressor/ux/utils/workload/model/index", "autoapi/neural_compressor/ux/utils/workload/pruning/index", "autoapi/neural_compressor/ux/utils/workload/quantization/index", "autoapi/neural_compressor/ux/utils/workload/tuning/index", "autoapi/neural_compressor/ux/utils/yaml_utils/index", "autoapi/neural_compressor/ux/web/communication/index", "autoapi/neural_compressor/ux/web/configuration/index", "autoapi/neural_compressor/ux/web/exceptions/index", "autoapi/neural_compressor/ux/web/index", "autoapi/neural_compressor/ux/web/router/index", "autoapi/neural_compressor/ux/web/server/index", "autoapi/neural_compressor/ux/web/service/benchmark/index", "autoapi/neural_compressor/ux/web/service/history_snapshot_parser/index", "autoapi/neural_compressor/ux/web/service/index", "autoapi/neural_compressor/ux/web/service/model/index", "autoapi/neural_compressor/ux/web/service/optimization/index", "autoapi/neural_compressor/ux/web/service/profiling/index", "autoapi/neural_compressor/ux/web/service/request_data_processor/index", "autoapi/neural_compressor/ux/web/service/response_generator/index", "autoapi/neural_compressor/ux/web/service/workload/index", "autoapi/neural_compressor/version/index", "docs/build_docs/source/index", "docs/source/CODE_OF_CONDUCT", "docs/source/CONTRIBUTING", "docs/source/FX", "docs/source/NAS", "docs/source/SECURITY", "docs/source/Welcome", "docs/source/adaptor", "docs/source/api-doc/adaptor", "docs/source/api-doc/adaptor/onnxrt", "docs/source/api-doc/adaptor/torch_utils", "docs/source/api-doc/api_doc_example", "docs/source/api-doc/apis", "docs/source/api-doc/benchmark", "docs/source/api-doc/compression", "docs/source/api-doc/config", "docs/source/api-doc/mix_precision", "docs/source/api-doc/model", "docs/source/api-doc/objective", "docs/source/api-doc/quantization", "docs/source/api-doc/strategy", "docs/source/api-doc/training", "docs/source/bench", "docs/source/benchmark", "docs/source/dataloader", "docs/source/dataset", "docs/source/design", "docs/source/distillation", "docs/source/distillation_quantization", "docs/source/distributed", "docs/source/examples_readme", "docs/source/export", "docs/source/faq", "docs/source/framework_yaml", "docs/source/get_started", "docs/source/incompatible_changes", "docs/source/infrastructure", "docs/source/installation_guide", "docs/source/legal_information", "docs/source/metric", "docs/source/migration", "docs/source/mixed_precision", "docs/source/model", "docs/source/neural_coder/README", "docs/source/neural_coder/docs/AWSSageMakerSupport", "docs/source/neural_coder/docs/BigDLNanoSupport", "docs/source/neural_coder/docs/IntelCPU_PerformanceSetting", "docs/source/neural_coder/docs/PythonAPI", "docs/source/neural_coder/docs/PythonLauncher", "docs/source/neural_coder/docs/Quantization", "docs/source/neural_coder/docs/SupportMatrix", "docs/source/neural_coder/docs/release_notes/v0.4", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/CHANGELOG", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/DEVELOP", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/README", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/RELEASE", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/CHANGELOG", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/DEVELOP", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/RELEASE", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/CHANGELOG", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/README", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/vsc-extension-quickstart", "docs/source/objective", "docs/source/orchestration", "docs/source/platform_configuration", "docs/source/pruning", "docs/source/publication_list", "docs/source/pythonic_style", "docs/source/quantization", "docs/source/quantization_mixed_precision", "docs/source/releases_info", "docs/source/sigopt_strategy", "docs/source/smooth_quant", "docs/source/tensorboard", "docs/source/transform", "docs/source/tuning_strategies", "docs/source/user_guide", "docs/source/user_yaml", "docs/source/validated_model_list", "index"], "filenames": ["autoapi/644ec953a7dc_pruning_support/index.rst", "autoapi/6ece06672ed3_v1_14/index.rst", "autoapi/6f0d0f71d92e_v1_13/index.rst", "autoapi/9e89549a08c8_v1_11/index.rst", "autoapi/block_mask/index.rst", "autoapi/env/index.rst", "autoapi/neural_compressor/adaptor/adaptor/index.rst", "autoapi/neural_compressor/adaptor/index.rst", "autoapi/neural_compressor/adaptor/keras/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/conv2d/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/dense/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/depthwise_conv2d/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/quantizer/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/separable_conv2d/index.rst", "autoapi/neural_compressor/adaptor/mxnet/index.rst", "autoapi/neural_compressor/adaptor/mxnet_utils/index.rst", "autoapi/neural_compressor/adaptor/mxnet_utils/util/index.rst", "autoapi/neural_compressor/adaptor/onnxrt/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/calibration/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/calibrator/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/activation/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/argmax/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/attention/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/binary_op/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/concat/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/conv/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/direct_q8/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/embed_layernorm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gather/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gavgpool/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gemm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/lstm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/matmul/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/maxpool/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/ops/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/pad/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/pooling/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/resize/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/split/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/quantizer/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/util/index.rst", "autoapi/neural_compressor/adaptor/pytorch/index.rst", "autoapi/neural_compressor/adaptor/query/index.rst", "autoapi/neural_compressor/adaptor/tensorflow/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter_without_calib/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/bf16_convert/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_add_to_biasadd/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_layout/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_leakyrelu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_nan_to_random/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_placeholder_to_const/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dequantize_cast_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dilated_contraction/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dummy_biasadd/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/expanddims_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fetch_weight_from_reshape/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_batch_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_constant/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_biasadd_add/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_column_wise_mul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_conv_with_math/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_in/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_gelu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_layer_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_fp32_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_reshape_transpose/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/graph_cse_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/grappler_pass/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/insert_print_node/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/move_squeeze_after_relu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/pre_optimize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/remove_training_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/rename_batch_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/split_shared_input/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_equivalent_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_unused_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/switch_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/graph_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_fake_quant/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value_without_calib/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_redundant_dequantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_requantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_redundant_dequantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_requantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/meta_op_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_hostconst_converter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_quantized_op_cse/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/rnn_convert/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/scale_propagation/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_graph/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_node/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_schema/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/tf2onnx_utils/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/insert_qdq_pattern/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/merge_duplicated_qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/share_qdq_y_pattern/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_util/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/fake_quantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_config/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_helper/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/optimize_layer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_add/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_wrapper/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_concatv2/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_deconv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_in/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_matmul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_pooling/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/optimize_qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_concatv2/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_for_intel_cpu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_matmul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_pooling/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph_common/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/tf2onnx_converter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/bias_correction/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/graph_transform_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/insert_logging/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/rerange_quantized_concat/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/util/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/bf16_convert/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/hawq_metric/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/model_wrapper/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/smooth_quant/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/symbolic_trace/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/util/index.rst", "autoapi/neural_compressor/algorithm/algorithm/index.rst", "autoapi/neural_compressor/algorithm/fast_bias_correction/index.rst", "autoapi/neural_compressor/algorithm/index.rst", "autoapi/neural_compressor/algorithm/smooth_quant/index.rst", "autoapi/neural_compressor/algorithm/weight_correction/index.rst", "autoapi/neural_compressor/benchmark/index.rst", "autoapi/neural_compressor/compression/callbacks/index.rst", "autoapi/neural_compressor/compression/distillation/criterions/index.rst", "autoapi/neural_compressor/compression/distillation/index.rst", "autoapi/neural_compressor/compression/index.rst", "autoapi/neural_compressor/compression/pruner/criteria/index.rst", "autoapi/neural_compressor/compression/pruner/index.rst", "autoapi/neural_compressor/compression/pruner/model_slim/auto_slim/index.rst", "autoapi/neural_compressor/compression/pruner/model_slim/index.rst", "autoapi/neural_compressor/compression/pruner/model_slim/pattern_analyzer/index.rst", "autoapi/neural_compressor/compression/pruner/model_slim/weight_slim/index.rst", "autoapi/neural_compressor/compression/pruner/patterns/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/index.rst", "autoapi/neural_compressor/compression/pruner/regs/index.rst", "autoapi/neural_compressor/compression/pruner/schedulers/index.rst", "autoapi/neural_compressor/compression/pruner/utils/index.rst", "autoapi/neural_compressor/conf/config/index.rst", "autoapi/neural_compressor/conf/dotdict/index.rst", "autoapi/neural_compressor/conf/index.rst", "autoapi/neural_compressor/conf/pythonic_config/index.rst", "autoapi/neural_compressor/config/index.rst", "autoapi/neural_compressor/contrib/index.rst", "autoapi/neural_compressor/contrib/strategy/index.rst", "autoapi/neural_compressor/contrib/strategy/sigopt/index.rst", "autoapi/neural_compressor/contrib/strategy/tpe/index.rst", "autoapi/neural_compressor/data/dataloaders/base_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/default_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/fetcher/index.rst", "autoapi/neural_compressor/data/dataloaders/index.rst", "autoapi/neural_compressor/data/dataloaders/mxnet_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/onnxrt_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/pytorch_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/sampler/index.rst", "autoapi/neural_compressor/data/dataloaders/tensorflow_dataloader/index.rst", "autoapi/neural_compressor/data/datasets/bert_dataset/index.rst", "autoapi/neural_compressor/data/datasets/coco_dataset/index.rst", "autoapi/neural_compressor/data/datasets/dataset/index.rst", "autoapi/neural_compressor/data/datasets/dummy_dataset/index.rst", "autoapi/neural_compressor/data/datasets/dummy_dataset_v2/index.rst", "autoapi/neural_compressor/data/datasets/imagenet_dataset/index.rst", "autoapi/neural_compressor/data/datasets/index.rst", "autoapi/neural_compressor/data/datasets/style_transfer_dataset/index.rst", "autoapi/neural_compressor/data/filters/coco_filter/index.rst", "autoapi/neural_compressor/data/filters/filter/index.rst", "autoapi/neural_compressor/data/filters/index.rst", "autoapi/neural_compressor/data/index.rst", "autoapi/neural_compressor/data/transforms/coco_transform/index.rst", "autoapi/neural_compressor/data/transforms/imagenet_transform/index.rst", "autoapi/neural_compressor/data/transforms/index.rst", "autoapi/neural_compressor/data/transforms/postprocess/index.rst", "autoapi/neural_compressor/data/transforms/tokenization/index.rst", "autoapi/neural_compressor/data/transforms/transform/index.rst", "autoapi/neural_compressor/experimental/benchmark/index.rst", "autoapi/neural_compressor/experimental/common/criterion/index.rst", "autoapi/neural_compressor/experimental/common/dataloader/index.rst", "autoapi/neural_compressor/experimental/common/index.rst", "autoapi/neural_compressor/experimental/common/metric/index.rst", "autoapi/neural_compressor/experimental/common/model/index.rst", "autoapi/neural_compressor/experimental/common/optimizer/index.rst", "autoapi/neural_compressor/experimental/common/postprocess/index.rst", "autoapi/neural_compressor/experimental/common/torch_utils/index.rst", "autoapi/neural_compressor/experimental/component/index.rst", "autoapi/neural_compressor/experimental/compression/index.rst", "autoapi/neural_compressor/experimental/compression/pruning/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/base_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/default_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/fetcher/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/mxnet_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/onnxrt_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/pytorch_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/sampler/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/tensorflow_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/datasets/bert_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/coco_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset_v2/index.rst", "autoapi/neural_compressor/experimental/data/datasets/imagenet_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/index.rst", "autoapi/neural_compressor/experimental/data/datasets/style_transfer_dataset/index.rst", "autoapi/neural_compressor/experimental/data/filters/coco_filter/index.rst", "autoapi/neural_compressor/experimental/data/filters/filter/index.rst", "autoapi/neural_compressor/experimental/data/filters/index.rst", "autoapi/neural_compressor/experimental/data/index.rst", "autoapi/neural_compressor/experimental/data/transforms/imagenet_transform/index.rst", "autoapi/neural_compressor/experimental/data/transforms/index.rst", "autoapi/neural_compressor/experimental/data/transforms/tokenization/index.rst", "autoapi/neural_compressor/experimental/data/transforms/transform/index.rst", "autoapi/neural_compressor/experimental/distillation/index.rst", "autoapi/neural_compressor/experimental/export/index.rst", "autoapi/neural_compressor/experimental/export/qlinear2qdq/index.rst", "autoapi/neural_compressor/experimental/export/tf2onnx/index.rst", "autoapi/neural_compressor/experimental/export/torch2onnx/index.rst", "autoapi/neural_compressor/experimental/export/utils/index.rst", "autoapi/neural_compressor/experimental/graph_optimization/index.rst", "autoapi/neural_compressor/experimental/index.rst", "autoapi/neural_compressor/experimental/metric/bleu/index.rst", "autoapi/neural_compressor/experimental/metric/bleu_util/index.rst", "autoapi/neural_compressor/experimental/metric/coco_label_map/index.rst", "autoapi/neural_compressor/experimental/metric/coco_tools/index.rst", "autoapi/neural_compressor/experimental/metric/evaluate_squad/index.rst", "autoapi/neural_compressor/experimental/metric/f1/index.rst", "autoapi/neural_compressor/experimental/metric/index.rst", "autoapi/neural_compressor/experimental/metric/metric/index.rst", "autoapi/neural_compressor/experimental/mixed_precision/index.rst", "autoapi/neural_compressor/experimental/model_conversion/index.rst", "autoapi/neural_compressor/experimental/nas/basic_nas/index.rst", "autoapi/neural_compressor/experimental/nas/dynas/index.rst", "autoapi/neural_compressor/experimental/nas/index.rst", "autoapi/neural_compressor/experimental/nas/nas/index.rst", "autoapi/neural_compressor/experimental/nas/nas_utils/index.rst", "autoapi/neural_compressor/experimental/nas/search_algorithms/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/gradient_sensitivity/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/group_lasso/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/magnitude/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/pattern_lock/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/pruner/index.rst", "autoapi/neural_compressor/experimental/pruning/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/pattern/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/tile_pattern/index.rst", "autoapi/neural_compressor/experimental/pruning_v2/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/logger/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/patterns/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/prune_utils/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/pruner/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/pruning/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/scheduler/index.rst", "autoapi/neural_compressor/experimental/quantization/index.rst", "autoapi/neural_compressor/experimental/scheduler/index.rst", "autoapi/neural_compressor/index.rst", "autoapi/neural_compressor/metric/bleu/index.rst", "autoapi/neural_compressor/metric/bleu_util/index.rst", "autoapi/neural_compressor/metric/coco_label_map/index.rst", "autoapi/neural_compressor/metric/coco_tools/index.rst", "autoapi/neural_compressor/metric/evaluate_squad/index.rst", "autoapi/neural_compressor/metric/f1/index.rst", "autoapi/neural_compressor/metric/index.rst", "autoapi/neural_compressor/metric/metric/index.rst", "autoapi/neural_compressor/mix_precision/index.rst", "autoapi/neural_compressor/model/base_model/index.rst", "autoapi/neural_compressor/model/index.rst", "autoapi/neural_compressor/model/keras_model/index.rst", "autoapi/neural_compressor/model/model/index.rst", "autoapi/neural_compressor/model/mxnet_model/index.rst", "autoapi/neural_compressor/model/nets_factory/index.rst", "autoapi/neural_compressor/model/onnx_model/index.rst", "autoapi/neural_compressor/model/tensorflow_model/index.rst", "autoapi/neural_compressor/model/torch_model/index.rst", "autoapi/neural_compressor/objective/index.rst", "autoapi/neural_compressor/quantization/index.rst", "autoapi/neural_compressor/strategy/auto/index.rst", "autoapi/neural_compressor/strategy/auto_mixed_precision/index.rst", "autoapi/neural_compressor/strategy/basic/index.rst", "autoapi/neural_compressor/strategy/bayesian/index.rst", "autoapi/neural_compressor/strategy/conservative/index.rst", "autoapi/neural_compressor/strategy/exhaustive/index.rst", "autoapi/neural_compressor/strategy/hawq_v2/index.rst", "autoapi/neural_compressor/strategy/index.rst", "autoapi/neural_compressor/strategy/mse/index.rst", "autoapi/neural_compressor/strategy/mse_v2/index.rst", "autoapi/neural_compressor/strategy/random/index.rst", "autoapi/neural_compressor/strategy/strategy/index.rst", "autoapi/neural_compressor/strategy/utils/constant/index.rst", "autoapi/neural_compressor/strategy/utils/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_sampler/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_space/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_structs/index.rst", "autoapi/neural_compressor/strategy/utils/utility/index.rst", "autoapi/neural_compressor/template/api_doc_example/index.rst", "autoapi/neural_compressor/template/index.rst", "autoapi/neural_compressor/training/index.rst", "autoapi/neural_compressor/utils/collect_layer_histogram/index.rst", "autoapi/neural_compressor/utils/constant/index.rst", "autoapi/neural_compressor/utils/create_obj_from_config/index.rst", "autoapi/neural_compressor/utils/index.rst", "autoapi/neural_compressor/utils/kl_divergence/index.rst", "autoapi/neural_compressor/utils/load_huggingface/index.rst", "autoapi/neural_compressor/utils/logger/index.rst", "autoapi/neural_compressor/utils/options/index.rst", "autoapi/neural_compressor/utils/pytorch/index.rst", "autoapi/neural_compressor/utils/utility/index.rst", "autoapi/neural_compressor/ux/components/benchmark/benchmark/index.rst", "autoapi/neural_compressor/ux/components/benchmark/benchmark_model/index.rst", "autoapi/neural_compressor/ux/components/benchmark/execute_benchmark/index.rst", "autoapi/neural_compressor/ux/components/benchmark/index.rst", "autoapi/neural_compressor/ux/components/config_generator/benchmark_config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/graph_optimization_config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/mixed_precision_config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/profiling_config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/pruning_config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/quantization_config_generator/index.rst", "autoapi/neural_compressor/ux/components/configuration_wizard/configuration_parser/index.rst", "autoapi/neural_compressor/ux/components/configuration_wizard/get_boundary_nodes/index.rst", "autoapi/neural_compressor/ux/components/configuration_wizard/get_configuration/index.rst", "autoapi/neural_compressor/ux/components/configuration_wizard/index.rst", "autoapi/neural_compressor/ux/components/configuration_wizard/params_feeder/index.rst", "autoapi/neural_compressor/ux/components/configuration_wizard/pruning_config_parser/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_manager/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/benchmark/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/benchmark_result/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/dataloader/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/dataset/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/domain/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/domain_flavour/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/example/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/framework/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/metric/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/model/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/optimization/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/optimization_type/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/precision/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/profiling/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/profiling_result/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/project/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/pruning_details/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/transform/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/tuning_details/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/tuning_history/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/benchmark_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/dataset_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/db_operations/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/diagnosis_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/dictionaries_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/examples_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/model_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/optimization_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/profiling_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/project_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/index.rst", "autoapi/neural_compressor/ux/components/db_manager/params_interfaces/index.rst", "autoapi/neural_compressor/ux/components/db_manager/utils/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/diagnosis/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/factory/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/onnx_diagnosis/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/onnx_diagnosis/onnxrt_diagnosis/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/op_details/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/op_entry/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/tensorflow_diagnosis/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/tensorflow_diagnosis/tensorflow_diagnosis/index.rst", "autoapi/neural_compressor/ux/components/file_browser/file_browser/index.rst", "autoapi/neural_compressor/ux/components/file_browser/index.rst", "autoapi/neural_compressor/ux/components/graph/attribute/index.rst", "autoapi/neural_compressor/ux/components/graph/collapser/index.rst", "autoapi/neural_compressor/ux/components/graph/edge/index.rst", "autoapi/neural_compressor/ux/components/graph/graph/index.rst", "autoapi/neural_compressor/ux/components/graph/graph_reader/index.rst", "autoapi/neural_compressor/ux/components/graph/index.rst", "autoapi/neural_compressor/ux/components/graph/node/index.rst", "autoapi/neural_compressor/ux/components/graph/reader/index.rst", "autoapi/neural_compressor/ux/components/graph/reader/onnxrt_reader/index.rst", "autoapi/neural_compressor/ux/components/graph/reader/tensorflow_reader/index.rst", "autoapi/neural_compressor/ux/components/index.rst", "autoapi/neural_compressor/ux/components/jobs_management/index.rst", "autoapi/neural_compressor/ux/components/jobs_management/jobs_control_queue/index.rst", "autoapi/neural_compressor/ux/components/jobs_management/jobs_manager/index.rst", "autoapi/neural_compressor/ux/components/jobs_management/request/index.rst", "autoapi/neural_compressor/ux/components/manage_workspace/index.rst", "autoapi/neural_compressor/ux/components/model/domain/index.rst", "autoapi/neural_compressor/ux/components/model/index.rst", "autoapi/neural_compressor/ux/components/model/model/index.rst", "autoapi/neural_compressor/ux/components/model/model_type_getter/index.rst", "autoapi/neural_compressor/ux/components/model/onnxrt/index.rst", "autoapi/neural_compressor/ux/components/model/onnxrt/model/index.rst", "autoapi/neural_compressor/ux/components/model/pytorch/index.rst", "autoapi/neural_compressor/ux/components/model/pytorch/model/index.rst", "autoapi/neural_compressor/ux/components/model/repository/index.rst", "autoapi/neural_compressor/ux/components/model/shape/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/frozen_pb/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/keras/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/meta_graph/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/model/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/saved_model/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/utils/index.rst", "autoapi/neural_compressor/ux/components/model_zoo/download_config/index.rst", "autoapi/neural_compressor/ux/components/model_zoo/download_model/index.rst", "autoapi/neural_compressor/ux/components/model_zoo/downloader/index.rst", "autoapi/neural_compressor/ux/components/model_zoo/index.rst", "autoapi/neural_compressor/ux/components/model_zoo/list_models/index.rst", "autoapi/neural_compressor/ux/components/names_mapper/index.rst", "autoapi/neural_compressor/ux/components/names_mapper/names_mapper/index.rst", "autoapi/neural_compressor/ux/components/optimization/execute_optimization/index.rst", "autoapi/neural_compressor/ux/components/optimization/factory/index.rst", "autoapi/neural_compressor/ux/components/optimization/graph_optimizer/graph_optimization/index.rst", "autoapi/neural_compressor/ux/components/optimization/graph_optimizer/index.rst", "autoapi/neural_compressor/ux/components/optimization/graph_optimizer/optimize_model/index.rst", "autoapi/neural_compressor/ux/components/optimization/index.rst", "autoapi/neural_compressor/ux/components/optimization/mixed_precision/index.rst", "autoapi/neural_compressor/ux/components/optimization/mixed_precision/mixed_precision/index.rst", "autoapi/neural_compressor/ux/components/optimization/mixed_precision/optimize_model/index.rst", "autoapi/neural_compressor/ux/components/optimization/neural_coder_optimization/index.rst", "autoapi/neural_compressor/ux/components/optimization/neural_coder_optimization/optimize_model/index.rst", "autoapi/neural_compressor/ux/components/optimization/optimization/index.rst", "autoapi/neural_compressor/ux/components/optimization/pruning/index.rst", "autoapi/neural_compressor/ux/components/optimization/pruning/optimize_model/index.rst", "autoapi/neural_compressor/ux/components/optimization/pruning/pruning/index.rst", "autoapi/neural_compressor/ux/components/optimization/tune/index.rst", "autoapi/neural_compressor/ux/components/optimization/tune/tune_model/index.rst", "autoapi/neural_compressor/ux/components/optimization/tune/tuning/index.rst", "autoapi/neural_compressor/ux/components/optimization/tuning_history/index.rst", "autoapi/neural_compressor/ux/components/profiling/execute_profiling/index.rst", "autoapi/neural_compressor/ux/components/profiling/factory/index.rst", "autoapi/neural_compressor/ux/components/profiling/index.rst", "autoapi/neural_compressor/ux/components/profiling/profile_model/index.rst", "autoapi/neural_compressor/ux/components/profiling/profiler/index.rst", "autoapi/neural_compressor/ux/components/profiling/profiling/index.rst", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/factory/index.rst", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/index.rst", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/profiler/index.rst", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/utils/index.rst", "autoapi/neural_compressor/ux/inc_bench/index.rst", "autoapi/neural_compressor/ux/index.rst", "autoapi/neural_compressor/ux/utils/consts/index.rst", "autoapi/neural_compressor/ux/utils/environment/index.rst", "autoapi/neural_compressor/ux/utils/exceptions/index.rst", "autoapi/neural_compressor/ux/utils/executor/index.rst", "autoapi/neural_compressor/ux/utils/expiring_dict/index.rst", "autoapi/neural_compressor/ux/utils/github_info/index.rst", "autoapi/neural_compressor/ux/utils/hw_info/index.rst", "autoapi/neural_compressor/ux/utils/index.rst", "autoapi/neural_compressor/ux/utils/json_serializer/index.rst", "autoapi/neural_compressor/ux/utils/logger/index.rst", "autoapi/neural_compressor/ux/utils/parser/index.rst", "autoapi/neural_compressor/ux/utils/proc/index.rst", "autoapi/neural_compressor/ux/utils/processes/index.rst", "autoapi/neural_compressor/ux/utils/singleton/index.rst", "autoapi/neural_compressor/ux/utils/status_updates/index.rst", "autoapi/neural_compressor/ux/utils/templates/index.rst", "autoapi/neural_compressor/ux/utils/templates/metric/index.rst", "autoapi/neural_compressor/ux/utils/templates/workdir/index.rst", "autoapi/neural_compressor/ux/utils/utils/index.rst", "autoapi/neural_compressor/ux/utils/workload/config/index.rst", "autoapi/neural_compressor/ux/utils/workload/dataloader/index.rst", "autoapi/neural_compressor/ux/utils/workload/evaluation/index.rst", "autoapi/neural_compressor/ux/utils/workload/graph_optimization/index.rst", "autoapi/neural_compressor/ux/utils/workload/index.rst", "autoapi/neural_compressor/ux/utils/workload/mixed_precision/index.rst", "autoapi/neural_compressor/ux/utils/workload/model/index.rst", "autoapi/neural_compressor/ux/utils/workload/pruning/index.rst", "autoapi/neural_compressor/ux/utils/workload/quantization/index.rst", "autoapi/neural_compressor/ux/utils/workload/tuning/index.rst", "autoapi/neural_compressor/ux/utils/yaml_utils/index.rst", "autoapi/neural_compressor/ux/web/communication/index.rst", "autoapi/neural_compressor/ux/web/configuration/index.rst", "autoapi/neural_compressor/ux/web/exceptions/index.rst", "autoapi/neural_compressor/ux/web/index.rst", "autoapi/neural_compressor/ux/web/router/index.rst", "autoapi/neural_compressor/ux/web/server/index.rst", "autoapi/neural_compressor/ux/web/service/benchmark/index.rst", "autoapi/neural_compressor/ux/web/service/history_snapshot_parser/index.rst", "autoapi/neural_compressor/ux/web/service/index.rst", "autoapi/neural_compressor/ux/web/service/model/index.rst", "autoapi/neural_compressor/ux/web/service/optimization/index.rst", "autoapi/neural_compressor/ux/web/service/profiling/index.rst", "autoapi/neural_compressor/ux/web/service/request_data_processor/index.rst", "autoapi/neural_compressor/ux/web/service/response_generator/index.rst", "autoapi/neural_compressor/ux/web/service/workload/index.rst", "autoapi/neural_compressor/version/index.rst", "docs/build_docs/source/index.rst", "docs/source/CODE_OF_CONDUCT.md", "docs/source/CONTRIBUTING.md", "docs/source/FX.md", "docs/source/NAS.md", "docs/source/SECURITY.md", "docs/source/Welcome.md", "docs/source/adaptor.md", "docs/source/api-doc/adaptor.rst", "docs/source/api-doc/adaptor/onnxrt.rst", "docs/source/api-doc/adaptor/torch_utils.rst", "docs/source/api-doc/api_doc_example.rst", "docs/source/api-doc/apis.rst", "docs/source/api-doc/benchmark.rst", "docs/source/api-doc/compression.rst", "docs/source/api-doc/config.rst", "docs/source/api-doc/mix_precision.rst", "docs/source/api-doc/model.rst", "docs/source/api-doc/objective.rst", "docs/source/api-doc/quantization.rst", "docs/source/api-doc/strategy.rst", "docs/source/api-doc/training.rst", "docs/source/bench.md", "docs/source/benchmark.md", "docs/source/dataloader.md", "docs/source/dataset.md", "docs/source/design.md", "docs/source/distillation.md", "docs/source/distillation_quantization.md", "docs/source/distributed.md", "docs/source/examples_readme.md", "docs/source/export.md", "docs/source/faq.md", "docs/source/framework_yaml.md", "docs/source/get_started.md", "docs/source/incompatible_changes.md", "docs/source/infrastructure.md", "docs/source/installation_guide.md", "docs/source/legal_information.md", "docs/source/metric.md", "docs/source/migration.md", "docs/source/mixed_precision.md", "docs/source/model.md", "docs/source/neural_coder/README.md", "docs/source/neural_coder/docs/AWSSageMakerSupport.md", "docs/source/neural_coder/docs/BigDLNanoSupport.md", "docs/source/neural_coder/docs/IntelCPU_PerformanceSetting.md", "docs/source/neural_coder/docs/PythonAPI.md", "docs/source/neural_coder/docs/PythonLauncher.md", "docs/source/neural_coder/docs/Quantization.md", "docs/source/neural_coder/docs/SupportMatrix.md", "docs/source/neural_coder/docs/release_notes/v0.4.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/CHANGELOG.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/DEVELOP.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/README.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/RELEASE.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/CHANGELOG.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/DEVELOP.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/RELEASE.md", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/CHANGELOG.md", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/README.md", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/vsc-extension-quickstart.md", "docs/source/objective.md", "docs/source/orchestration.md", "docs/source/platform_configuration.md", "docs/source/pruning.md", "docs/source/publication_list.md", "docs/source/pythonic_style.md", "docs/source/quantization.md", "docs/source/quantization_mixed_precision.md", "docs/source/releases_info.md", "docs/source/sigopt_strategy.md", "docs/source/smooth_quant.md", "docs/source/tensorboard.md", "docs/source/transform.md", "docs/source/tuning_strategies.md", "docs/source/user_guide.md", "docs/source/user_yaml.md", "docs/source/validated_model_list.md", "index.rst"], "titles": ["<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">644ec953a7dc_pruning_support</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">6ece06672ed3_v1_14</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">6f0d0f71d92e_v1_13</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">9e89549a08c8_v1_11</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">block_mask</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">env</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.adaptor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.conv2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.dense</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.depthwise_conv2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.quantizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.separable_conv2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.mxnet</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.mxnet_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.mxnet_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.onnxrt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.calibration</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.calibrator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.activation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.argmax</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.attention</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.binary_op</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.concat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.direct_q8</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.embed_layernorm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.gather</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.gavgpool</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.gemm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.lstm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.maxpool</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.ops</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.pad</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.resize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.split</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.quantizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.pytorch</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.query</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tensorflow</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_converter_without_calib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.bf16</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph_common</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.tf2onnx_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.bias_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.insert_logging</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.bf16_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.hawq_metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.model_wrapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.smooth_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.symbolic_trace</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.algorithm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.fast_bias_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.smooth_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.weight_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.callbacks</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.distillation.criterions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.distillation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.criteria</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.model_slim.auto_slim</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.model_slim</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.model_slim.pattern_analyzer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.model_slim.weight_slim</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.patterns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.regs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.schedulers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf.dotdict</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf.pythonic_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib.strategy.sigopt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib.strategy.tpe</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.base_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.default_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.fetcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.mxnet_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.onnxrt_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.pytorch_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.tensorflow_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.bert_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.coco_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.dummy_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.dummy_dataset_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.imagenet_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.style_transfer_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.filters.coco_filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.filters.filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.filters</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.coco_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.imagenet_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.postprocess</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.tokenization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.criterion</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.postprocess</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.torch_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.component</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.compression</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.compression.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.base_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.default_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.fetcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.mxnet_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.onnxrt_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.pytorch_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.tensorflow_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.bert_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.coco_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.dummy_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.dummy_dataset_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.imagenet_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.style_transfer_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.filters.coco_filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.filters.filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.filters</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms.imagenet_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms.tokenization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms.transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.distillation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.qlinear2qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.tf2onnx</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.torch2onnx</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.graph_optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.bleu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.bleu_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.coco_label_map</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.coco_tools</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.evaluate_squad</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.f1</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.model_conversion</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.basic_nas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.nas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.nas_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.search_algorithms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.gradient_sensitivity</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.group_lasso</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.magnitude</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.pattern_lock</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes.patterns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes.patterns.pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes.patterns.tile_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.patterns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.prune_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.scheduler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.scheduler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.bleu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.bleu_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.coco_label_map</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.coco_tools</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.evaluate_squad</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.f1</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.mix_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.base_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.keras_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.mxnet_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.nets_factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.onnx_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.tensorflow_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.torch_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.objective</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.auto</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.auto_mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.basic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.bayesian</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.conservative</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.exhaustive</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.hawq_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.mse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.mse_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.random</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.tuning_sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.tuning_space</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.tuning_structs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.template.api_doc_example</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.template</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.training</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.collect_layer_histogram</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.create_obj_from_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.kl_divergence</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.load_huggingface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.options</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.pytorch</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.benchmark.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.benchmark.benchmark_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.benchmark.execute_benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.benchmark_config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.graph_optimization_config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.mixed_precision_config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.profiling_config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.pruning_config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.quantization_config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.configuration_wizard.configuration_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.configuration_wizard.get_boundary_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.configuration_wizard.get_configuration</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.configuration_wizard</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.configuration_wizard.params_feeder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.configuration_wizard.pruning_config_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_manager</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.benchmark_result</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.domain</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.domain_flavour</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.example</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.framework</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.optimization_type</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.profiling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.profiling_result</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.project</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.pruning_details</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.tuning_details</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.tuning_history</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.db_operations</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.examples_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.model_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.project_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.params_interfaces</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.diagnosis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.onnx_diagnosis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.op_details</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.op_entry</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.tensorflow_diagnosis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.file_browser.file_browser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.file_browser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.attribute</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.collapser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.edge</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.graph_reader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.node</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.reader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.reader.onnxrt_reader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.reader.tensorflow_reader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.jobs_management</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.jobs_management.jobs_control_queue</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.jobs_management.jobs_manager</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.jobs_management.request</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.manage_workspace</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.domain</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.model_type_getter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.onnxrt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.onnxrt.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.pytorch</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.pytorch.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.repository</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.shape</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow.frozen_pb</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow.keras</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow.meta_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow.saved_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model_zoo.download_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model_zoo.download_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model_zoo.downloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model_zoo</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model_zoo.list_models</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.names_mapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.names_mapper.names_mapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.execute_optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.graph_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.graph_optimizer.optimize_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.mixed_precision.mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.mixed_precision.optimize_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.neural_coder_optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.pruning.optimize_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.pruning.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.tune</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.tune.tune_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.tune.tuning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.tuning_history</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.execute_profiling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.profile_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.profiling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.tensorflow_profiler.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.tensorflow_profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.tensorflow_profiler.profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.tensorflow_profiler.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.inc_bench</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.consts</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.environment</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.exceptions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.executor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.expiring_dict</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.github_info</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.hw_info</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.json_serializer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.proc</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.processes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.singleton</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.status_updates</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.templates</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.templates.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.templates.workdir</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.evaluation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.graph_optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.tuning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.yaml_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.communication</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.configuration</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.exceptions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.router</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.server</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.history_snapshot_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.profiling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.request_data_processor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.response_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.workload</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.version</span></code>", "Intel\u00ae Neural Compressor Documentation", "Contributor Covenant Code of Conduct", "Contribution Guidelines", "FX", "Neural Architecture Search", "Security Policy", "Intel\u00ae Neural Compressor", "Adaptor", "Adaptor", "ONNX Runtime", "Torch Utils", "API Document Example", "APIs", "Benchmark", "Compression", "Config", "Mix Precision", "Model", "Objective", "Quantization", "Strategy", "Training", "Intel\u00ae Neural Compressor Bench", "Benchmarking", "DataLoader", "Dataset", "Design", "Distillation", "Distillation for Quantization", "Distributed Training and Inference (Evaluation)", "Examples", "Export", "Frequently Asked Questions", "Framework YAML Configuration Files", "Getting Started", "Incompatible changes between v1.2 and v1.1", "Infrastructure of Intel\u00ae Neural Compressor", "Installation", "Legal Information", "Metrics", "Code Migration from Intel Neural Compressor 1.X to Intel Neural Compressor 2.X", "Mixed Precision", "Model", "Neural Coder", "AWS Amazon SageMaker Support", "BigDL Nano Support", "Intel CPU Platforms: Best Performance Setting", "Neural Coder as Python API", "Python Launcher", "Neural Coder for Quantization", "Supported Optimization Features", "v0.4", "Changelog", "neural_compressor_ext_lab", "Intel\u00ae Neural Compressor as JupyterLab Extension", "Making a new release of neural_compressor_ext_lab", "Changelog", "neural_compressor_ext_lab_alibaba", "Making a new release of neural_compressor_ext_lab_alibaba", "Change Log", "Neural Coder", "Welcome to your VS Code Extension", "Objective", "Optimization Orchestration", "SYSTEM CONFIGURATION", "Pruning", "Full Publications/Events (59)", "Pythonic Style Access for Configurations", "Quantization", "Turn OFF Auto Mixed Precision during Quantization", "Release", "SigOpt Strategy", "Smooth Quant", "TensorBoard", "Transform", "Tuning Strategies", "User Guide", "User YAML Configuration Files", "Validated Models", "Intel\u00ae Neural Compressor Documentation"], "terms": {"pruning_support": 0, "revis": [0, 1, 2, 3], "id": [0, 1, 2, 3, 158, 209, 211, 247, 257, 259, 260, 261, 262, 295, 297, 298, 299, 300, 417, 567, 599, 603], "644ec953a7dc": 0, "6ece06672ed3": [0, 1], "creat": [0, 1, 2, 3, 5, 17, 20, 104, 178, 183, 193, 195, 213, 223, 233, 235, 260, 270, 271, 298, 330, 333, 338, 512, 529, 532, 535, 553, 570, 581, 583, 585, 586, 589, 596, 599, 601, 603], "date": [0, 1, 2, 3], "2022": [0, 1, 2, 3, 178, 534, 566, 600], "12": [0, 550, 562, 565, 606], "09": [0, 606], "17": [0, 600, 606], "22": [0, 3, 565, 606], "310141": 0, "v1": [1, 2, 3, 145, 205, 206, 245, 261, 262, 264, 299, 300, 302, 311, 557, 562, 567, 570, 593, 598, 599, 606], "14": [1, 2, 178, 252, 253, 559, 565, 600, 606], "6f0d0f71d92e": [1, 2], "08": [1, 210, 248, 602, 606], "31": [1, 606], "07": [1, 2, 600, 605, 606], "16": [1, 552, 553, 593, 600, 606], "24": [1, 600, 603, 606], "229939": 1, "update_dataload": 1, "db_session": [1, 399], "sqlalchemi": [1, 386, 399, 560, 565], "orm": [1, 386, 399], "session": [1, 145, 192, 232, 311, 399, 568, 601], "sourc": [1, 5, 6, 8, 15, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 101, 102, 103, 104, 106, 107, 108, 109, 112, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 163, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 177, 178, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 222, 223, 225, 226, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 245, 247, 248, 249, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 264, 265, 266, 267, 268, 270, 271, 272, 273, 274, 276, 277, 278, 279, 282, 283, 284, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 300, 302, 303, 304, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 323, 324, 325, 326, 329, 330, 331, 332, 333, 335, 336, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 393, 394, 395, 396, 398, 399, 400, 401, 404, 405, 406, 408, 409, 411, 412, 413, 414, 415, 417, 419, 420, 426, 427, 429, 430, 432, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 446, 448, 450, 451, 452, 453, 455, 456, 458, 459, 461, 462, 464, 465, 467, 468, 469, 470, 471, 473, 474, 475, 476, 478, 479, 480, 482, 483, 484, 485, 486, 487, 488, 490, 491, 492, 493, 494, 495, 496, 498, 499, 500, 501, 502, 503, 504, 506, 507, 508, 509, 510, 511, 512, 513, 514, 516, 517, 518, 519, 521, 522, 523, 524, 525, 526, 527, 531, 534, 566, 568, 581, 583, 585, 586, 588, 594], "updat": [1, 73, 150, 163, 169, 173, 253, 289, 314, 348, 399, 469, 496, 550, 559, 560, 567, 568, 574, 579, 582, 592, 593, 603, 604], "dataload": [1, 17, 19, 147, 150, 152, 158, 165, 167, 181, 182, 193, 204, 214, 233, 244, 249, 256, 279, 284, 293, 294, 314, 335, 338, 346, 373, 397, 399, 421, 462, 475, 481, 489, 500, 505, 531, 534, 535, 550, 555, 556, 557, 562, 563, 567, 568, 569, 591, 596, 597, 600, 601, 602, 605], "exist": [1, 52, 158, 175, 211, 311, 432, 500, 559, 567, 575, 593, 603], "databas": [1, 195, 235, 364, 367, 369, 372, 373, 374, 377, 378, 383, 387, 388, 392, 397], "update_transform": 1, "transform": [1, 43, 49, 140, 142, 143, 144, 170, 193, 194, 195, 196, 197, 198, 200, 202, 204, 233, 234, 235, 236, 237, 238, 240, 242, 244, 256, 294, 373, 397, 399, 421, 500, 502, 531, 532, 552, 553, 555, 556, 557, 558, 562, 568, 571, 576, 577, 578, 579, 593, 594, 597, 600, 601, 605, 606], "13": [2, 3, 314, 550, 565, 600], "9e89549a08c8": [2, 3], "29": [2, 600, 606], "41": [2, 600, 606], "291905": 2, "11": [3, 550, 565, 567, 569, 600, 603], "03": [3, 606], "34": [3, 606], "52": [3, 600, 606], "916541": 3, "block": [4, 163, 169, 170, 173, 287, 313, 333, 517, 564, 590, 593, 600], "mask": [4, 168, 169, 170, 193, 233, 260, 289, 298, 593, 606], "run_migrations_offlin": 5, "run": [5, 17, 145, 158, 170, 173, 178, 181, 182, 192, 209, 211, 232, 247, 288, 289, 303, 314, 318, 335, 447, 493, 515, 517, 530, 535, 550, 551, 557, 560, 561, 568, 569, 571, 573, 575, 576, 577, 579, 581, 582, 583, 585, 586, 588, 593, 594, 596, 598, 599, 601, 603, 605], "migrat": [5, 600, 604], "offlin": [5, 345, 529, 568, 596, 600], "mode": [5, 42, 43, 44, 109, 150, 202, 242, 260, 298, 311, 330, 345, 535, 550, 564, 565, 581, 585, 596, 597, 603], "thi": [5, 44, 85, 109, 131, 138, 140, 144, 147, 152, 157, 159, 165, 167, 169, 170, 171, 172, 178, 181, 182, 192, 193, 194, 195, 196, 197, 198, 200, 210, 213, 219, 220, 232, 233, 234, 235, 236, 237, 238, 240, 248, 257, 260, 261, 262, 264, 273, 274, 276, 277, 278, 279, 284, 287, 289, 291, 292, 293, 295, 298, 299, 300, 302, 303, 313, 314, 318, 323, 333, 335, 344, 345, 529, 530, 531, 532, 535, 550, 552, 553, 555, 556, 557, 561, 564, 566, 567, 568, 569, 570, 571, 573, 574, 576, 577, 579, 581, 583, 585, 586, 587, 588, 589, 593, 596, 597, 598, 599, 600, 601, 602, 603, 604], "configur": [5, 15, 17, 18, 44, 117, 146, 152, 158, 173, 174, 178, 181, 182, 184, 195, 198, 211, 216, 235, 238, 249, 253, 255, 266, 267, 268, 270, 279, 284, 288, 292, 293, 294, 303, 313, 314, 323, 335, 337, 338, 343, 344, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 363, 451, 481, 500, 501, 502, 503, 504, 506, 507, 508, 509, 510, 515, 517, 531, 532, 535, 550, 553, 567, 568, 575, 589, 590, 593, 596, 598, 602, 603, 606], "context": [5, 17, 345, 595], "just": [5, 96, 183, 208, 210, 213, 215, 216, 218, 223, 248, 313, 532, 568, 578, 582, 588, 591, 596, 600, 602, 603], "url": [5, 195, 235, 566], "an": [5, 17, 66, 67, 69, 104, 140, 147, 152, 157, 170, 178, 186, 191, 195, 210, 214, 219, 226, 231, 235, 248, 256, 257, 261, 262, 270, 271, 293, 294, 295, 299, 300, 303, 314, 333, 335, 409, 527, 529, 531, 532, 534, 535, 552, 553, 554, 559, 567, 568, 569, 571, 575, 576, 579, 588, 590, 593, 594, 596, 599, 600, 601, 602, 603], "engin": 5, "though": [5, 600], "i": [5, 17, 43, 44, 47, 48, 52, 53, 56, 59, 63, 69, 81, 84, 104, 131, 140, 145, 147, 151, 152, 157, 158, 159, 163, 167, 168, 170, 171, 173, 177, 178, 181, 182, 183, 191, 192, 193, 194, 195, 196, 197, 200, 202, 206, 210, 211, 213, 217, 219, 220, 223, 231, 232, 233, 234, 235, 236, 237, 240, 242, 245, 248, 257, 260, 262, 264, 266, 271, 279, 284, 288, 289, 293, 295, 298, 300, 302, 303, 313, 314, 319, 324, 333, 335, 344, 345, 409, 448, 488, 492, 498, 500, 508, 515, 529, 530, 531, 532, 534, 535, 536, 538, 542, 545, 548, 550, 551, 552, 553, 555, 556, 557, 559, 561, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 579, 581, 582, 583, 585, 586, 588, 589, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606], "accept": [5, 178, 333, 529, 550, 551], "here": [5, 260, 298, 333, 550, 553, 557, 558, 559, 561, 562, 567, 576, 583, 586, 588, 593, 596, 598, 599, 606], "well": [5, 181, 182, 303, 314, 335, 532, 534, 553, 593, 596, 598, 600, 605], "By": [5, 167, 178, 257, 295, 534, 567, 570, 581, 582, 585, 594, 603], "skip": [5, 601, 603], "creation": [5, 361], "we": [5, 43, 66, 67, 69, 73, 85, 140, 150, 156, 157, 158, 167, 178, 192, 211, 213, 232, 257, 260, 295, 298, 321, 529, 531, 535, 552, 557, 559, 561, 567, 568, 575, 576, 579, 583, 586, 588, 589, 590, 591, 593, 595, 596, 599, 600, 601, 603, 604], "don": [5, 140, 157, 169, 177, 178, 531, 550, 593, 603], "t": [5, 66, 67, 69, 140, 157, 169, 177, 178, 210, 213, 248, 262, 300, 531, 535, 550, 555, 557, 568, 589, 593, 596, 603, 605], "even": [5, 550, 593, 600], "need": [5, 17, 43, 104, 108, 150, 158, 167, 178, 181, 182, 183, 191, 192, 195, 202, 210, 213, 215, 216, 223, 231, 232, 235, 242, 248, 293, 302, 303, 313, 314, 323, 335, 344, 345, 531, 535, 550, 552, 553, 555, 557, 564, 568, 569, 571, 573, 574, 577, 581, 582, 583, 585, 586, 588, 589, 593, 595, 596, 597, 598, 600, 602, 603, 605], "dbapi": 5, "avail": [5, 178, 307, 448, 536, 538, 542, 545, 548, 550, 558, 562, 564, 581, 585, 592, 593, 603, 606], "call": [5, 17, 150, 153, 167, 170, 260, 289, 298, 531, 532, 535, 550, 552, 563, 577, 579, 589, 593, 596, 600, 601, 602], "execut": [5, 43, 52, 170, 177, 178, 289, 293, 314, 315, 317, 335, 338, 344, 345, 347, 348, 451, 455, 459, 463, 464, 467, 470, 482, 485, 493, 494, 516, 550, 555, 556, 568, 569, 573, 574, 581, 582, 585, 588, 589, 591, 593, 596, 599, 603, 606], "emit": 5, "given": [5, 17, 20, 66, 67, 69, 103, 104, 115, 145, 152, 210, 248, 260, 298, 314, 409, 486, 500, 532, 593, 600, 602], "string": [5, 43, 44, 115, 145, 160, 167, 169, 170, 171, 172, 173, 174, 178, 195, 212, 217, 235, 249, 253, 255, 257, 260, 266, 267, 268, 270, 271, 279, 284, 287, 288, 289, 290, 291, 292, 295, 298, 307, 311, 338, 345, 358, 500, 567, 600, 602], "script": [5, 167, 257, 258, 261, 262, 295, 296, 299, 300, 347, 348, 434, 451, 455, 459, 461, 464, 467, 473, 557, 564, 571, 575, 578, 579, 582, 594], "output": [5, 43, 52, 56, 58, 73, 97, 104, 109, 145, 152, 167, 168, 169, 175, 177, 178, 181, 182, 215, 219, 252, 253, 257, 287, 295, 302, 303, 311, 314, 335, 341, 342, 345, 455, 459, 531, 535, 550, 555, 556, 557, 559, 561, 563, 567, 568, 570, 579, 588, 589, 591, 593, 595, 596, 600, 601, 602, 603, 605], "run_migrations_onlin": 5, "onlin": [5, 529, 599], "In": [5, 159, 169, 170, 171, 178, 192, 220, 232, 260, 287, 289, 298, 313, 529, 531, 532, 534, 535, 550, 552, 553, 555, 556, 557, 567, 568, 578, 581, 582, 585, 590, 591, 593, 596, 597, 599, 600, 601, 602, 603], "scenario": [5, 362, 535, 550, 551, 555, 568, 593], "associ": [5, 260, 298, 387, 388], "connect": [5, 163, 289, 386, 387, 389, 390, 391, 393, 394, 395, 396, 550, 588, 592, 593, 599], "adaptor_registri": [6, 535], "cl": [6, 153, 160, 169, 170, 171, 172, 195, 202, 210, 212, 217, 235, 242, 248, 271, 278, 282, 287, 289, 291, 313, 326, 345], "The": [6, 8, 15, 18, 20, 37, 43, 52, 73, 112, 118, 120, 145, 152, 153, 158, 159, 160, 163, 167, 169, 170, 171, 172, 173, 174, 175, 178, 181, 182, 183, 193, 194, 195, 196, 197, 201, 202, 210, 212, 215, 217, 220, 222, 223, 233, 234, 235, 236, 237, 241, 242, 248, 249, 255, 257, 258, 259, 261, 262, 264, 266, 267, 268, 270, 271, 273, 274, 276, 277, 278, 279, 282, 284, 287, 288, 289, 290, 291, 292, 295, 296, 297, 299, 300, 302, 303, 311, 313, 314, 315, 316, 317, 318, 319, 320, 321, 323, 324, 325, 326, 330, 332, 333, 335, 336, 338, 340, 341, 344, 345, 365, 366, 368, 371, 375, 376, 379, 380, 382, 384, 385, 392, 397, 400, 402, 403, 404, 405, 406, 407, 408, 421, 428, 429, 481, 529, 531, 532, 535, 536, 538, 542, 545, 548, 550, 551, 552, 553, 555, 557, 559, 561, 563, 564, 565, 567, 568, 569, 570, 573, 574, 576, 579, 581, 582, 583, 585, 586, 588, 589, 590, 591, 593, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606], "decor": [6, 20, 37, 66, 67, 69, 145, 153, 169, 170, 172, 210, 217, 248, 264, 271, 278, 282, 287, 289, 291, 302, 313, 326, 329, 345, 495, 531, 532, 535, 603], "us": [6, 17, 20, 37, 43, 47, 48, 69, 102, 104, 115, 147, 152, 158, 160, 163, 167, 168, 169, 170, 172, 175, 177, 178, 181, 182, 191, 192, 193, 194, 195, 196, 197, 200, 209, 210, 211, 212, 217, 231, 232, 233, 234, 235, 236, 237, 240, 247, 248, 252, 253, 255, 257, 258, 260, 264, 265, 266, 271, 278, 279, 282, 284, 287, 289, 290, 291, 292, 293, 295, 296, 298, 302, 313, 318, 321, 323, 326, 329, 330, 333, 336, 337, 338, 339, 345, 392, 397, 402, 403, 407, 409, 421, 428, 430, 455, 459, 500, 512, 529, 530, 531, 532, 535, 550, 551, 552, 553, 555, 556, 557, 559, 561, 563, 565, 566, 567, 568, 569, 570, 571, 572, 573, 575, 576, 579, 581, 583, 585, 586, 588, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606], "regist": [6, 20, 37, 153, 160, 163, 169, 170, 171, 172, 195, 202, 210, 212, 217, 235, 242, 248, 264, 271, 278, 282, 287, 289, 291, 302, 313, 326, 329, 532, 535, 553, 557, 567, 568, 589, 590, 600, 603], "all": [6, 17, 20, 37, 44, 62, 96, 153, 155, 158, 159, 169, 170, 173, 178, 183, 184, 191, 195, 202, 210, 211, 217, 220, 222, 223, 231, 235, 242, 248, 253, 257, 260, 262, 264, 271, 278, 282, 283, 287, 293, 295, 298, 300, 302, 304, 313, 326, 329, 338, 345, 349, 361, 373, 397, 402, 403, 416, 418, 421, 422, 428, 447, 454, 456, 460, 461, 463, 466, 472, 477, 481, 494, 517, 529, 534, 535, 550, 552, 553, 557, 561, 565, 568, 571, 579, 582, 583, 586, 587, 588, 589, 591, 592, 593, 594, 596, 597, 600, 602, 603], "subclass": [6, 20, 37, 153, 169, 170, 172, 188, 192, 195, 202, 210, 217, 228, 232, 235, 242, 248, 264, 271, 278, 282, 287, 289, 291, 302, 313, 326, 329, 535], "paramet": [6, 15, 17, 18, 20, 43, 44, 66, 67, 69, 85, 104, 115, 131, 145, 146, 147, 150, 151, 152, 153, 158, 159, 160, 163, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 177, 178, 181, 182, 192, 193, 195, 202, 206, 210, 212, 217, 222, 232, 233, 235, 242, 245, 248, 249, 251, 252, 253, 254, 255, 257, 258, 260, 261, 262, 264, 266, 267, 268, 270, 271, 272, 273, 274, 276, 277, 278, 279, 282, 284, 287, 288, 289, 290, 291, 292, 295, 296, 298, 299, 300, 302, 303, 307, 311, 313, 314, 318, 326, 330, 332, 333, 335, 338, 342, 344, 345, 362, 387, 388, 398, 409, 480, 500, 502, 512, 531, 550, 552, 553, 555, 557, 564, 567, 568, 582, 588, 589, 593, 596, 599, 600, 602, 603, 605], "framework_specific_info": [6, 8, 15, 18, 44, 46, 535], "base": [6, 15, 17, 20, 37, 44, 45, 46, 85, 104, 115, 119, 121, 131, 141, 147, 152, 153, 159, 163, 178, 183, 186, 191, 193, 195, 202, 210, 220, 223, 226, 231, 233, 235, 242, 248, 264, 270, 272, 278, 279, 282, 284, 289, 302, 304, 311, 312, 313, 323, 326, 330, 360, 500, 532, 534, 535, 553, 556, 557, 561, 568, 576, 577, 579, 588, 592, 593, 596, 599, 601, 603, 606], "framework": [6, 8, 15, 17, 18, 44, 158, 160, 170, 179, 180, 184, 185, 189, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 204, 207, 210, 212, 213, 217, 224, 225, 227, 229, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 244, 246, 248, 255, 264, 265, 292, 302, 303, 304, 305, 307, 324, 330, 338, 347, 373, 397, 399, 421, 448, 455, 459, 464, 467, 482, 488, 500, 534, 535, 550, 557, 558, 562, 563, 564, 565, 567, 568, 569, 593, 594, 596, 601, 602, 603, 604, 605], "layer": [6, 8, 15, 18, 43, 44, 45, 46, 115, 116, 117, 118, 120, 121, 150, 156, 160, 165, 167, 168, 169, 173, 178, 212, 219, 287, 288, 336, 338, 345, 512, 535, 556, 564, 593, 598], "mxnet_util": 7, "util": [7, 16, 21, 104, 109, 110, 138, 139, 146, 147, 148, 151, 162, 164, 178, 219, 250, 256, 258, 288, 294, 296, 322, 360, 397, 421, 428, 438, 472, 477, 481, 536, 557, 568, 571, 596, 603, 604], "ox_util": 7, "oper": [7, 21, 43, 103, 109, 145, 167, 168, 169, 178, 206, 245, 287, 512, 531, 550, 551, 552, 559, 588, 596, 600, 602, 603], "activ": [7, 21, 33, 152, 177, 178, 219, 253, 330, 405, 535, 550, 556, 561, 568, 589, 592, 595, 596, 600, 601, 605], "argmax": [7, 21, 33], "attent": [7, 21, 33, 165, 167, 178, 193, 233, 529, 555], "binary_op": [7, 21, 33], "concat": [7, 21, 33, 144], "conv": [7, 21, 33, 57, 61, 65, 70, 71, 72, 91, 108, 156, 177, 178, 531, 568, 593, 595, 596, 603], "direct_q8": [7, 21, 33], "embed_layernorm": [7, 21, 33], "gather": [7, 17, 21, 33, 178, 287, 488], "gavgpool": [7, 21, 33], "gemm": [7, 21, 33, 177, 178, 593], "lstm": [7, 21, 33], "matmul": [7, 21, 33, 51, 58, 64, 72, 93, 108, 127, 136, 169, 177, 178, 253, 287, 559, 561, 603], "maxpool": [7, 21, 33, 128, 137, 561], "op": [7, 17, 21, 33, 43, 44, 51, 56, 64, 65, 66, 67, 68, 69, 70, 71, 73, 77, 80, 84, 87, 90, 91, 92, 93, 95, 104, 106, 108, 122, 123, 124, 130, 132, 133, 134, 135, 140, 143, 145, 146, 147, 151, 152, 156, 167, 177, 178, 253, 319, 321, 323, 330, 331, 340, 405, 406, 516, 535, 550, 561, 568, 569, 593, 596, 597, 598, 600, 601, 603, 605], "pad": [7, 21, 33, 70, 71, 193, 210, 233, 248, 553, 602], "pool": [7, 21, 33], "resiz": [7, 21, 33, 193, 194, 206, 210, 233, 234, 245, 248, 552, 553, 602], "split": [7, 21, 33, 43, 81, 209, 210, 247, 248, 531, 600, 602], "calibr": [7, 15, 17, 18, 21, 43, 48, 88, 89, 152, 158, 177, 178, 181, 182, 255, 292, 303, 314, 340, 509, 535, 552, 553, 563, 564, 596, 603, 605], "quantiz": [7, 15, 17, 18, 20, 21, 43, 47, 48, 87, 91, 93, 95, 98, 106, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 146, 147, 150, 152, 156, 158, 159, 177, 178, 181, 182, 206, 213, 220, 245, 253, 254, 255, 256, 266, 293, 294, 303, 319, 321, 323, 335, 336, 340, 344, 345, 481, 489, 505, 535, 540, 550, 552, 553, 557, 558, 559, 561, 563, 564, 567, 569, 570, 571, 576, 578, 579, 582, 591, 594, 598, 601, 602, 603, 604, 605], "tf_util": 7, "graph_rewrit": [7, 110], "bf16": [7, 56, 86, 110, 146, 177, 178, 330, 535, 561, 568, 569, 573, 578, 582, 588, 597, 603], "gener": [7, 17, 47, 48, 86, 110, 121, 145, 150, 152, 167, 173, 181, 182, 183, 192, 195, 196, 197, 198, 210, 223, 232, 235, 236, 237, 238, 248, 253, 257, 265, 295, 303, 314, 318, 333, 335, 347, 350, 351, 352, 353, 354, 355, 356, 357, 398, 467, 473, 474, 484, 525, 531, 535, 550, 552, 555, 567, 568, 569, 571, 576, 581, 583, 585, 586, 588, 590, 592, 593, 594, 596, 597, 600, 601, 602, 603], "int8": [7, 22, 23, 43, 86, 110, 122, 123, 124, 130, 132, 133, 134, 135, 140, 145, 157, 158, 177, 178, 206, 245, 251, 252, 253, 330, 332, 344, 531, 535, 550, 551, 553, 556, 561, 568, 573, 576, 578, 579, 582, 588, 595, 596, 597, 598, 599, 600, 601, 602, 605], "onnx": [7, 18, 19, 20, 33, 42, 43, 86, 110, 139, 156, 177, 178, 189, 229, 251, 252, 253, 254, 303, 310, 343, 348, 451, 534, 535, 536, 552, 558, 559, 561, 562, 564, 570, 573, 578, 579, 594, 595, 603], "qdq": [7, 86, 110, 111, 112, 139, 152, 177, 178, 251, 252, 253, 535, 559, 564, 578, 579, 596], "graph_bas": [7, 86, 110], "quantize_graph": [7, 110], "qat": [7, 110, 111, 151, 178, 253, 266, 311, 556, 557, 559, 564, 568, 596], "quantize_graph_bas": [7, 110, 111], "quantize_graph_bn": [7, 110, 111], "quantize_graph_concatv2": [7, 110, 111], "quantize_graph_conv": [7, 110, 111], "quantize_graph_for_intel_cpu": [7, 110, 111], "quantize_graph_matmul": [7, 110, 111], "quantize_graph_pool": [7, 110, 111], "transform_graph": [7, 110], "bias_correct": [7, 110, 142], "graph_transform_bas": [7, 110, 142], "insert_log": [7, 110, 142], "rerange_quantized_concat": [7, 110, 142], "graph_convert": [7, 110], "graph_converter_without_calib": [7, 110], "graph_util": [7, 110], "quantize_graph_common": [7, 110], "tf2onnx_convert": [7, 110], "torch_util": [7, 214, 256, 294, 600], "bf16_convert": [7, 50, 86, 110, 148], "hawq_metr": [7, 148], "model_wrapp": [7, 19, 148], "symbolic_trac": [7, 148], "tensorflow": [7, 50, 52, 74, 75, 76, 86, 94, 100, 101, 102, 103, 104, 105, 109, 110, 111, 113, 116, 129, 139, 142, 145, 177, 178, 192, 193, 194, 195, 198, 200, 202, 210, 212, 217, 232, 233, 234, 235, 238, 240, 242, 248, 252, 253, 254, 255, 258, 260, 264, 265, 266, 292, 296, 298, 302, 303, 311, 314, 324, 345, 407, 408, 420, 421, 428, 477, 478, 479, 481, 532, 534, 535, 550, 552, 555, 556, 558, 559, 561, 562, 564, 565, 568, 570, 578, 579, 594, 595, 599, 603, 605], "kerasadaptor": 8, "mxnetadaptor": 15, "do": [15, 18, 159, 177, 178, 192, 193, 232, 233, 249, 253, 257, 260, 290, 295, 298, 344, 529, 550, 553, 557, 561, 564, 565, 567, 568, 583, 586, 593, 597, 598, 603], "inspect": [15, 18, 550, 598, 601], "tensor": [15, 17, 18, 19, 20, 43, 69, 104, 145, 147, 152, 163, 169, 170, 171, 178, 210, 248, 251, 253, 287, 289, 311, 323, 345, 531, 553, 593, 596, 598, 601, 602, 603], "dict": [15, 17, 18, 43, 44, 115, 145, 146, 147, 150, 152, 153, 158, 163, 167, 168, 169, 170, 171, 172, 173, 175, 178, 181, 182, 192, 211, 217, 232, 251, 253, 259, 260, 261, 262, 264, 267, 270, 271, 272, 279, 282, 284, 287, 288, 289, 290, 291, 297, 298, 299, 300, 302, 303, 311, 314, 318, 319, 323, 329, 332, 333, 335, 336, 338, 344, 345, 346, 348, 351, 359, 360, 362, 367, 369, 370, 372, 374, 377, 378, 383, 387, 388, 399, 405, 409, 417, 426, 444, 445, 446, 448, 451, 453, 458, 462, 465, 468, 469, 470, 473, 475, 478, 485, 486, 488, 490, 496, 500, 501, 502, 503, 504, 506, 507, 508, 509, 510, 512, 516, 517, 531, 567, 593, 595, 596, 600, 601, 603], "specif": [15, 18, 44, 45, 103, 115, 173, 177, 178, 193, 194, 195, 196, 200, 202, 217, 233, 234, 235, 236, 240, 242, 266, 273, 274, 276, 277, 278, 387, 388, 529, 532, 535, 550, 555, 561, 563, 567, 568, 569, 570, 571, 575, 576, 578, 582, 588, 590, 593, 595, 603, 605], "mxnetqueri": 15, "local_config_fil": [15, 44, 46], "defin": [15, 44, 45, 85, 147, 149, 167, 169, 170, 171, 172, 178, 181, 182, 267, 268, 270, 271, 272, 279, 284, 287, 288, 289, 291, 303, 314, 335, 344, 423, 424, 425, 512, 529, 532, 535, 550, 552, 553, 555, 556, 561, 564, 567, 568, 589, 591, 593, 596, 599, 600, 601, 603, 605], "queri": [15, 17, 44, 46, 145, 167, 178, 330, 386, 387, 389, 390, 391, 393, 394, 395, 396, 596], "interfac": [15, 44, 45, 85, 112, 174, 255, 279, 284, 292, 293, 338, 346, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 398, 462, 468, 475, 487, 564, 568, 579, 592, 596, 598], "each": [15, 43, 44, 45, 147, 178, 191, 195, 198, 206, 210, 231, 235, 238, 245, 248, 258, 260, 261, 262, 296, 298, 299, 300, 323, 530, 535, 550, 553, 555, 556, 561, 568, 569, 573, 579, 582, 588, 590, 593, 599, 600, 601, 602, 603, 604], "adapt": [15, 44, 45, 529, 534, 553, 579, 594], "should": [15, 44, 45, 53, 114, 115, 165, 167, 178, 181, 182, 191, 193, 195, 210, 215, 231, 233, 235, 248, 253, 258, 296, 302, 303, 314, 333, 335, 345, 409, 531, 532, 535, 550, 553, 555, 557, 567, 568, 569, 574, 583, 586, 588, 590, 596, 602, 603, 605], "implement": [15, 44, 45, 109, 140, 144, 181, 182, 188, 191, 192, 193, 195, 228, 231, 232, 233, 235, 257, 295, 303, 313, 314, 321, 335, 552, 553, 568, 579, 589, 593, 596, 598, 601, 603, 605], "inherit": [15, 44, 45, 159, 160, 170, 172, 177, 190, 210, 212, 220, 230, 248, 289, 291, 532, 535, 553], "backend": [15, 19, 44, 45, 156, 177, 178, 179, 180, 184, 185, 189, 193, 194, 196, 197, 198, 199, 200, 204, 207, 210, 216, 217, 224, 225, 227, 229, 233, 234, 236, 237, 238, 239, 240, 244, 246, 248, 265, 303, 304, 305, 307, 324, 531, 557, 563, 564, 568, 569, 577, 595, 602, 605], "own": [15, 44, 45, 73, 191, 210, 231, 248, 313, 532, 550, 552, 553, 564, 567, 590, 599, 604], "mxnet": [16, 17, 20, 188, 192, 195, 198, 202, 210, 228, 232, 235, 238, 242, 248, 255, 264, 292, 302, 303, 308, 314, 534, 535, 552, 558, 561, 564, 565, 568, 569, 570, 595, 603, 605], "init": [16, 21, 155, 161, 164, 166, 553, 567], "optyp": [17, 177, 178, 251], "enum": 17, "type": [17, 20, 43, 44, 73, 95, 104, 115, 121, 131, 145, 146, 147, 152, 153, 160, 167, 168, 169, 170, 171, 172, 173, 175, 177, 178, 191, 193, 195, 202, 210, 212, 217, 231, 233, 235, 242, 248, 253, 254, 257, 258, 260, 264, 271, 278, 282, 287, 289, 291, 295, 296, 298, 302, 311, 313, 318, 319, 326, 330, 332, 333, 344, 358, 363, 387, 388, 430, 488, 496, 530, 535, 550, 553, 557, 561, 564, 568, 569, 589, 596, 599, 602, 603, 605], "isiter": 17, "obj": [17, 104, 173, 192, 222, 232, 249, 255, 266, 267, 268, 270, 279, 284, 288, 292, 303, 313, 314, 335, 338, 345], "bool": [17, 145, 151, 152, 169, 178, 193, 195, 206, 210, 233, 235, 245, 248, 253, 258, 264, 287, 296, 302, 329, 333, 344, 345, 409, 417, 436, 448, 451, 485, 488, 500, 519, 553, 567, 595, 602], "check": [17, 66, 67, 104, 145, 152, 173, 195, 235, 251, 288, 344, 345, 448, 451, 488, 500, 530, 534, 550, 557, 565, 572, 574, 576, 583, 586, 587, 598], "whether": [17, 104, 115, 145, 169, 177, 178, 191, 193, 206, 210, 231, 233, 245, 248, 258, 260, 264, 287, 296, 298, 302, 338, 344, 345, 451, 535, 553, 567, 596, 602], "object": [17, 43, 44, 73, 85, 104, 115, 131, 146, 147, 151, 152, 158, 159, 163, 168, 169, 170, 171, 172, 173, 174, 175, 177, 178, 181, 182, 183, 193, 194, 195, 210, 211, 213, 222, 223, 233, 234, 235, 248, 249, 253, 255, 260, 268, 270, 273, 274, 276, 277, 278, 279, 284, 287, 288, 289, 290, 291, 292, 294, 298, 303, 311, 312, 314, 318, 335, 338, 344, 345, 425, 500, 512, 513, 517, 531, 532, 540, 550, 551, 552, 553, 560, 567, 568, 570, 591, 593, 595, 596, 602, 603, 604, 606], "iter": [17, 19, 104, 145, 158, 168, 170, 172, 178, 181, 182, 186, 191, 195, 196, 213, 226, 231, 235, 236, 289, 291, 303, 314, 335, 338, 531, 532, 535, 551, 553, 568, 593, 595, 596, 601, 603, 605], "return": [17, 20, 43, 44, 52, 66, 67, 69, 73, 104, 115, 145, 146, 147, 151, 152, 153, 158, 160, 167, 169, 170, 171, 172, 173, 175, 181, 182, 195, 202, 206, 210, 211, 212, 217, 222, 235, 242, 245, 248, 253, 254, 257, 258, 260, 261, 262, 264, 270, 271, 278, 282, 287, 288, 289, 291, 295, 296, 298, 299, 300, 302, 303, 307, 311, 313, 314, 318, 326, 330, 332, 333, 335, 338, 344, 345, 409, 488, 500, 531, 532, 553, 557, 567, 570, 590, 593, 596, 600, 601, 603], "true": [17, 84, 112, 143, 145, 158, 177, 178, 191, 193, 195, 196, 209, 210, 211, 231, 233, 235, 236, 247, 248, 253, 258, 264, 282, 296, 302, 313, 329, 333, 338, 344, 485, 488, 500, 553, 557, 561, 567, 568, 571, 574, 575, 595, 596, 600, 601, 602, 603, 605], "els": [17, 145, 178, 191, 231, 313, 500, 576, 601], "fals": [17, 19, 42, 46, 47, 48, 70, 71, 88, 91, 98, 101, 102, 104, 112, 130, 135, 140, 143, 144, 145, 151, 152, 158, 160, 177, 178, 183, 185, 193, 195, 206, 210, 211, 212, 213, 219, 223, 225, 233, 235, 245, 248, 260, 264, 298, 302, 313, 333, 338, 417, 436, 488, 500, 519, 535, 553, 561, 567, 568, 581, 585, 595, 596, 600, 601, 602, 605], "boolean": [17, 500], "ensure_list": 17, "x": [17, 53, 73, 168, 192, 210, 232, 248, 318, 333, 557, 559, 569, 570, 593, 596, 600, 601, 602, 604], "ensur": [17, 210, 248, 318, 550, 557, 559, 596, 602], "list": [17, 43, 52, 104, 145, 146, 147, 152, 158, 167, 168, 169, 177, 178, 181, 182, 186, 193, 206, 210, 211, 226, 233, 245, 248, 252, 253, 257, 258, 260, 261, 262, 264, 271, 279, 284, 287, 290, 295, 296, 298, 299, 300, 302, 303, 311, 314, 329, 333, 335, 336, 358, 360, 362, 367, 369, 370, 372, 374, 377, 378, 383, 387, 388, 399, 409, 412, 417, 443, 448, 451, 455, 459, 485, 492, 493, 494, 500, 512, 519, 531, 534, 535, 553, 561, 565, 568, 571, 576, 578, 581, 582, 585, 590, 593, 595, 596, 597, 600, 601, 603], "input": [17, 19, 43, 44, 52, 59, 63, 66, 67, 69, 70, 71, 73, 81, 82, 84, 85, 104, 108, 109, 115, 121, 145, 146, 150, 151, 152, 156, 167, 168, 177, 178, 181, 182, 193, 194, 195, 197, 206, 209, 210, 215, 233, 234, 235, 237, 245, 247, 248, 251, 252, 253, 302, 303, 307, 311, 314, 335, 344, 345, 347, 443, 455, 459, 464, 467, 473, 532, 535, 550, 551, 552, 553, 555, 556, 557, 559, 561, 563, 567, 568, 570, 571, 576, 593, 595, 596, 600, 601, 602, 605], "check_mx_vers": 17, "version": [17, 52, 103, 152, 167, 178, 252, 253, 294, 448, 488, 500, 529, 531, 535, 550, 561, 565, 566, 568, 581, 583, 585, 586, 592, 594, 603, 604], "str": [17, 146, 147, 150, 151, 152, 153, 160, 167, 178, 193, 194, 195, 202, 206, 210, 212, 216, 217, 233, 234, 235, 242, 245, 248, 252, 253, 254, 257, 258, 260, 262, 264, 271, 282, 295, 296, 298, 300, 302, 329, 332, 333, 338, 345, 347, 348, 351, 358, 359, 360, 362, 364, 387, 388, 399, 405, 406, 409, 411, 412, 417, 426, 427, 429, 430, 432, 434, 436, 437, 440, 441, 442, 444, 445, 446, 448, 451, 455, 459, 464, 467, 469, 470, 473, 474, 485, 488, 493, 496, 500, 501, 502, 503, 504, 506, 507, 508, 509, 510, 512, 516, 517, 553, 567, 595, 601, 602], "mx": 17, "__version__": 17, "combine_cap": 17, "current": [17, 43, 69, 103, 150, 163, 167, 169, 170, 178, 266, 273, 274, 276, 277, 278, 287, 289, 318, 324, 531, 532, 535, 550, 557, 561, 565, 567, 568, 571, 575, 588, 590, 593, 596, 600, 603], "new": [17, 20, 145, 150, 158, 183, 195, 210, 211, 223, 235, 248, 288, 313, 512, 530, 557, 568, 569, 582, 588, 589, 593, 594, 596, 598, 599, 602, 604, 605], "combin": [17, 152, 177, 178, 181, 182, 206, 220, 245, 303, 314, 335, 345, 531, 535, 564, 568, 591, 594, 596, 597, 602, 603], "capabl": [17, 46, 330, 551, 561, 568, 569, 579, 595, 596, 603, 605], "contain": [17, 66, 67, 69, 73, 138, 145, 147, 150, 158, 159, 167, 169, 170, 172, 173, 178, 181, 182, 193, 194, 195, 233, 234, 235, 249, 253, 255, 260, 261, 262, 266, 279, 282, 284, 287, 288, 289, 290, 291, 292, 298, 299, 300, 303, 314, 335, 338, 344, 349, 353, 361, 367, 369, 370, 372, 373, 374, 377, 378, 381, 383, 392, 397, 402, 403, 407, 410, 416, 421, 422, 428, 447, 454, 456, 457, 460, 461, 463, 466, 472, 477, 481, 553, 555, 564, 567, 589, 593, 601, 603, 604], "make_nc_model": 17, "target": [17, 43, 101, 167, 172, 173, 178, 288, 291, 318, 413, 553, 557, 568, 593, 601, 602, 603, 605], "sym_model": 17, "ctx": 17, "input_desc": 17, "convert": [17, 43, 47, 48, 49, 51, 52, 53, 54, 55, 65, 73, 85, 98, 99, 101, 102, 103, 104, 130, 135, 139, 146, 152, 167, 177, 178, 193, 206, 209, 210, 233, 245, 247, 248, 252, 260, 266, 288, 298, 330, 333, 531, 568, 569, 573, 596, 597, 600, 602, 603], "symbol": [17, 146, 151, 152, 257, 295, 303, 314, 531, 570], "model": [17, 19, 20, 33, 42, 43, 44, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 68, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 115, 117, 139, 145, 146, 147, 150, 151, 152, 156, 158, 159, 165, 167, 170, 172, 173, 177, 178, 181, 182, 189, 192, 193, 195, 210, 211, 214, 215, 222, 229, 232, 233, 235, 248, 249, 251, 252, 253, 254, 255, 256, 264, 265, 266, 267, 270, 273, 274, 276, 277, 278, 279, 284, 288, 289, 290, 291, 292, 293, 294, 302, 303, 313, 314, 315, 318, 319, 323, 326, 333, 335, 341, 344, 345, 347, 348, 349, 373, 389, 391, 393, 397, 398, 409, 414, 415, 416, 419, 420, 421, 445, 446, 448, 451, 454, 455, 456, 457, 459, 460, 461, 466, 467, 472, 477, 481, 482, 489, 500, 505, 515, 516, 520, 527, 531, 532, 534, 535, 540, 551, 552, 553, 555, 556, 557, 558, 563, 564, 566, 567, 569, 571, 576, 578, 579, 582, 588, 590, 591, 592, 594, 596, 598, 599, 601, 602, 603, 604, 605], "neural": [17, 147, 158, 159, 169, 177, 178, 205, 206, 207, 210, 211, 214, 217, 220, 245, 246, 248, 250, 256, 263, 264, 266, 279, 284, 287, 290, 292, 293, 294, 301, 302, 303, 307, 314, 321, 322, 328, 335, 480, 487, 500, 527, 530, 535, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 566, 567, 569, 570, 572, 573, 576, 578, 579, 581, 583, 585, 586, 587, 590, 591, 594, 596, 598, 601, 602, 603, 605, 606], "compressor": [17, 158, 159, 169, 177, 178, 205, 206, 207, 210, 211, 214, 217, 220, 245, 246, 248, 250, 256, 263, 264, 266, 287, 290, 292, 293, 294, 301, 302, 303, 307, 314, 322, 328, 335, 480, 487, 500, 527, 530, 532, 535, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 566, 567, 569, 570, 571, 572, 576, 578, 579, 581, 583, 585, 586, 587, 590, 591, 593, 594, 596, 598, 601, 602, 603, 604, 605, 606], "tupl": [17, 104, 152, 178, 181, 182, 206, 210, 245, 248, 253, 303, 314, 329, 335, 500, 553, 567, 568, 596, 602], "symnet": 17, "arg": [17, 52, 104, 193, 194, 195, 233, 234, 235, 287, 318, 333, 341, 342, 350, 352, 354, 355, 356, 357, 367, 369, 370, 372, 374, 377, 378, 383, 552, 553, 557, 568, 577, 596, 601, 602], "aux": 17, "data": [17, 43, 54, 104, 145, 147, 150, 152, 156, 167, 177, 178, 181, 182, 211, 213, 253, 254, 256, 294, 303, 314, 318, 330, 332, 335, 338, 345, 348, 351, 359, 360, 362, 386, 398, 409, 425, 426, 436, 444, 445, 446, 448, 451, 468, 470, 485, 498, 500, 501, 502, 503, 504, 506, 507, 508, 509, 510, 512, 516, 524, 534, 535, 550, 552, 553, 557, 561, 562, 565, 567, 568, 569, 596, 597, 598, 599, 600, 601, 602, 603], "descript": [17, 131, 253, 254, 333, 530, 531], "ncmodel": 17, "fuse": [17, 57, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 90, 91, 92, 93, 95, 130, 135, 151, 152, 156, 531, 600, 601], "suppli": 17, "get_framework_nam": 17, "get": [17, 43, 44, 66, 67, 69, 103, 104, 145, 150, 152, 158, 163, 165, 167, 169, 170, 171, 172, 175, 178, 186, 210, 211, 217, 219, 226, 248, 253, 254, 287, 289, 291, 311, 323, 330, 332, 338, 345, 359, 360, 362, 399, 409, 426, 430, 443, 448, 451, 469, 480, 488, 496, 500, 516, 517, 550, 560, 564, 565, 568, 574, 600, 603, 604, 607], "name": [17, 43, 44, 52, 66, 67, 69, 103, 104, 109, 115, 145, 146, 147, 150, 151, 152, 153, 158, 163, 167, 169, 170, 171, 172, 175, 177, 178, 193, 194, 195, 198, 202, 208, 210, 211, 215, 218, 219, 233, 234, 235, 238, 242, 248, 251, 252, 253, 259, 264, 282, 287, 289, 291, 297, 302, 307, 311, 313, 330, 332, 336, 338, 345, 409, 411, 448, 449, 450, 451, 488, 500, 502, 531, 550, 553, 557, 561, 566, 567, 568, 570, 574, 581, 585, 589, 592, 593, 596, 598, 599, 601, 603, 605, 606], "prepare_model_data": 17, "nc_model": [17, 279, 284, 335], "data_x": 17, "prepar": [17, 152, 480, 531, 534, 553, 557, 562, 596], "loader": [17, 181, 182, 303, 314, 335, 341, 596], "dataloaderwrap": 17, "prepare_model": 17, "create_data_exampl": 17, "exampl": [17, 147, 152, 158, 167, 168, 177, 178, 193, 194, 195, 206, 210, 233, 234, 235, 245, 248, 260, 261, 262, 264, 290, 298, 299, 300, 302, 303, 313, 314, 333, 335, 373, 391, 397, 421, 445, 446, 447, 448, 500, 529, 530, 534, 540, 550, 563, 564, 571, 574, 575, 576, 579, 597, 598, 602, 603, 604, 607], "prepare_dataload": 17, "io": 17, "ndarray_to_devic": 17, "ndarrai": [17, 66, 67, 69, 210, 248, 336, 560, 602], "devic": [17, 78, 88, 89, 90, 91, 92, 93, 96, 106, 130, 135, 144, 167, 168, 177, 178, 555, 568, 569, 571, 574, 579, 588, 593, 595], "is_model_quant": 17, "query_quantizable_nod": 17, "node": [17, 43, 49, 52, 53, 54, 55, 59, 61, 63, 66, 67, 69, 73, 76, 79, 81, 82, 83, 97, 101, 102, 104, 109, 131, 145, 251, 253, 311, 411, 413, 416, 421, 479, 481, 535, 550, 557, 601, 603], "map": [17, 43, 104, 178, 210, 248, 251, 253, 255, 259, 261, 262, 264, 279, 284, 289, 292, 297, 299, 300, 302, 450, 553, 557, 567, 568, 581, 585, 593, 596], "quantize_sym_model": 17, "qconfig": [17, 601], "accord": [17, 121, 152, 158, 178, 193, 194, 195, 210, 233, 234, 235, 248, 321, 323, 330, 338, 532, 535, 553, 557, 593, 597, 600, 602, 603], "run_forward": 17, "b_filter": 17, "collector": [17, 147, 336], "none": [17, 42, 43, 44, 46, 47, 48, 62, 88, 101, 103, 104, 109, 115, 139, 145, 147, 150, 152, 158, 159, 160, 165, 167, 173, 174, 175, 177, 178, 181, 182, 183, 185, 191, 193, 194, 195, 196, 197, 198, 200, 206, 210, 211, 212, 213, 220, 222, 223, 225, 231, 233, 234, 235, 236, 237, 238, 240, 245, 248, 249, 252, 253, 255, 260, 264, 265, 266, 267, 270, 279, 284, 288, 292, 298, 302, 303, 313, 314, 315, 318, 319, 323, 326, 330, 333, 335, 336, 338, 344, 345, 347, 348, 359, 360, 364, 367, 369, 370, 372, 374, 377, 378, 383, 386, 387, 388, 399, 436, 448, 455, 459, 464, 467, 468, 470, 480, 485, 486, 488, 491, 493, 500, 506, 508, 509, 510, 517, 535, 553, 567, 596, 601, 602, 603], "pre_batch": 17, "post_batch": 17, "forward": [17, 534, 568, 593, 595, 596, 600, 601], "propag": [17, 99], "filter": [17, 193, 194, 195, 196, 197, 198, 200, 204, 233, 234, 235, 236, 237, 238, 240, 244, 256, 294, 345, 409, 502, 552, 553, 564, 593, 601], "which": [17, 54, 82, 109, 147, 150, 163, 167, 168, 169, 170, 172, 173, 177, 178, 193, 194, 195, 206, 211, 233, 234, 235, 245, 257, 262, 271, 273, 274, 276, 277, 278, 282, 287, 288, 289, 291, 295, 300, 307, 313, 314, 318, 345, 498, 529, 531, 532, 535, 550, 552, 553, 555, 557, 560, 561, 564, 567, 568, 569, 570, 572, 576, 579, 582, 588, 589, 591, 593, 595, 596, 597, 598, 600, 601, 602, 603, 604, 605], "batch": [17, 152, 183, 185, 186, 191, 192, 213, 223, 225, 226, 231, 232, 335, 550, 552, 555, 556, 568, 591, 593, 602, 603, 606], "infer": [17, 104, 167, 255, 292, 311, 313, 314, 335, 534, 535, 555, 556, 568, 569, 588, 590, 593, 594, 596, 600, 601, 603], "collect": [17, 20, 43, 208, 210, 213, 215, 216, 218, 248, 262, 264, 300, 302, 336, 345, 451, 488, 500, 559, 596, 601, 603], "inform": [17, 43, 147, 163, 167, 169, 170, 171, 172, 173, 178, 181, 182, 213, 215, 216, 287, 289, 290, 291, 293, 302, 362, 487, 488, 494, 529, 530, 533, 534, 535, 536, 538, 542, 545, 548, 555, 559, 561, 568, 570, 583, 586, 589, 593, 597, 598, 601, 605, 606, 607], "dure": [17, 169, 172, 178, 287, 291, 313, 568, 569, 570, 590, 591, 593, 596, 601, 605], "prior": [17, 87, 603], "after": [17, 43, 77, 152, 165, 169, 170, 178, 193, 206, 210, 213, 233, 245, 248, 253, 289, 319, 333, 486, 532, 550, 552, 553, 555, 556, 559, 564, 567, 568, 581, 582, 585, 589, 590, 591, 593, 596, 597, 599, 600, 601, 602, 603], "count": [17, 532, 553], "int": [17, 20, 43, 104, 145, 152, 165, 178, 192, 193, 194, 206, 210, 232, 233, 234, 245, 248, 252, 253, 258, 260, 264, 271, 296, 298, 302, 333, 345, 364, 399, 443, 486, 488, 491, 500, 508, 553, 567, 568, 595, 602], "make_symbol_block": 17, "gluon": [17, 303, 314, 570], "symbolblock": 17, "make_modul": 17, "parse_tune_config": 17, "tune_cfg": [17, 145, 146, 152, 535, 603], "quantizable_nod": 17, "strategi": [17, 152, 170, 177, 178, 179, 195, 235, 294, 482, 500, 510, 534, 535, 540, 557, 564, 568, 576, 588, 594, 595, 596, 597, 598, 604, 605], "config": [17, 114, 115, 117, 121, 152, 158, 163, 165, 169, 170, 171, 172, 173, 177, 181, 182, 193, 222, 233, 273, 274, 276, 277, 278, 279, 284, 287, 288, 289, 290, 291, 294, 303, 330, 331, 333, 335, 338, 344, 345, 347, 360, 399, 444, 455, 459, 464, 467, 481, 489, 500, 503, 505, 511, 532, 534, 540, 550, 551, 555, 556, 557, 559, 562, 564, 568, 569, 570, 591, 593, 595, 596, 597, 599, 601, 603], "tune": [17, 44, 158, 177, 178, 181, 182, 193, 195, 233, 235, 255, 292, 303, 313, 314, 315, 316, 317, 318, 319, 320, 321, 323, 324, 325, 326, 329, 330, 331, 332, 335, 345, 384, 385, 398, 421, 451, 456, 469, 481, 489, 505, 535, 550, 552, 553, 557, 564, 566, 568, 569, 588, 590, 593, 594, 597, 598, 599, 601, 605], "from": [17, 43, 44, 60, 66, 67, 69, 104, 145, 150, 152, 158, 159, 160, 163, 169, 170, 171, 172, 173, 178, 181, 182, 183, 186, 190, 193, 194, 195, 196, 197, 198, 200, 205, 206, 212, 213, 216, 223, 226, 230, 233, 234, 235, 236, 237, 238, 240, 245, 249, 251, 252, 253, 254, 257, 260, 261, 262, 266, 271, 287, 288, 289, 291, 295, 298, 299, 300, 303, 311, 313, 314, 330, 332, 333, 338, 344, 345, 398, 409, 432, 444, 445, 446, 448, 473, 493, 498, 500, 517, 529, 531, 532, 535, 551, 552, 553, 555, 556, 557, 558, 559, 560, 562, 564, 567, 569, 570, 571, 575, 576, 577, 579, 589, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604], "distribute_calib_tensor": 17, "calib_tensor": 17, "calib_cfg": 17, "tensor_to_nod": 17, "distribut": [17, 20, 140, 157, 177, 178, 183, 185, 186, 191, 213, 223, 225, 226, 231, 340, 488, 534, 555, 565, 583, 586, 594, 596, 598, 600, 604, 606], "depend": [17, 181, 182, 211, 303, 314, 335, 530, 550, 560, 561, 595, 596, 603], "algorithm": [17, 150, 152, 174, 257, 264, 272, 294, 295, 302, 338, 340, 532, 535, 555, 556, 561, 564, 577, 582, 593, 596, 601, 605], "set": [17, 43, 56, 95, 104, 114, 145, 150, 152, 158, 173, 175, 177, 178, 181, 182, 183, 193, 195, 198, 210, 211, 216, 217, 223, 233, 235, 238, 248, 253, 260, 266, 279, 284, 288, 293, 298, 303, 311, 314, 333, 335, 345, 347, 387, 388, 409, 455, 459, 467, 512, 517, 529, 532, 550, 551, 553, 555, 557, 561, 563, 564, 565, 567, 568, 569, 571, 573, 575, 589, 593, 595, 596, 599, 600, 603, 605], "kl": [17, 20, 178, 336, 340, 561, 568, 603, 605], "minmax": [17, 20, 561, 596, 605], "calib_model": 17, "qsym_model": 17, "calib_data": 17, "calibdata": 17, "threshold": [17, 154, 336, 340, 567], "amp_convert": 17, "amp_cfg": 17, "support": [17, 43, 96, 103, 150, 156, 160, 169, 170, 177, 178, 181, 182, 192, 193, 195, 202, 206, 210, 212, 213, 214, 217, 222, 232, 233, 235, 242, 245, 248, 256, 264, 266, 271, 287, 289, 293, 294, 302, 303, 307, 313, 314, 324, 330, 333, 335, 338, 340, 448, 482, 500, 527, 534, 550, 568, 571, 576, 579, 582, 588, 594, 597, 599, 600, 603, 604], "amp": [17, 571, 578, 592], "wrap": [17, 104, 115, 160, 212, 260, 298, 358, 531, 557, 583, 586], "dataiterload": 17, "data_it": [17, 167], "collectorbas": 17, "calibcollector": 17, "include_tensors_kl": 17, "include_tensors_minmax": 17, "num_bin": [17, 20, 336], "8001": [17, 336], "tensorcollector": 17, "include_nod": 17, "qtensor_to_tensor": 17, "build": [17, 114, 153, 154, 156, 157, 168, 253, 254, 267, 270, 306, 308, 310, 311, 312, 409, 469, 500, 517, 535, 550, 565, 570, 581, 583, 585, 586, 589, 594, 599, 603], "up": [17, 99, 210, 248, 288, 386, 550, 557, 558, 561, 564, 579, 583, 586, 588, 594, 595, 596, 599, 602, 603, 605], "namecollector": 17, "cache_kl": 17, "cache_minmax": 17, "tensors_kl": 17, "tensors_minmax": 17, "onnxruntimeadaptor": 18, "rt": 18, "onnxrt_qlinearopsadaptor": [18, 535], "onnxrt_integeropsadaptor": 18, "onnxrt_qdqadaptor": 18, "onnxrtaug": 19, "dump_op_typ": 19, "black_nod": 19, "white_nod": 19, "cpuexecutionprovid": [19, 596], "reduce_rang": [19, 42, 177, 178, 595], "augment": 19, "dump": [19, 253, 345, 596, 601], "calib_registri": 20, "calib_method": 20, "calibratorbas": 20, "minmaxcalibr": 20, "percentilecalibr": 20, "2048": [20, 345], "percentil": 20, "99": [20, 600, 606], "999": [20, 605, 606], "option": [20, 104, 169, 178, 181, 182, 193, 210, 233, 248, 252, 253, 260, 266, 287, 293, 294, 298, 303, 314, 330, 333, 335, 339, 345, 553, 561, 565, 568, 582, 596, 599, 602, 603, 605], "number": [20, 66, 67, 104, 152, 165, 168, 169, 177, 178, 191, 194, 206, 210, 231, 234, 245, 248, 261, 262, 264, 287, 299, 300, 302, 318, 333, 338, 345, 432, 488, 550, 551, 553, 557, 567, 593, 596, 599, 602, 603], "bin": [20, 345, 560], "histogram": [20, 336, 345, 550, 601], "valu": [20, 43, 54, 66, 67, 69, 88, 89, 104, 140, 145, 152, 157, 158, 163, 167, 168, 173, 175, 177, 178, 181, 182, 193, 196, 197, 206, 210, 211, 233, 236, 237, 245, 248, 260, 264, 288, 298, 302, 303, 314, 318, 323, 330, 333, 335, 336, 338, 345, 358, 360, 362, 367, 369, 370, 372, 374, 377, 378, 383, 387, 388, 409, 411, 482, 486, 500, 508, 511, 531, 550, 553, 561, 567, 568, 574, 590, 593, 595, 596, 600, 602, 603, 605], "default": [20, 96, 145, 173, 175, 177, 178, 181, 182, 185, 193, 194, 195, 206, 210, 225, 233, 234, 235, 245, 248, 252, 253, 257, 266, 288, 295, 311, 332, 338, 345, 367, 369, 370, 372, 374, 377, 378, 383, 409, 426, 500, 531, 535, 550, 553, 559, 561, 564, 565, 567, 568, 569, 576, 579, 581, 585, 590, 593, 595, 596, 597, 599, 602, 603, 605], "float": [20, 43, 147, 169, 170, 171, 173, 178, 193, 206, 233, 245, 258, 260, 261, 262, 289, 296, 298, 299, 300, 333, 348, 406, 461, 486, 500, 508, 511, 553, 567, 595, 596, 600, 602], "A": [20, 43, 53, 73, 74, 102, 115, 145, 152, 159, 163, 167, 169, 170, 171, 172, 173, 178, 195, 210, 213, 215, 216, 222, 235, 248, 249, 257, 260, 261, 262, 264, 267, 270, 271, 272, 279, 282, 284, 287, 288, 289, 290, 291, 295, 298, 299, 300, 302, 303, 307, 311, 318, 335, 553, 558, 561, 567, 568, 570, 581, 582, 585, 588, 593, 594, 596, 600, 602, 603, 605], "between": [20, 140, 157, 170, 178, 210, 248, 261, 264, 299, 302, 512, 516, 531, 535, 555, 559, 564, 567, 568, 579, 596, 598, 599, 600, 602, 603], "0": [20, 43, 52, 89, 104, 145, 154, 156, 160, 165, 177, 178, 183, 185, 193, 196, 197, 200, 206, 210, 212, 213, 223, 225, 233, 236, 237, 240, 245, 248, 253, 255, 264, 271, 279, 284, 292, 302, 313, 319, 333, 531, 550, 553, 555, 557, 559, 560, 561, 562, 565, 566, 567, 568, 569, 574, 576, 581, 585, 592, 593, 595, 596, 598, 599, 600, 601, 602, 603, 605], "100": [20, 158, 177, 178, 195, 235, 333, 551, 553, 557, 563, 568, 595, 596, 600, 602, 603, 605, 606], "klcalibr": 20, "128": [20, 193, 196, 197, 210, 233, 236, 237, 248, 553, 568, 596, 602], "num_quantized_bin": 20, "histogramcollector": 20, "collctor": 20, "smooth_distribut": 20, "p": [20, 550, 589], "ep": [20, 157, 569], "0001": [20, 178, 555, 568, 595], "smooth": [20, 43, 150, 156, 177, 178, 593], "discret": [20, 603], "mai": [20, 145, 273, 274, 276, 277, 278, 333, 529, 530, 550, 552, 560, 566, 569, 581, 585, 592, 594, 596, 603], "have": [20, 43, 73, 82, 145, 168, 169, 170, 191, 213, 231, 257, 260, 287, 289, 295, 298, 333, 529, 530, 550, 552, 553, 557, 561, 566, 567, 568, 569, 571, 588, 590, 593, 596, 600, 603], "been": [20, 169, 170, 257, 287, 289, 295, 530, 532, 550, 555, 568, 569, 588, 600], "normal": [20, 210, 248, 262, 300, 500, 568, 590, 600, 602], "1": [20, 43, 53, 73, 88, 104, 108, 112, 143, 145, 150, 152, 154, 156, 157, 158, 160, 170, 177, 178, 183, 185, 192, 193, 194, 196, 197, 200, 201, 206, 210, 211, 212, 213, 223, 225, 232, 233, 234, 236, 237, 240, 241, 245, 248, 255, 260, 261, 262, 264, 279, 284, 289, 292, 293, 298, 299, 300, 302, 313, 314, 333, 338, 348, 470, 529, 531, 534, 535, 552, 553, 555, 559, 561, 562, 565, 567, 569, 572, 574, 590, 591, 592, 593, 595, 596, 598, 599, 600, 601, 602, 603, 604, 605], "replac": [20, 150, 262, 300, 500, 557, 568, 579, 598], "zero": [20, 43, 170, 173, 210, 248, 289, 345, 534, 593, 596, 600, 602, 603], "multipli": 20, "scale": [20, 43, 99, 140, 150, 156, 157, 206, 210, 245, 248, 253, 559, 596, 599, 600, 602, 603], "factor": [20, 592, 600, 606], "take": [20, 169, 178, 181, 182, 186, 210, 215, 226, 248, 287, 302, 303, 314, 318, 335, 529, 531, 532, 550, 552, 555, 561, 568, 588, 593, 596, 597, 602, 603, 605], "correspond": [20, 43, 147, 167, 178, 193, 233, 257, 260, 264, 295, 298, 302, 338, 535, 561, 568, 593, 595, 596, 599, 600, 603], "amount": 20, "off": [20, 66, 67, 69, 530], "non": [20, 288, 345, 531, 592, 593, 603], "ref": [20, 145], "http": [20, 147, 163, 169, 170, 193, 195, 233, 235, 257, 258, 260, 261, 262, 287, 289, 290, 295, 296, 298, 299, 300, 531, 534, 550, 553, 562, 565, 566, 568, 577, 583, 586, 598], "hanj": 20, "c": [20, 73, 195, 235, 550, 553, 560, 565, 603], "illinoi": 20, "edu": [20, 195, 235, 553], "cs412": 20, "bk3": 20, "diverg": [20, 336, 340, 555, 603], "pdf": 20, "github": [20, 147, 169, 193, 233, 257, 258, 261, 262, 287, 290, 295, 296, 299, 300, 444, 487, 530, 550, 553, 558, 562, 565, 566, 568, 577, 583, 586, 598], "com": [20, 147, 169, 193, 233, 257, 258, 261, 262, 287, 290, 295, 296, 299, 300, 529, 534, 550, 553, 562, 565, 566, 568, 571, 577, 598, 599, 606], "apach": [20, 566], "incub": 20, "blob": [20, 147, 169, 257, 258, 261, 262, 287, 295, 296, 299, 300, 568, 577], "master": [20, 169, 257, 258, 261, 262, 287, 290, 295, 296, 299, 300, 568, 603], "python": [20, 74, 145, 195, 214, 235, 256, 294, 333, 345, 448, 527, 530, 531, 550, 553, 557, 560, 565, 568, 573, 579, 582, 588, 594, 602], "contrib": [20, 294], "py": [20, 145, 147, 170, 178, 258, 260, 261, 262, 289, 296, 298, 299, 300, 333, 516, 531, 535, 550, 557, 565, 568, 573, 575, 576, 577, 583, 586, 596, 598, 601], "microsoft": [20, 535], "onnxruntim": [20, 177, 178, 189, 195, 202, 229, 235, 242, 265, 404, 408, 535, 562, 564, 565, 569, 595], "main": [20, 217, 290, 480, 517, 531, 557, 562, 568, 575, 577, 589, 593, 596], "tool": [20, 145, 252, 345, 534, 535, 568, 581, 585, 593, 594, 596], "arrai": [20, 43, 145, 210, 248, 260, 271, 298, 345, 602], "small": [20, 66, 67, 68, 321, 532, 550, 593, 603], "probabl": [20, 178, 340], "activationoper": 22, "onnx_quant": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41], "onnx_nod": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 86, 100, 110], "removableactivationoper": 22, "remov": [22, 43, 55, 56, 59, 73, 79, 82, 83, 84, 95, 97, 165, 253, 262, 300, 386, 432, 529, 530, 568, 581, 585, 593, 601], "qactivationoper": 22, "children": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 35, 36, 37, 38, 39, 40, 41], "initi": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 35, 36, 37, 38, 39, 40, 41, 43, 104, 115, 145, 160, 170, 181, 182, 190, 193, 212, 230, 233, 288, 289, 314, 330, 335, 387, 388, 480, 532, 550, 552, 553, 567, 587, 593, 596, 600, 603], "qoper": [22, 37, 177, 178], "format": [22, 43, 52, 145, 178, 193, 194, 195, 233, 234, 235, 253, 260, 266, 298, 330, 333, 451, 553, 557, 559, 567, 568, 569, 570, 571, 596], "argmaxoper": 23, "qargmaxoper": 23, "attentionoper": 24, "qattentionoper": 24, "qattent": 24, "binari": [25, 145, 264, 302, 560, 567, 583, 586], "binaryoper": 25, "qbinaryoper": 25, "qbinari": 25, "concatoper": 26, "qconcatoper": 26, "qconcat": 26, "convoper": 27, "qconvoper": 27, "qlinearconv": 27, "direct8bit": 28, "direct8bitoper": 28, "qdirectoper": 28, "qdirect": 28, "embedlayernorm": 29, "embedlayernormalizationoper": 29, "qembedlayernormalizationoper": 29, "qembedlayernorm": 29, "gatheroper": 30, "qgatheroper": 30, "qgather": 30, "globalaveragepool": 31, "globalaveragepooloper": 31, "qglobalaveragepooloper": 31, "qlinearglobalaveragepool": 31, "gemmoper": 32, "qgemmoper": 32, "qgemm": 32, "lstmoper": 34, "matmuloper": 35, "qmatmuloper": 35, "qlinearmatmul": 35, "maxpooloper": 36, "qmaxpooloper": 36, "qmaxpool": 36, "op_registri": 37, "op_typ": [37, 331], "qop_registri": 37, "padoper": 38, "qpadoper": 38, "qpad": 38, "averagepool": 39, "pooloper": 39, "qpooloper": 39, "qlinearaveragepool": 39, "resizeoper": 40, "qresizeoper": 40, "qresiz": 40, "splitoper": 41, "qsplitoper": 41, "qsplit": 41, "q_config": [42, 253, 535], "static": [42, 46, 150, 156, 167, 178, 254, 314, 330, 517, 535, 564, 568, 571, 576, 577, 578, 579, 582, 588, 600, 603, 606], "quantization_param": 42, "op_types_to_quant": 42, "fallback_list": 42, "fp32": [42, 78, 130, 135, 140, 152, 157, 177, 178, 181, 182, 252, 253, 264, 302, 319, 323, 330, 338, 344, 345, 534, 535, 550, 561, 562, 567, 568, 569, 578, 595, 596, 597, 598, 599, 600, 601, 603, 605, 606], "add_qdq_pair_to_weight": [42, 177, 178, 596], "optypes_to_exclude_output_qu": [42, 177, 178, 596], "dedicated_qdq_pair": [42, 177, 178, 596], "helper": [43, 44, 109, 115, 145, 152, 193, 194, 195, 209, 233, 234, 235, 247, 251, 252, 253, 311, 343, 494], "onnxrt": [43, 193, 195, 202, 210, 233, 235, 242, 248, 264, 302, 343, 403, 404, 419, 421, 428, 481, 535, 569], "dtype_to_nam": 43, "dtype_map": 43, "dtype": [43, 101, 104, 177, 178, 196, 197, 206, 210, 236, 237, 245, 248, 253, 254, 553, 559, 561, 571, 595, 596, 600, 601, 602, 605], "its": [43, 59, 95, 147, 167, 170, 178, 189, 195, 210, 229, 235, 248, 251, 258, 259, 289, 296, 297, 318, 529, 550, 553, 555, 566, 567, 569, 579, 581, 585, 588, 589, 592, 593, 599, 602, 603], "represent": [43, 365, 366, 368, 371, 375, 376, 379, 380, 382, 384, 385, 511, 529, 531, 556, 593, 596], "quanttyp": 43, "repres": [43, 169, 170, 171, 173, 195, 200, 235, 240, 260, 262, 264, 298, 300, 302, 367, 369, 370, 372, 374, 377, 378, 381, 383, 498, 529, 553, 559, 596, 603], "make_quant_nod": 43, "make": [43, 104, 140, 157, 169, 170, 172, 191, 231, 287, 289, 291, 345, 529, 530, 535, 550, 551, 552, 561, 567, 568, 576, 581, 585, 588, 596, 597, 599, 600, 603], "quantizelinear": [43, 559], "make_dquant_nod": 43, "axi": [43, 178], "dequantizelinear": [43, 559], "is_b_transpos": 43, "wheter": 43, "inuput": 43, "b": [43, 73, 193, 233, 253, 553, 567, 593, 600, 603], "transpos": [43, 72, 169, 210, 248, 252, 287, 602], "split_shared_bia": 43, "share": [43, 81, 97, 108, 560, 561, 600, 603], "float_to_float16": 43, "float16": [43, 553], "float_to_bfloat16": 43, "bfloat16": [43, 569, 571, 579, 597], "cast_tensor": 43, "tensorproto": [43, 104], "remove_init_from_model_input": 43, "collate_pr": 43, "result": [43, 145, 147, 152, 206, 210, 245, 248, 257, 260, 261, 262, 264, 295, 298, 299, 300, 302, 314, 321, 344, 348, 366, 380, 398, 529, 532, 534, 550, 552, 555, 557, 564, 566, 567, 568, 576, 577, 588, 589, 590, 593, 594, 596, 599, 600, 601, 602, 603, 604, 606], "quantize_data_with_scale_zero": 43, "qtype": [43, 535], "scheme": [43, 152, 517, 535, 552, 561, 579, 603, 605], "zero_point": [43, 253], "point": [43, 206, 245, 261, 262, 271, 299, 300, 318, 567, 588, 596, 600, 602, 603], "To": [43, 260, 298, 313, 530, 550, 553, 557, 559, 569, 572, 575, 581, 583, 585, 586, 595, 597, 598, 600, 603, 605], "pack": [43, 60], "weight": [43, 59, 60, 121, 140, 147, 150, 157, 163, 168, 169, 170, 171, 177, 178, 253, 287, 289, 321, 330, 345, 405, 535, 550, 556, 559, 561, 563, 567, 568, 590, 593, 595, 596, 600, 601, 603, 605], "comput": [43, 104, 147, 152, 257, 258, 261, 262, 264, 295, 296, 299, 300, 302, 345, 534, 556, 559, 567, 568, 569, 571, 582, 593, 594, 596, 600, 603], "linear": [43, 156, 165, 167, 168, 169, 173, 178, 253, 287, 531, 555, 559, 568, 593, 600, 603], "when": [43, 52, 63, 69, 145, 168, 170, 173, 177, 178, 193, 194, 202, 210, 233, 234, 242, 248, 258, 288, 289, 296, 314, 335, 500, 517, 529, 532, 550, 552, 553, 568, 579, 581, 582, 585, 589, 593, 596, 600, 602, 603], "uint8": [43, 206, 245, 260, 298, 332, 535, 553, 561, 595, 596, 602, 605], "rmin": [43, 596], "rmax": [43, 596], "2": [43, 52, 73, 104, 108, 150, 154, 156, 158, 169, 170, 178, 194, 211, 234, 260, 262, 264, 289, 298, 300, 302, 313, 318, 333, 531, 535, 553, 555, 561, 562, 564, 565, 566, 567, 569, 590, 592, 593, 596, 598, 599, 600, 602, 603, 604], "m": [43, 147, 169, 178, 287, 555, 565, 571, 573, 576, 579, 583, 586, 606], "where": [43, 178, 260, 264, 298, 302, 555, 581, 585, 589, 593, 600, 601], "max": [43, 103, 140, 157, 177, 178, 210, 248, 261, 262, 299, 300, 318, 345, 534, 550, 565, 568, 593, 596, 600, 602, 603], "ab": [43, 163, 170, 289, 596, 600], "np": [43, 210, 248, 318, 557, 602], "sym": [43, 561, 596, 605], "asym": [43, 561, 605], "calculate_scale_zp": 43, "quantize_rang": 43, "calcul": [43, 59, 152, 163, 173, 178, 196, 197, 236, 237, 261, 262, 287, 289, 299, 300, 323, 336, 553, 567, 568, 579, 590, 593, 596, 599, 600, 603, 605], "quantize_data": 43, "add": [43, 51, 63, 108, 118, 145, 173, 177, 178, 193, 195, 217, 233, 235, 288, 330, 358, 398, 500, 530, 531, 550, 552, 553, 557, 559, 561, 567, 568, 569, 583, 586, 599, 601, 603], "necessari": [43, 529, 532, 570, 589, 599, 603], "intermedi": [43, 147, 160, 178, 212, 531, 564, 593, 596], "trasnform": 43, "full": [43, 193, 194, 195, 233, 234, 235, 345, 534, 550, 553, 560, 562, 565, 566, 589, 593], "equat": [43, 262, 264, 300, 302, 596, 600], "r": [43, 140, 157, 550, 565, 589, 592, 596, 606], "": [43, 104, 140, 145, 157, 167, 168, 169, 170, 174, 175, 178, 192, 195, 209, 210, 211, 213, 215, 222, 232, 235, 247, 248, 262, 287, 289, 300, 302, 303, 307, 314, 345, 486, 529, 532, 555, 557, 561, 564, 568, 569, 576, 579, 581, 585, 588, 591, 592, 593, 594, 595, 596, 598, 599, 600, 603, 605], "q": [43, 106, 108, 130, 600], "z": [43, 555, 600], "real": [43, 196, 213, 236, 557, 594, 596], "origin": [43, 150, 152, 167, 170, 173, 178, 193, 210, 211, 233, 248, 273, 274, 276, 277, 278, 288, 289, 319, 332, 345, 348, 530, 553, 576, 593, 596, 602, 603, 605], "quantize_data_per_channel": 43, "per": [43, 150, 156, 158, 178, 211, 340, 535, 550, 592, 597, 606], "channel": [43, 140, 150, 156, 157, 165, 168, 169, 178, 206, 210, 245, 248, 287, 535, 564, 565, 571, 573, 578, 593, 602, 606], "dequantize_data_with_scale_zero": 43, "tensor_valu": 43, "scale_valu": 43, "zo_valu": 43, "dequant": [43, 56, 87, 90, 91, 92, 93, 95, 147, 152, 345, 531, 600, 601], "sacal": 43, "dequantize_data": 43, "valueinfo": 43, "tensor_nam": [43, 145], "new_dtyp": 43, "cast": [43, 56, 559, 597, 602], "info": [43, 150, 152, 169, 173, 208, 213, 218, 253, 287, 307, 342, 345, 488, 500, 516, 531, 550, 559, 570], "quantizedvalu": 43, "new_quantized_nam": 43, "scale_nam": 43, "zero_point_nam": 43, "quantized_value_typ": 43, "quint8": 43, "linearli": 43, "intial": 43, "quantizediniti": 43, "quantized_data": 43, "quantizationmod": 43, "quantizedvaluetyp": 43, "quantformat": [43, 253], "quantize_nparrai": 43, "arr": [43, 345], "low": [43, 181, 182, 196, 197, 236, 237, 255, 265, 292, 303, 535, 551, 553, 557, 568, 569, 594, 596, 600, 603], "high": [43, 196, 197, 236, 237, 553, 565, 594, 603], "numpi": [43, 66, 67, 69, 104, 145, 210, 248, 254, 260, 271, 298, 560, 602], "attribute_to_kwarg": 43, "attribut": [43, 82, 103, 104, 152, 167, 175, 416, 417, 421, 481, 535, 552, 561, 563, 568, 595, 605], "kwarg": [43, 104, 121, 122, 123, 124, 125, 126, 127, 128, 131, 132, 134, 136, 165, 178, 195, 208, 210, 215, 218, 235, 248, 302, 303, 304, 306, 308, 310, 311, 312, 314, 329, 331, 333, 335, 341, 342, 344, 345, 350, 352, 354, 355, 356, 357, 367, 369, 370, 372, 374, 377, 378, 383, 552], "make_nod": 43, "find_by_nam": 43, "item_list": 43, "find": [43, 66, 67, 69, 104, 145, 264, 271, 302, 318, 345, 516, 535, 550, 574, 581, 585, 588, 589, 593, 599, 601, 603], "item": [43, 173, 175, 178, 209, 247, 288, 330, 398, 486, 557, 600, 603], "get_smooth_scales_per_op": 43, "max_vals_per_channel": 43, "input_tensors_2_weight": 43, "input_tensors_2_weights_nod": 43, "alpha": [43, 156, 163, 171, 596], "same": [43, 82, 145, 168, 170, 178, 193, 210, 233, 248, 260, 298, 345, 535, 551, 552, 553, 555, 557, 561, 568, 572, 576, 581, 585, 592, 593, 595, 596, 600, 601, 602, 603], "one": [43, 108, 109, 114, 152, 168, 169, 170, 172, 210, 220, 248, 257, 260, 264, 266, 287, 290, 291, 295, 298, 302, 532, 535, 550, 555, 556, 557, 561, 562, 564, 565, 567, 568, 569, 571, 572, 576, 577, 579, 581, 582, 585, 588, 589, 590, 591, 593, 595, 596, 598, 600, 602, 603], "mul": [43, 53, 64, 65, 68, 156, 559, 600], "todo": [43, 193, 196, 233, 236, 260, 298, 330], "individu": [43, 169, 287, 529, 600], "save": [43, 104, 173, 178, 195, 222, 235, 252, 253, 293, 311, 314, 335, 336, 341, 345, 531, 535, 552, 563, 568, 569, 570, 572, 576, 581, 585, 591, 593, 596, 600], "paper": [43, 555, 593, 600], "onli": [43, 52, 62, 69, 85, 108, 114, 140, 150, 156, 157, 158, 168, 169, 170, 177, 178, 193, 211, 213, 217, 233, 266, 287, 289, 314, 324, 333, 500, 512, 534, 535, 551, 552, 555, 557, 559, 561, 568, 569, 576, 589, 593, 594, 595, 596, 600, 601, 603, 605], "get_smooth_scales_per_input": 43, "insert_smooth_mul_op_per_input": 43, "shape_info": 43, "insert": [43, 76, 104, 106, 108, 112, 143, 150, 156, 253, 531, 564, 568, 571, 593, 596, 597, 600, 601], "inupt": 43, "shape": [43, 104, 145, 169, 196, 197, 206, 210, 236, 237, 245, 248, 260, 298, 421, 428, 432, 443, 481, 534, 550, 553, 561, 562, 568, 600, 602], "ad": [43, 170, 193, 233, 257, 295, 318, 550, 569, 571, 576, 579, 583, 586, 593, 601], "new_init_tensor": 43, "new_added_mul_nod": 43, "adjust_weights_per_op": 43, "adjust": [43, 579, 596, 600], "ha": [43, 66, 67, 69, 73, 169, 170, 211, 257, 287, 289, 295, 333, 530, 532, 535, 550, 552, 559, 564, 568, 569, 574, 588, 595, 596, 597, 599, 600, 603], "whose": [43, 150, 156, 169, 288, 563, 593, 600, 603], "adjustd": 43, "adjust_weights_per_input": 43, "insert_smooth_mul_op_per_op": 43, "befor": [43, 106, 108, 156, 169, 170, 172, 178, 193, 233, 253, 287, 289, 291, 386, 530, 550, 553, 555, 556, 557, 560, 561, 565, 568, 583, 586, 593, 596, 599, 601, 603], "name_2_nod": 43, "kei": [43, 145, 147, 150, 167, 173, 175, 178, 271, 288, 311, 333, 336, 338, 345, 508, 534, 550, 559, 594, 601, 603], "trt_env_setup": 43, "environ": [43, 158, 211, 294, 448, 480, 481, 489, 529, 550, 551, 581, 585, 588, 603], "variabl": [43, 158, 171, 178, 195, 211, 235, 318, 550, 565, 593, 603], "tensorrt": [43, 596], "provid": [43, 101, 104, 109, 167, 181, 182, 210, 248, 255, 260, 279, 284, 292, 293, 298, 303, 314, 335, 339, 341, 409, 485, 494, 532, 534, 535, 550, 551, 552, 556, 557, 558, 559, 564, 565, 568, 569, 570, 571, 575, 579, 582, 588, 589, 593, 595, 596, 601, 603, 604, 605, 606], "get_ops_recurs": 44, "prefix": [44, 145, 146, 151, 571, 576, 601], "graph_info": 44, "templateadaptor": 44, "tampl": 44, "dictionari": [44, 66, 67, 69, 146, 147, 152, 175, 178, 209, 247, 260, 267, 270, 272, 298, 367, 369, 370, 372, 374, 377, 378, 383, 387, 388, 390], "yaml": [44, 173, 175, 181, 182, 193, 195, 211, 233, 235, 249, 255, 266, 267, 268, 270, 279, 284, 292, 293, 303, 344, 345, 353, 359, 360, 444, 500, 511, 535, 563, 567, 568, 590, 593, 595, 601, 602], "file": [44, 104, 145, 150, 155, 173, 174, 178, 181, 182, 193, 194, 195, 198, 209, 210, 216, 219, 233, 234, 235, 238, 247, 248, 249, 253, 255, 260, 266, 267, 268, 270, 279, 284, 288, 290, 292, 293, 298, 303, 313, 314, 344, 345, 353, 409, 455, 459, 469, 492, 500, 517, 532, 535, 550, 557, 560, 563, 566, 567, 568, 570, 574, 583, 586, 587, 588, 589, 590, 593, 595, 596, 601, 602], "pytorchadaptor": 44, "api": [44, 69, 74, 109, 221, 255, 260, 292, 298, 314, 329, 330, 333, 345, 386, 387, 388, 389, 390, 391, 393, 394, 395, 396, 516, 517, 530, 531, 536, 538, 542, 545, 548, 559, 564, 568, 573, 577, 578, 579, 598, 599, 603, 607], "pytorch_ipexadaptor": 44, "intel": [44, 169, 214, 217, 250, 256, 263, 264, 287, 290, 294, 301, 302, 322, 328, 480, 527, 529, 530, 532, 533, 535, 552, 553, 554, 555, 556, 558, 559, 561, 562, 566, 569, 570, 571, 576, 578, 579, 590, 591, 592, 593, 594, 596, 597, 598, 601, 603, 604, 605], "extens": [44, 500, 532, 534, 535, 561, 564, 565, 568, 569, 570, 572, 577, 578, 579, 583, 586, 587, 593, 594, 603, 604, 605], "ipex": [44, 152, 177, 178, 564, 568, 573, 577, 578, 606], "pytorch_fxadaptor": 44, "fx": [44, 152, 177, 314, 324, 564, 577, 578, 594, 596, 597, 606], "graph": [44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 116, 129, 131, 135, 138, 139, 140, 142, 143, 144, 145, 167, 192, 232, 253, 255, 294, 304, 311, 421, 443, 454, 455, 460, 461, 479, 481, 504, 516, 531, 535, 553, 555, 557, 563, 567, 570, 571, 596, 597, 601], "pytorchqueri": 44, "querybackendcap": [45, 535], "tensorflowadaptor": 46, "stock": [46, 577], "spr": 46, "tensorflow_itexadaptor": 46, "itex": [46, 108, 177, 178, 252, 596], "tensorflowqueri": [46, 535], "performance_onli": [46, 47, 48, 106, 130, 135, 144, 177, 568], "itex_mod": [46, 47, 88, 106, 130, 135], "quant_mod": [46, 330], "graphconvert": 47, "qt_config": 47, "recip": [47, 167, 177, 178, 253, 255, 292, 559, 568, 603], "int8_sequ": 47, "fp32_op": [47, 49, 106], "bf16_op": [47, 49, 106, 597], "data_load": [47, 48, 535], "fake_qu": [47, 87, 106, 130, 135], "qdq_enabl": 47, "new_api": [47, 48, 70, 71, 76, 78, 91, 98, 130, 135, 140], "use_bf16": [47, 48, 177, 595], "without": [48, 89, 145, 170, 210, 248, 289, 332, 500, 529, 550, 552, 555, 557, 567, 568, 579, 593, 594, 595, 603, 604], "graphconverterwithoutcalib": 48, "recover_config": 48, "rewrit": [49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 105, 106, 107, 108, 222], "bf16convert": [49, 597], "biasadd": [51, 58, 63, 65, 108, 561], "convertaddtobiasaddoptim": 51, "conv2d": [51, 58, 59, 60, 64, 65, 70, 124, 134, 140, 561, 600, 601, 603], "addv2": [51, 68, 561], "layout": 52, "convertlayoutoptim": 52, "optim": [52, 73, 74, 78, 79, 115, 117, 167, 170, 174, 178, 214, 220, 222, 255, 256, 272, 292, 294, 318, 335, 336, 348, 373, 387, 388, 394, 397, 398, 400, 401, 402, 403, 404, 407, 408, 421, 481, 482, 492, 498, 504, 508, 515, 520, 532, 534, 551, 555, 556, 557, 561, 562, 564, 565, 568, 570, 571, 573, 575, 576, 579, 582, 592, 593, 594, 595, 596, 597, 599, 600, 601, 603, 605], "nchw": 52, "nhwc": 52, "It": [52, 169, 181, 182, 219, 262, 264, 271, 287, 292, 300, 302, 303, 314, 319, 323, 335, 535, 550, 555, 568, 574, 577, 582, 588, 589, 593, 596, 599, 603, 605], "4": [52, 158, 169, 178, 202, 205, 206, 210, 242, 245, 248, 257, 258, 260, 295, 296, 298, 333, 529, 535, 550, 551, 557, 558, 561, 564, 565, 567, 568, 576, 592, 593, 600, 602, 603, 606], "abov": [52, 535, 555, 593, 596, 600], "graph_def": [52, 145, 252, 303, 311, 314, 443, 479], "leakyrelu": [53, 600], "convertleakyreluoptim": 53, "below": [53, 65, 73, 177, 178, 293, 530, 531, 534, 535, 550, 552, 555, 557, 563, 567, 571, 573, 581, 582, 585, 588, 590, 591, 593, 595, 596, 599, 600, 601, 603, 604], "subgraph": [53, 65, 104, 151, 559], "maximum": [53, 169, 170, 178, 193, 210, 233, 248, 258, 289, 296, 318, 553, 568, 593, 596, 602], "note": [53, 169, 260, 298, 324, 532, 550, 557, 559, 561, 565, 568, 573, 576, 581, 585, 588, 593, 596, 600, 601, 603, 604, 605], "coeffici": [53, 593], "less": [53, 145, 178, 345, 551, 555, 568, 593], "than": [53, 145, 193, 210, 233, 248, 345, 532, 534, 551, 553, 563, 567, 590, 591, 593, 596, 599, 602], "convers": [53, 178, 266, 535, 568, 569, 596, 597, 600], "valid": [53, 66, 67, 104, 170, 173, 177, 178, 195, 235, 260, 288, 289, 298, 311, 448, 500, 517, 530, 532, 534, 535, 553, 555, 558, 561, 564, 566, 568, 579, 593, 596, 598], "nan": 54, "random": [54, 145, 178, 206, 210, 245, 248, 272, 294, 318, 322, 345, 530, 532, 568, 595, 602, 605], "convertnantorandom": 54, "const": [54, 55, 62, 63, 66, 67, 69, 81, 97, 294, 399, 481, 489], "consist": [54, 62, 530, 531, 550, 559, 600, 603], "placehold": [55, 191, 231], "convertplaceholdertoconst": 55, "train": [55, 79, 150, 156, 159, 168, 170, 178, 181, 182, 193, 195, 210, 220, 233, 235, 248, 249, 266, 289, 294, 314, 338, 508, 532, 534, 535, 540, 553, 555, 556, 559, 564, 569, 571, 577, 588, 591, 593, 594, 599, 600, 603, 605], "rerewrit": 56, "dequantizecastoptim": 56, "b16": 56, "dilat": 57, "contract": 57, "dilatedcontract": 57, "spacetobatchnd": 57, "batchtospacend": 57, "pattern": [57, 58, 60, 77, 95, 106, 107, 108, 130, 135, 152, 162, 164, 167, 168, 170, 171, 174, 178, 195, 235, 256, 277, 278, 280, 285, 289, 294, 330, 405, 516, 535, 553, 561, 564, 568, 589, 591, 595, 600, 606], "inject": [58, 568], "dummi": [58, 167, 196, 197, 236, 237, 254, 264, 302, 534, 550, 553, 562, 567, 568], "injectdummybiasaddoptim": 58, "fusion": [58, 60, 69, 77, 108, 125, 126, 127, 130, 131, 132, 136, 531, 535, 561], "expanddim": 59, "expanddimsoptim": 59, "next": [59, 186, 226, 333, 532, 550, 595, 603], "featch": 60, "reshap": [60, 66, 67, 72, 600], "fetchweightfromreshapeoptim": 60, "handl": [60, 145, 150, 156, 342, 517, 531, 533, 552, 600], "fold": [61, 62, 253, 561], "batchnorm": [61, 66, 120, 531, 600], "foldbatchnormnodesoptim": 61, "graphfoldconstantoptim": 62, "sequenc": [62, 104, 168, 169, 178, 193, 209, 210, 233, 247, 248, 258, 262, 287, 296, 300, 535, 553, 561, 593, 602], "self": [62, 167, 178, 313, 535, 550, 552, 553, 564, 567, 599, 601, 603], "supported_op_typ": 62, "fusebiasaddandaddoptim": 63, "second": [63, 168, 177, 178, 193, 233, 319, 345, 409, 550, 568, 581, 585, 589, 600, 603, 605], "columnwis": 64, "fusecolumnwisemuloptim": 64, "depthwiseconv2dn": [64, 70, 124, 134, 561], "math": [65, 596], "fuseconvwithmathoptim": 65, "elimin": 65, "sub": [65, 167, 211, 253, 532, 600, 603], "realdiv": [65, 68], "decompos": [66, 67], "fusedecomposedbnoptim": 66, "input_graph_def": [66, 67, 69], "node_name_from_input": [66, 67, 69], "node_nam": [66, 67, 69, 145, 253, 311], "strip": [66, 67, 69, 82, 83, 145, 601], "port": [66, 67, 69, 517, 550], "other": [66, 67, 69, 150, 156, 192, 232, 262, 300, 311, 517, 529, 530, 531, 550, 561, 564, 565, 566, 568, 570, 590, 592, 593, 596, 600, 602, 603, 606], "underli": [66, 67, 69], "node_from_map": [66, 67, 69], "node_map": [66, 67, 69], "pull": [66, 67, 69], "def": [66, 67, 69, 181, 182, 314, 333, 335, 531, 535, 552, 553, 555, 556, 557, 567, 568, 596, 600, 601, 603], "entri": [66, 67, 69, 147, 217, 255, 293, 406, 409, 500, 566], "index": [66, 67, 69, 104, 178, 186, 191, 195, 226, 231, 235, 271, 345, 517, 553, 567, 589, 600], "everi": [66, 67, 69, 169, 170, 178, 287, 289, 535, 576, 581, 585, 593, 603], "identifi": [66, 67, 69, 260, 298, 311], "want": [66, 67, 69, 167, 177, 178, 191, 193, 231, 233, 289, 319, 335, 531, 535, 550, 553, 557, 565, 567, 568, 569, 576, 588, 589, 590, 599, 601, 603], "nodedef": [66, 67, 69], "rais": [66, 67, 69, 104, 169, 170, 173, 260, 287, 288, 289, 298, 303, 333, 500, 534, 593, 594], "valueerror": [66, 67, 69, 260, 298, 333, 560], "If": [66, 67, 69, 73, 158, 177, 178, 181, 182, 195, 210, 235, 248, 288, 303, 314, 333, 335, 530, 531, 550, 551, 553, 557, 559, 565, 566, 567, 568, 569, 574, 582, 583, 586, 588, 590, 596, 599, 600, 601, 602, 603], "isn": [66, 67, 69], "present": [66, 67, 69, 550, 594, 600], "values_from_const": [66, 67, 69], "node_def": [66, 67, 69], "extract": [66, 67, 69, 167, 195, 235, 332, 500, 553], "access": [66, 67, 69, 175, 341, 345, 484, 500, 517, 550, 583, 586], "valid_reshape_input": [66, 67], "reshape_in0_ndef": [66, 67], "reshape_in1_ndef": [66, 67], "ar": [66, 67, 104, 169, 170, 178, 193, 210, 233, 248, 260, 264, 271, 287, 288, 289, 293, 298, 302, 315, 317, 318, 333, 338, 344, 345, 500, 529, 530, 531, 532, 534, 535, 550, 552, 553, 555, 556, 557, 558, 559, 561, 562, 563, 564, 565, 566, 567, 568, 569, 571, 574, 576, 579, 582, 588, 590, 591, 592, 593, 594, 596, 597, 598, 599, 600, 601, 602, 603, 605], "bypass_reshap": [66, 67], "input_node_map": [66, 67], "input_nam": [66, 67, 101, 139, 178, 252, 253, 559], "get_const_dim_count": [66, 67], "dimens": [66, 67, 104, 185, 210, 225, 248, 553, 555, 593, 602], "instancenorm": [67, 600], "fusedecomposedinoptim": 67, "gelu": 68, "fusegeluoptim": 68, "sqrt": 68, "erf": 68, "samll": 69, "layernorm": [69, 600], "fuselayernormoptim": 69, "remap": 69, "smaller": [69, 210, 248, 555, 568, 593, 602], "case": [69, 73, 158, 178, 192, 209, 210, 211, 232, 247, 248, 255, 279, 284, 292, 313, 500, 550, 552, 555, 556, 557, 561, 563, 567, 572, 576, 588, 589, 590, 593, 594, 596, 598, 602, 604, 605, 606], "fusedbatcnormv3": 69, "And": [69, 531, 551, 568, 574, 600], "further": [69, 178, 529, 569, 570, 571, 573, 582, 588], "restrict": [69, 178, 593, 599], "2d": [69, 600], "3d": [69, 594, 600], "kera": [69, 115, 195, 202, 217, 235, 242, 306, 311, 421, 428, 438, 557, 570, 578, 579, 606], "fusepadwithconv2doptim": 70, "excluded_op_nam": [70, 71, 174, 178, 568, 593], "cfg": [70, 71, 152, 174, 330, 338], "itex_qdq_mod": [70, 71], "conv3d": [70, 124], "fusepadwithfp32conv2doptim": 71, "fusetransposereshapeoptim": 72, "cse": [73, 97], "graphcseoptim": 73, "introduc": [73, 530, 535, 559, 561, 568, 593, 596, 598, 600, 604], "ident": [73, 79, 168, 529, 555], "three": [73, 173, 193, 233, 315, 317, 531, 535, 550, 552, 559, 565, 569, 582, 591, 596, 597, 599, 600, 601], "d": [73, 555, 563, 589, 606], "those": [73, 323, 345, 555, 556, 563, 568, 591, 593, 596, 603], "child": [73, 601], "b1": 73, "c1c2": 73, "d1": [73, 345], "c1": 73, "c2": 73, "memori": [73, 255, 279, 284, 292, 313, 345, 552, 556, 568, 569, 571, 590, 593, 596, 600, 603], "bound": [73, 210, 248, 260, 298, 318, 567, 602], "like": [73, 95, 97, 145, 167, 173, 178, 181, 182, 183, 195, 223, 235, 255, 264, 289, 292, 293, 302, 311, 314, 335, 530, 531, 532, 535, 550, 555, 556, 564, 576, 591, 593, 596, 598, 600, 603], "relu": [73, 77, 108, 531, 561, 600, 601], "relu6": [73, 561], "graphdef": [73, 145, 311, 570], "grappler": [74, 561], "grappleroptim": 74, "input_output_nam": 74, "opt_cfg": 74, "wrapper": [74, 101, 102, 103, 104, 121, 146, 160, 192, 210, 212, 213, 215, 216, 222, 232, 248, 260, 264, 298, 302, 307, 311, 517, 597], "leverag": [74, 532, 534, 555, 559, 571, 588, 591, 596, 603], "built": [74, 179, 180, 184, 189, 193, 194, 199, 201, 203, 204, 206, 207, 210, 215, 217, 224, 227, 229, 233, 234, 239, 241, 243, 244, 245, 246, 248, 293, 302, 305, 313, 314, 335, 532, 535, 553, 557, 568, 581, 585, 590, 596, 602, 603, 605], "convert_add_to_biasadd": [75, 86, 110], "convert_layout": [75, 86, 110], "convert_leakyrelu": [75, 86, 110], "convert_nan_to_random": [75, 86, 110], "convert_placeholder_to_const": [75, 86, 110], "dequantize_cast_optim": [75, 86, 110], "dilated_contract": [75, 86, 110], "dummy_biasadd": [75, 86, 110], "expanddims_optim": [75, 86, 110], "fetch_weight_from_reshap": [75, 86, 110], "fold_batch_norm": [75, 86, 110], "fold_const": [75, 86, 110], "fuse_biasadd_add": [75, 86, 110], "fuse_column_wise_mul": [75, 86, 110], "fuse_conv_with_math": [75, 86, 110], "fuse_decomposed_bn": [75, 86, 110], "fuse_decomposed_in": [75, 86, 110], "fuse_gelu": [75, 86, 110], "fuse_layer_norm": [75, 86, 110], "fuse_pad_with_conv": [75, 86, 110], "fuse_pad_with_fp32_conv": [75, 86, 110], "fuse_reshape_transpos": [75, 86, 110], "graph_cse_optim": [75, 86, 110], "grappler_pass": [75, 86, 110], "insert_print_nod": [75, 86, 110], "move_squeeze_after_relu": [75, 86, 110], "pre_optim": [75, 86, 110], "remove_training_nod": [75, 86, 110], "rename_batch_norm": [75, 86, 110], "split_shared_input": [75, 86, 110], "strip_equivalent_nod": [75, 86, 110, 145], "strip_unused_nod": [75, 86, 110, 145], "switch_optim": [75, 86, 110], "print": [76, 147, 167, 264, 302, 333, 550, 557, 567, 568, 593, 600, 603], "insertprintminmaxnod": 76, "pre_node_nam": 76, "post_node_nam": 76, "pass": [76, 145, 158, 345, 443, 512, 531, 535, 551, 553, 555, 556, 557, 559, 563, 567, 568, 589, 593, 595, 596, 597, 600, 605], "sampl": [76, 177, 178, 186, 191, 193, 194, 195, 206, 210, 226, 231, 233, 234, 235, 245, 248, 264, 271, 302, 318, 432, 532, 534, 553, 558, 564, 589, 596, 602, 603, 605, 606], "move": [77, 531, 595, 598], "squeez": [77, 531], "movesqueezeafterreluoptim": 77, "match": [77, 101, 167, 260, 261, 298, 299, 555, 589], "pre": [78, 115, 167, 181, 182, 193, 233, 303, 314, 335, 553, 555, 556, 568, 569, 576, 593, 594, 596, 601, 603], "entranc": [78, 184], "preoptim": 78, "removetrainingnodesoptim": 79, "protected_nod": 79, "types_to_splic": 79, "checknumer": 79, "stopgradi": 79, "renam": [80, 598], "fusedbatchnorm": 80, "fusedbatchnormv2": 80, "renamebatchnormoptim": 80, "splitsharedinputoptim": 81, "equival": [82, 600], "stripequivalentnodesoptim": 82, "output_node_nam": [82, 83, 130, 131, 135, 145], "unus": [83, 145], "stripunusednodesoptim": 83, "input_node_nam": [83, 130, 135, 145], "switch": [84, 571, 601], "switchoptim": 84, "condit": [84, 193, 194, 195, 210, 233, 234, 235, 248, 315, 317, 553, 566, 602, 603], "graphrewriterbas": 85, "abstract": [85, 159, 210, 248, 249, 255, 292, 429, 441, 492, 516, 535, 563], "freeze_fake_qu": [86, 94, 110], "freeze_valu": [86, 94, 110], "freeze_value_without_calib": [86, 94, 110], "fuse_conv_redundant_dequant": [86, 94, 110], "fuse_conv_requant": [86, 94, 110], "fuse_matmul_redundant_dequant": [86, 94, 110], "fuse_matmul_requant": [86, 94, 110], "meta_op_optim": [86, 94, 110], "post_hostconst_convert": [86, 94, 110], "post_quantized_op_cs": [86, 94, 110], "rnn_convert": [86, 94, 110], "scale_propag": [86, 94, 110], "onnx_graph": [86, 100, 110], "onnx_schema": [86, 100, 110], "tf2onnx_util": [86, 100, 110], "insert_qdq_pattern": [86, 105, 110], "merge_duplicated_qdq": [86, 105, 110], "share_qdq_y_pattern": [86, 105, 110], "freez": [87, 88, 89, 571, 593], "fakequ": 87, "freezefakequantopoptim": 87, "follow": [87, 109, 168, 195, 235, 257, 260, 295, 298, 529, 530, 531, 532, 535, 550, 552, 553, 555, 556, 557, 559, 561, 565, 566, 567, 568, 569, 570, 571, 572, 573, 581, 585, 591, 593, 595, 596, 600, 601, 603], "freezevaluetransform": 88, "max_min_data": [88, 89], "postfix": [88, 89], "tensor_data": [88, 345], "th": [88, 89], "gpu": [88, 89, 96, 177, 178, 534, 551, 564, 568, 569, 573, 579, 588, 595, 596], "freezevaluewithoutcalibtransform": 89, "95": [89, 264, 302, 567, 600, 606], "quantizedconv": [90, 91], "quantizeddeconv": 90, "redund": [90, 92], "fuseconvredundantdequantizetransform": 90, "cpu": [90, 91, 92, 93, 177, 178, 345, 534, 551, 564, 568, 569, 571, 573, 579, 588, 592, 594, 595, 597, 601], "_quantizedconv": 90, "_quantizeddeconv": 90, "successor": [90, 91, 92, 93], "requant": [91, 93, 601], "fuseconvrequantizetransform": 91, "quantizedmatmul": [92, 93], "fusematmulredundantdequantizetransform": 92, "_quantizedmatmul": [92, 93], "fusematmulrequantizedequantizetransform": 93, "quantizedmatmulwithbiasanddequant": 93, "fusematmulrequantizetransform": 93, "fusematmulrequantizedequantizenewapitransform": 93, "fusematmulrequantizenewapitransform": 93, "newapi": 93, "meta": [95, 594], "metainfochangingmemopoptim": 95, "metaop": 95, "With": [95, 313, 531, 534, 535, 552, 568, 576, 581, 585, 589, 590, 593, 594, 599, 600, 603, 606], "chang": [95, 140, 150, 157, 170, 172, 178, 289, 291, 321, 345, 360, 469, 491, 530, 552, 557, 560, 566, 567, 568, 571, 581, 582, 585, 588, 593, 601, 602, 603], "better": [95, 178, 181, 182, 271, 303, 314, 335, 556, 567, 569, 593, 594, 596, 599, 603], "perform": [95, 158, 171, 177, 178, 193, 205, 206, 211, 233, 245, 255, 279, 284, 292, 313, 319, 323, 492, 503, 531, 532, 535, 550, 551, 552, 553, 554, 556, 558, 559, 564, 565, 567, 568, 569, 570, 571, 573, 577, 579, 582, 588, 590, 591, 592, 593, 594, 595, 596, 597, 600, 601, 603, 605, 606], "post": [96, 97, 150, 156, 170, 178, 181, 182, 253, 314, 529, 534, 535, 556, 557, 564, 565, 571, 577, 588, 593, 594, 600, 601, 603], "hostconst": 96, "posthostconstconvert": 96, "postcseoptim": 97, "duplic": [97, 107, 318], "quantizev2": 97, "decreas": [97, 593], "size": [97, 169, 185, 186, 192, 195, 201, 206, 210, 225, 226, 232, 235, 241, 245, 248, 287, 313, 345, 500, 529, 550, 552, 553, 557, 560, 568, 588, 589, 590, 593, 600, 602, 605, 606], "rnn": 98, "quantizedrnnconvert": 98, "calibration_data": [98, 106], "rnn_detail": 98, "scalepropagationtransform": 99, "direct": [99, 169, 287, 450, 593], "export": [100, 178, 256, 260, 294, 298, 500, 534, 562, 574, 589, 601, 604], "onnxgraph": 101, "output_shap": 101, "opset": [101, 103, 104, 178, 252, 253], "extra_opset": 101, "output_nam": [101, 139, 178, 252, 253, 559], "is_subgraph": 101, "graph_nam": 101, "manipul": [101, 102], "onnxnod": 102, "skip_convers": 102, "schema": 103, "onnxopschema": 103, "domain": [103, 104, 177, 178, 373, 397, 421, 428, 481, 482, 484, 500, 512, 517, 550, 593, 603], "since_vers": 103, "get_schema": 103, "max_inclusive_opset_vers": 103, "within": [103, 170, 255, 260, 292, 298, 311, 529, 531, 569, 581, 585, 588, 594, 600], "get_max_supported_opset_vers": 103, "packag": [103, 353, 361, 367, 369, 370, 372, 373, 374, 377, 378, 381, 383, 392, 397, 402, 403, 407, 410, 416, 418, 421, 422, 428, 447, 449, 454, 457, 460, 461, 463, 466, 472, 477, 481, 515, 535, 550, 560, 565, 588, 589, 594, 598, 603], "set_nam": 104, "find_opset": 104, "assert_error": 104, "bool_val": 104, "error_msg": 104, "error": [104, 147, 264, 302, 323, 342, 484, 567, 572, 600, 603], "messag": [104, 143, 500, 512, 517, 603], "map_numpy_to_onnx_dtyp": 104, "np_dtype": 104, "map_onnx_to_numpy_typ": 104, "onnx_typ": 104, "add_port_to_nam": 104, "nr": 104, "get_tensorflow_node_attr": 104, "pars": [104, 152, 193, 194, 206, 210, 233, 234, 245, 248, 347, 358, 451, 455, 459, 464, 467, 473, 492, 500, 508, 602], "get_tensorflow_tensor_shap": 104, "get_tensorflow_node_shape_attr": 104, "attr": [104, 145, 167], "map_tensorflow_dtyp": 104, "get_tensorflow_tensor_data": 104, "convert_tensorflow_tensor_to_onnx": 104, "read_tensorflow_node_attr": 104, "read": [104, 145, 198, 210, 238, 248, 288, 553, 597, 599], "infer_onnx_shape_dtyp": 104, "opset_vers": [104, 139, 178, 252, 253, 559], "input_shap": [104, 197, 237, 552, 553], "input_dtyp": 104, "sometim": [104, 531, 593, 596], "so": [104, 210, 248, 531, 535, 560, 564, 567, 574, 576, 596, 597, 600, 601, 602, 604], "make_onnx_shap": 104, "seqtyp": 104, "tensor_dtyp": 104, "around": 104, "signifi": 104, "make_onnx_inputs_output": 104, "elem_typ": 104, "text": [104, 209, 210, 247, 248, 257, 262, 290, 295, 300, 559, 566, 577, 593, 594, 600, 602, 606], "datatyp": [104, 152, 597, 603], "save_protobuf": 104, "path": [104, 145, 150, 167, 173, 174, 193, 194, 195, 210, 233, 234, 235, 248, 249, 252, 253, 255, 266, 267, 268, 270, 279, 284, 288, 290, 292, 293, 303, 311, 314, 330, 335, 345, 409, 426, 429, 432, 434, 437, 440, 441, 442, 469, 500, 531, 532, 535, 550, 552, 553, 557, 563, 567, 568, 569, 570, 574, 577, 588, 591, 602, 605], "as_text": 104, "protobuf": 104, "is_onnx_domain": 104, "is_list_or_tupl": 104, "are_shapes_equ": 104, "src": [104, 589], "dest": 104, "equal": [104, 140, 145, 157, 333, 345, 567, 593], "get_subgraphs_from_onnx": 104, "model_proto": 104, "over": [104, 195, 235, 264, 302, 558, 562, 564, 567, 579, 588, 595, 600, 603], "df": 104, "initialize_name_count": 104, "avoid": [104, 193, 233, 531, 601], "conflict": [104, 560], "counter": 104, "make_nam": 104, "get_index_from_strided_slice_of_shap": 104, "outputs_to_valu": 104, "stride": [104, 210, 248, 602], "slice": 104, "compute_const_folding_using_tf": 104, "g": [104, 169, 178, 555, 558, 562, 571, 576, 593, 598, 600, 603], "const_node_valu": 104, "graph_output": 104, "constant": [104, 253, 294, 318, 322, 328, 339, 482, 552, 561, 602], "tf": [104, 115, 145, 192, 193, 194, 195, 210, 232, 233, 234, 235, 248, 309, 311, 348, 550, 557, 570, 594, 597, 602], "generategraphwithqdqpattern": 106, "op_wise_config": [106, 130, 135], "quantized_nod": 106, "dq": [106, 108, 130, 600], "pair": [106, 177, 178, 552, 568, 569], "merg": [107, 185, 225, 330, 583, 586, 601, 603], "mergeduplicatedqdqoptim": 107, "y": [108, 178, 210, 248, 318, 560, 574, 600, 602], "shareqdqforitexypatternoptim": 108, "enabl": [108, 147, 170, 177, 178, 289, 488, 550, 557, 565, 569, 571, 573, 576, 577, 579, 592, 593, 594, 603], "break": [108, 557, 568], "graphanalyz": 109, "extend_engin": 109, "analyz": [109, 167, 311, 593, 599, 600, 601], "under": [109, 178, 195, 235, 344, 532, 550, 553, 566, 567, 568, 571, 576, 577, 588, 591, 593, 600, 601, 603], "singleton": [109, 294, 345, 481, 489], "specifi": [109, 158, 177, 178, 181, 182, 210, 211, 248, 255, 260, 264, 267, 270, 279, 284, 292, 293, 298, 302, 303, 314, 333, 335, 344, 345, 362, 399, 451, 496, 500, 517, 550, 557, 561, 567, 568, 576, 590, 595, 602, 603, 605], "graphrewriterhelp": 109, "encapsul": [109, 181, 182, 303, 314, 335, 570], "quantize_lay": [110, 111, 113], "fake_quant": [110, 111, 113], "quantize_config": [110, 111, 113], "quantize_help": [110, 111, 113], "quantize_wrapp": [110, 111, 113], "fuse_qdq_bn": [110, 111, 129], "fuse_qdq_concatv2": [110, 111, 129], "fuse_qdq_conv": [110, 111, 129], "fuse_qdq_deconv": [110, 111, 129], "fuse_qdq_in": [110, 111, 129], "fuse_qdq_matmul": [110, 111, 129], "fuse_qdq_pool": [110, 111, 129], "optimize_qdq": [110, 111, 129], "optimize_lay": [111, 113, 116], "quantize_layer_add": [111, 113, 116], "quantize_layer_bas": [111, 113, 116], "quantize_layer_bn": [111, 113, 116], "fake": [112, 150, 156, 568, 596, 600], "fakequantizebas": 112, "abc": [112, 262, 300, 535, 601, 603], "appli": [112, 125, 126, 127, 130, 132, 136, 159, 170, 220, 258, 296, 529, 550, 568, 571, 573, 579, 588, 591, 593, 596, 597, 599, 600, 603, 604, 605], "fakequant": 112, "per_channel": [112, 561, 596, 605], "num_bit": [112, 152, 600], "8": [112, 178, 209, 247, 531, 561, 565, 593, 594, 600, 603, 606], "channel_axi": [112, 154, 157], "symmetr": [112, 596, 602, 603], "narrow_rang": 112, "quantizeconfig": [114, 115], "custom": [114, 158, 293, 313, 344, 551, 555, 556, 571, 593, 599], "There": [114, 293, 315, 317, 550, 555, 561, 564, 567, 568, 569, 571, 600, 603, 605], "instanc": [114, 115, 158, 178, 181, 182, 211, 261, 262, 264, 267, 270, 273, 274, 276, 277, 278, 299, 300, 302, 303, 314, 318, 332, 335, 529, 531, 535, 550, 551, 568, 573, 579, 605, 606], "global": [114, 169, 178, 273, 274, 276, 277, 278, 287, 345, 531, 568, 593, 595, 603], "class": [115, 149, 152, 271, 303, 314, 423, 424, 531, 532, 552, 553, 555, 567, 568, 579, 590, 591, 596, 598, 601, 603, 605], "init_quantize_config": 115, "quantize_recip": 115, "begin": [115, 170, 289, 555, 556, 568, 593, 603], "process": [115, 147, 169, 170, 172, 173, 178, 181, 182, 193, 194, 195, 206, 210, 211, 233, 234, 235, 245, 248, 253, 287, 289, 291, 294, 303, 314, 315, 317, 318, 335, 344, 345, 361, 444, 445, 448, 481, 489, 493, 532, 535, 550, 552, 553, 555, 556, 557, 559, 568, 572, 591, 593, 596, 600, 601, 602, 605], "model_nam": [115, 500], "special": [115, 167, 313, 531, 552, 567, 568, 590, 593, 604], "decid": [115, 177, 178, 258, 289, 296, 409, 535, 568, 596, 598, 603], "qat_clone_funct": 115, "leav": [115, 582], "quantizewrapp": [115, 121], "wrapped_lay": 115, "config_quantizable_lay": 117, "quantizelayeradd": 118, "quantizelay": 119, "quantizelayerbas": 119, "quantizelayerbatchnorm": 120, "quantizewrapperbas": 121, "fusedbatchnormv3": [122, 132], "fusenodestartwithfusedbatchnormv3": [122, 132], "_quantizedfusedbatchnorm": 122, "concatv2": [123, 133, 144, 561], "fusenodestartwithconcatv2": [123, 133], "quantizedconcatv2": [123, 133], "fusenodestartwithconv2d": [124, 134], "conv2dbackpropinput": 125, "conv3dbackpropinputv2": 125, "fusenodestartwithdeconv2d": 125, "fusedinstancenorm": 126, "fusenodestartwithfusedinstancenorm": 126, "batchmatmul": 127, "batchmatmulv2": 127, "fusenodestartwithmatmul": [127, 136], "avgpool": [128, 137, 561], "fusenodestartwithpool": [128, 137], "optimizeqdqgraph": 130, "input_graph": [130, 135, 140, 347, 455, 459, 464, 467, 474, 535], "op_wise_sequ": [130, 135], "quantizegraph": 131, "quantizegraphbas": 131, "quantizenodebas": 131, "quantizegraphforintel": 135, "common": [138, 178, 208, 256, 266, 270, 271, 272, 294, 338, 493, 494, 500, 529, 553, 556, 557, 559, 563, 565, 568, 596, 600], "herlper": 138, "quantizegraphhelp": 138, "sever": [138, 172, 210, 248, 291, 532, 550, 555, 556, 564, 568, 569, 581, 585, 593, 595, 600, 602, 603, 605], "staticmethod": 138, "function": [138, 178, 181, 182, 194, 234, 267, 270, 279, 284, 531, 532, 535, 550, 551, 552, 555, 556, 563, 564, 565, 567, 568, 569, 579, 589, 593, 596, 599, 600, 601, 603, 604], "tensorflowqdqtoonnxqdqconvert": 139, "shape_overrid": 139, "inputs_as_nchw": [139, 252], "default_opset_vers": 139, "bia": [140, 177, 178, 253, 601], "correct": [140, 157, 173, 177, 178, 260, 261, 262, 264, 288, 298, 299, 300, 302, 529, 550, 571], "biascorrect": 140, "fp32_graph": 140, "method": [140, 152, 171, 178, 186, 191, 192, 193, 195, 202, 210, 213, 226, 231, 232, 233, 235, 242, 248, 270, 271, 272, 330, 338, 339, 341, 342, 494, 512, 531, 532, 534, 553, 555, 556, 567, 568, 591, 593, 596, 597, 600, 602, 603], "weight_empir": 140, "Will": [140, 555, 564], "our": [140, 150, 178, 532, 534, 559, 568, 589, 593, 599, 604], "task": [140, 193, 200, 233, 240, 264, 302, 553, 555, 556, 559, 564, 567, 568, 593, 600], "close": [140, 157], "w_int8": [140, 157], "u": [140, 157, 534, 571], "w_fp32": [140, 157], "varianc": [140, 157], "ratio": [140, 157, 169, 170, 173, 178, 206, 210, 245, 248, 289, 553, 568, 593, 602, 606], "differ": [140, 153, 157, 160, 168, 177, 178, 186, 195, 210, 212, 226, 235, 248, 255, 264, 270, 272, 281, 292, 302, 313, 340, 529, 531, 532, 550, 552, 553, 555, 557, 558, 559, 563, 564, 567, 568, 570, 581, 585, 590, 593, 596, 600, 601, 602, 603], "wise": [140, 157, 177, 178, 318, 319, 323, 500, 550, 564, 593, 601, 603, 605], "minim": [140, 157, 318, 555, 558, 567, 568, 581, 585, 593, 596, 603], "round": [140, 157, 596, 600], "scale_c": [140, 157], "shift": [140, 157, 206, 245, 589, 602], "notic": [140, 157, 211, 566, 598], "can": [140, 147, 150, 157, 167, 168, 169, 170, 172, 177, 178, 181, 182, 192, 195, 210, 211, 213, 232, 235, 248, 260, 262, 264, 287, 289, 291, 298, 300, 302, 303, 313, 314, 335, 451, 500, 531, 532, 534, 535, 550, 551, 552, 553, 555, 556, 557, 559, 561, 564, 565, 567, 568, 569, 570, 571, 572, 573, 575, 576, 577, 579, 581, 582, 583, 585, 586, 588, 589, 590, 591, 592, 593, 595, 596, 597, 599, 600, 601, 602, 603, 605, 606], "first": [140, 157, 168, 175, 177, 178, 193, 233, 260, 298, 319, 330, 409, 531, 532, 535, 550, 553, 559, 565, 569, 573, 582, 583, 586, 589, 595, 596, 597, 599, 600, 601, 603, 605], "empir": [140, 157], "solut": [140, 157, 534, 535, 560, 573, 577, 582, 594, 600, 603], "min": [140, 157, 345, 550, 593, 596, 600, 602, 603], "graphtransform": 141, "graphtransformbas": 141, "input_pb": [141, 143, 144], "log": [143, 167, 342, 348, 451, 491, 492, 531, 550, 579, 599, 601, 603], "insertlog": 143, "node_name_list": 143, "show_nam": 143, "show_op": 143, "first_n": 143, "summar": [143, 555], "1024": [143, 195, 235, 574], "dump_fp32": 143, "rerang": 144, "rerangequantizedconcat": 144, "rerange_quant": 144, "version1_lt_version2": [145, 345], "version1": [145, 345], "version2": [145, 345], "version1_gt_version2": [145, 345], "greater": [145, 345], "version1_eq_version2": [145, 345], "version1_gte_version2": [145, 345], "version1_lte_version2": [145, 345], "disable_random": 145, "seed": [145, 178, 272, 345, 568, 605], "disabl": [145, 177, 178, 488, 517, 529, 588, 597], "read_graph": 145, "in_graph": 145, "in_graph_is_binari": 145, "write_graph": 145, "out_graph_def": 145, "out_graph_fil": 145, "write": [145, 202, 242, 345, 557, 563, 568, 571, 601], "is_ckpt_format": 145, "model_path": [145, 430, 500], "ckpt": [145, 303, 311, 314, 606], "folder": [145, 195, 200, 235, 240, 303, 314, 344, 553, 576, 581, 585, 601], "is_saved_model_format": 145, "saved_model": [145, 266, 421, 428, 438], "get_estimator_graph": 145, "estim": [145, 264, 302, 311, 603], "input_fn": [145, 311], "get_tensor_by_nam": 145, "try_cnt": 145, "3": [145, 170, 178, 195, 210, 235, 248, 260, 298, 333, 531, 532, 534, 550, 552, 553, 555, 557, 559, 561, 562, 565, 567, 568, 569, 571, 575, 579, 581, 585, 590, 593, 595, 599, 600, 602, 603, 606], "consid": [145, 264, 302, 529, 555, 589, 603], "import": [145, 158, 178, 266, 303, 313, 314, 333, 335, 345, 531, 532, 534, 551, 552, 553, 555, 556, 557, 559, 562, 567, 568, 569, 570, 571, 575, 577, 590, 591, 593, 595, 596, 597, 598, 599, 600, 601, 602, 603], "scope": [145, 568], "more": [145, 150, 156, 169, 210, 248, 287, 532, 533, 534, 550, 553, 555, 557, 562, 564, 565, 567, 568, 569, 571, 579, 583, 586, 590, 591, 593, 597, 600, 603, 604, 606], "onc": [145, 172, 217, 291, 315, 317, 550, 552, 588, 593, 594, 603, 606], "both": [145, 178, 529, 532, 535, 556, 565, 568, 572, 593, 595, 596, 600, 603], "compat": [145, 311, 557, 570, 583, 586, 588, 598], "suffix": 145, "time": [145, 177, 178, 210, 248, 264, 302, 313, 318, 345, 486, 557, 560, 568, 576, 578, 581, 585, 588, 589, 590, 593, 594, 596, 599, 601, 602, 603], "got": [145, 560, 601], "iterator_sess_run": 145, "sess": [145, 311], "iter_op": 145, "feed_dict": [145, 192, 232], "output_tensor": [145, 311], "measur": [145, 211, 303, 340, 532, 535, 551, 555, 567, 568, 601, 603], "integr": [145, 160, 212, 535, 550, 568, 589], "makeiter": 145, "feed": [145, 192, 232, 555, 593], "end": [145, 170, 178, 193, 209, 210, 233, 247, 248, 289, 315, 317, 535, 555, 556, 561, 565, 568, 582, 590, 593, 601, 602, 603], "predict": [145, 210, 215, 248, 257, 261, 262, 264, 295, 299, 300, 302, 532, 555, 567, 579, 600, 601, 602], "pred": [145, 264, 302, 567], "collate_tf_pr": 145, "collat": [145, 152], "tbe": 145, "get_input_output_node_nam": 145, "fix_ref_type_of_graph_def": 145, "fix": [145, 170, 193, 233, 289, 530, 553, 575, 593, 600, 603], "strip_unused_lib": 145, "offici": [145, 257, 261, 262, 295, 299, 300, 529, 550, 567, 600], "r1": 145, "15": [145, 561, 606], "branch": [145, 550], "get_graph_def": 145, "auto_input_output": 145, "get_model_input_shap": 145, "inout": 145, "get_tensor_val_from_graph_nod": 145, "graph_node_name_map": 145, "val": [145, 173, 195, 198, 235, 238, 288, 568], "tensor_v": 145, "int8_node_name_revers": 145, "revers": [145, 550], "tf_diagnosis_help": 145, "fp32_model": [145, 147, 152, 253, 345, 535], "quan_model": 145, "save_path": [145, 252, 253, 535, 570], "diagnosi": [145, 294, 389, 398, 421, 481, 510, 516, 568], "generate_feed_dict": 145, "input_tensor": [145, 311], "torch": [146, 147, 148, 149, 150, 151, 152, 156, 167, 168, 169, 174, 177, 178, 222, 253, 303, 314, 344, 531, 534, 536, 555, 557, 559, 568, 569, 570, 571, 576, 579, 596, 600, 601], "bf16modulewrapp": 146, "bf16modul": 146, "mix": [146, 177, 178, 303, 316, 330, 457, 458, 459, 506, 534, 535, 540, 564, 571, 577, 578, 579, 604], "precis": [146, 177, 178, 181, 182, 255, 262, 264, 265, 292, 300, 302, 303, 313, 316, 319, 330, 373, 387, 388, 397, 421, 455, 457, 458, 459, 482, 506, 534, 535, 540, 550, 551, 556, 557, 561, 564, 571, 577, 578, 579, 594, 595, 596, 600, 603, 604], "mixed_precision_model": 146, "bf16_symbolic_trac": 146, "fx_sub_module_list": 146, "trace": [146, 147, 151, 152, 167, 177, 178, 253, 314, 321, 531, 578, 603], "_description_": 146, "hessian": [147, 321, 603], "awar": [147, 159, 178, 220, 266, 287, 321, 335, 535, 556, 557, 559, 564, 569, 588, 591, 603], "node_collector": 147, "hook": [147, 159, 219, 220, 279, 284, 338, 555, 556, 568, 593, 600, 601], "record": [147, 152, 160, 193, 194, 195, 201, 212, 219, 233, 234, 235, 241, 553, 599, 601, 603], "hessiantrac": 147, "q_model": [147, 178, 266, 314, 531, 534, 552, 553, 557, 559, 562, 563, 567, 568, 570, 596, 597], "criterion": [147, 159, 161, 162, 163, 169, 170, 178, 214, 217, 256, 294, 468, 508, 555, 556, 559, 568, 593, 596, 603, 605], "pleas": [147, 150, 156, 163, 169, 170, 177, 178, 193, 194, 195, 198, 233, 234, 235, 238, 287, 289, 290, 333, 531, 532, 533, 534, 535, 550, 551, 553, 556, 557, 565, 567, 569, 571, 572, 576, 579, 593, 596, 597, 598, 599, 600, 604], "refer": [147, 150, 156, 163, 169, 170, 173, 177, 178, 193, 233, 257, 258, 264, 287, 289, 290, 295, 296, 302, 333, 531, 535, 551, 552, 553, 556, 557, 563, 565, 566, 567, 568, 569, 571, 576, 579, 590, 595, 598, 602, 603], "yao": 147, "zhewei": 147, "et": [147, 600], "al": [147, 600], "pyhessian": 147, "network": [147, 163, 169, 289, 321, 532, 550, 555, 556, 559, 568, 592, 594, 596, 600, 603], "through": [147, 181, 182, 303, 314, 534, 551, 561, 563, 564, 567, 574, 590, 591, 593, 595, 596, 600], "len": [147, 178, 210, 248, 553, 557, 602], "2020": 147, "ieee": [147, 569, 600], "intern": [147, 330, 484, 552, 553, 593], "confer": [147, 593, 600], "big": 147, "dong": 147, "zhen": 147, "hawq": [147, 321, 603], "v2": [147, 321, 557, 565, 577, 598, 603, 606], "advanc": [147, 177, 178, 509, 529, 534, 540, 596, 605], "system": [147, 158, 211, 345, 488, 515, 516, 551, 574, 593], "33": [147, 606], "18518": 147, "18529": 147, "openvinotoolkit": 147, "nncf": 147, "develop": [147, 313, 500, 530, 531, 565, 568, 569, 571, 577, 588, 594, 597, 599], "hessian_trac": 147, "compare_weight": 147, "float_dict": 147, "ani": [147, 260, 262, 298, 300, 329, 333, 347, 348, 350, 352, 354, 355, 356, 357, 358, 359, 360, 362, 387, 388, 409, 411, 417, 426, 443, 446, 448, 451, 455, 459, 461, 464, 467, 470, 473, 479, 486, 488, 500, 501, 502, 503, 504, 506, 507, 508, 509, 510, 511, 512, 516, 517, 529, 530, 534, 550, 552, 557, 571, 576, 589, 599], "quantized_dict": 147, "compar": [147, 264, 302, 550, 556, 567, 596, 599, 601, 603], "being": [147, 260, 298, 417], "two": [147, 158, 168, 169, 170, 172, 195, 200, 211, 235, 240, 260, 287, 291, 293, 298, 324, 345, 531, 532, 550, 553, 555, 557, 559, 561, 567, 568, 569, 593, 596, 597, 599, 603, 605], "wt_compare_dict": 147, "float_model": 147, "state_dict": [147, 557, 601], "qmodel": 147, "compute_error": 147, "state": [147, 168, 574, 593], "weight_dict": 147, "hawq_top": 147, "enable_act": 147, "modul": [148, 149, 269, 275, 285, 286, 489, 497, 505, 531, 550, 552, 555, 559, 564, 567, 568, 570, 593, 595, 597, 601, 604], "nn": [149, 150, 152, 167, 168, 178, 222, 253, 303, 314, 344, 531, 555, 559, 568, 570, 600, 601], "get_modul": 150, "set_modul": [150, 152], "new_modul": [150, 152], "torchsmoothqu": [150, 600], "q_func": [150, 181, 182, 315, 318, 319, 323, 326, 535, 568, 603], "traced_model": [150, 151], "detail": [150, 156, 167, 210, 248, 382, 384, 405, 468, 473, 487, 500, 529, 530, 534, 555, 561, 562, 563, 567, 568, 569, 571, 579, 588, 593, 598, 599, 601, 603, 604, 606], "smoothquant": [150, 156, 534, 594, 604], "accur": [150, 156, 600], "effici": [150, 156, 532, 552, 555, 571, 591, 594, 600, 603], "larg": [150, 156, 534, 552, 555, 568, 593, 594, 600, 606], "languag": [150, 156, 257, 295, 529, 534, 559, 593, 594, 600], "spiq": [150, 156, 600], "free": [150, 156, 168, 170, 181, 182, 314, 529, 534, 567, 577, 582, 590, 599, 600], "could": [150, 156, 169, 181, 182, 195, 235, 293, 303, 314, 335, 529, 531, 556, 568, 591, 593, 596, 600, 604], "absorb": [150, 156], "later": [150, 156, 601], "inplac": 150, "mean": [150, 169, 177, 178, 206, 210, 245, 248, 262, 264, 287, 300, 302, 323, 531, 552, 557, 561, 567, 568, 574, 593, 596, 600, 602, 603, 605], "you": [150, 177, 178, 191, 193, 231, 233, 289, 530, 531, 550, 553, 557, 559, 565, 566, 567, 571, 573, 574, 576, 581, 585, 588, 589, 593, 596, 598, 599, 600, 601, 604], "recov": [150, 345, 535, 556, 600], "graphtrac": 150, "update_sq_scal": 150, "ipex_config_path": 150, "smoothquant_scale_info": 150, "ipex_config": 150, "json": [150, 194, 210, 234, 248, 473, 500, 553, 570, 589, 602], "temporari": [150, 345, 529], "trace_and_fuse_sub_graph": 151, "is_qat": 151, "get_embedding_contigu": 152, "embed": 152, "contigu": [152, 593], "is_fused_modul": 152, "_propagate_qconfig_help": 152, "detect": [152, 167, 177, 178, 260, 264, 298, 302, 307, 500, 531, 550, 571, 578, 579, 593], "collate_torch_pr": 152, "fetch": [152, 155, 186, 226, 553], "collate_result": 152, "input2tupl": 152, "append_attr": 152, "fx_model": 152, "fx_white_list": 152, "append": [152, 293, 318, 531, 556, 568, 591], "graphmodul": [152, 531, 597], "addit": [152, 178, 335, 550, 555, 582, 598], "dir": [152, 193, 233, 344, 553, 560, 563], "generate_activation_observ": 152, "observ": [152, 599, 601, 603], "what": [152, 170, 191, 231, 335, 529, 550], "check_cfg_and_qconfig": 152, "op_infos_from_cfg": 152, "output_tensor_ids_op_nam": 152, "paser_cfg": 152, "ops_nam": 152, "get_quantizable_ops_from_cfg": 152, "input_tensor_ids_op_nam": 152, "auto_copi": 152, "fetch_modul": 152, "op_nam": [152, 174, 178, 331, 405, 406, 568, 593, 601], "simple_infer": 152, "get_example_input": 152, "dataset": [152, 181, 182, 183, 185, 186, 190, 191, 192, 204, 213, 223, 225, 226, 230, 231, 232, 244, 256, 260, 261, 262, 264, 293, 294, 298, 299, 300, 302, 303, 314, 335, 338, 373, 387, 397, 398, 409, 421, 500, 502, 532, 534, 535, 552, 557, 562, 567, 568, 576, 593, 596, 598, 600, 603, 605, 606], "example_inp": 152, "get_fallback_ord": 152, "confidence_batch": [152, 603], "fallback": [152, 321, 323, 324, 569, 597, 603], "requantize_cfg": 152, "fall": 152, "back": [152, 210, 216, 248, 588], "order": [152, 257, 258, 293, 295, 296, 318, 323, 330, 332, 531, 567, 593, 595, 600, 601, 603], "confid": 152, "ordered_op": 152, "get_mse_order_per_fp32": 152, "mse": [152, 178, 264, 294, 302, 322, 406, 550, 567, 595, 598], "influenc": [152, 593], "last": [152, 163, 173, 177, 178, 550, 569, 571, 573, 578, 582, 596, 600], "quant": [152, 177, 178, 330, 531, 568, 596], "fallback_ord": 152, "get_mse_order_per_int8": 152, "example_input": [152, 177, 178, 253, 559], "get_torch_vers": 152, "match_datatype_pattern": 152, "calculate_quant_min_max": 152, "unsign": [152, 332], "qmin": 152, "qmax": 152, "algorithm_registri": 153, "algorithm_typ": 153, "locat": [153, 173, 210, 248, 557, 574, 581, 585, 588, 596, 598, 602, 605], "registr": [153, 195, 202, 210, 235, 242, 248, 282], "algorithmschedul": 153, "conf": [153, 158, 159, 178, 181, 182, 211, 266, 273, 274, 276, 277, 278, 279, 284, 303, 313, 314, 315, 318, 319, 323, 326, 330, 333, 335, 511, 531, 532, 534, 551, 555, 562, 563, 568, 569, 570, 591, 596, 597, 599, 603], "control": [153, 178, 392, 397, 531, 550, 568, 593, 603], "phase": [153, 532, 568, 593, 596, 597, 603], "fastbiascorrect": [154, 157], "fast_bias_correct": [155, 177, 178, 294, 596], "smooth_quant": [155, 177, 178, 294, 596, 600], "weight_correct": [155, 177, 178, 294, 596], "5": [156, 160, 178, 197, 206, 212, 237, 245, 264, 302, 535, 550, 553, 561, 567, 568, 592, 593, 595, 596, 600, 602, 603, 605, 606], "For": [156, 167, 168, 169, 178, 195, 210, 235, 248, 261, 262, 264, 287, 290, 299, 300, 302, 303, 314, 529, 531, 533, 535, 550, 555, 556, 557, 559, 561, 564, 571, 573, 574, 576, 579, 593, 597, 600, 601, 603, 605, 606], "kernel": [156, 178, 488, 535, 592, 593, 603], "futur": [156, 181, 182, 213, 564, 568, 579, 604], "weightcorrect": 157, "1e": [157, 600, 605], "05": [157, 178, 264, 302, 567, 600, 606], "evalu": [158, 159, 169, 177, 181, 182, 193, 211, 233, 249, 257, 260, 261, 262, 264, 266, 295, 298, 299, 300, 302, 303, 313, 314, 335, 338, 481, 489, 505, 532, 535, 552, 553, 555, 556, 563, 564, 567, 568, 569, 571, 577, 579, 582, 588, 590, 593, 596, 599, 601, 603, 605], "set_env_var": [158, 211], "env_var": [158, 211], "overwrite_exist": [158, 211], "env": [158, 211, 560], "alreadi": [158, 195, 209, 211, 235, 247, 486, 535, 550, 553, 564, 583, 586, 603], "param": [158, 183, 211, 217, 223, 264, 302, 318, 399, 500, 535, 570, 603], "set_all_env_var": [158, 211], "physic": [158, 211, 529, 551], "core": [158, 178, 211, 550, 551, 566, 581, 585, 592, 606], "get_architectur": [158, 211], "architectur": [158, 211, 267, 270, 534, 550, 551, 555, 568, 593, 594, 604], "get_threads_per_cor": [158, 211], "thread": [158, 178, 211, 516, 550, 552, 592], "get_thread": [158, 211], "get_physical_id": [158, 211], "socket": [158, 211, 488, 517, 592, 606], "get_core_id": [158, 211], "get_bounded_thread": [158, 211], "core_id": [158, 211], "bind": [158, 211], "fit": [158, 169, 178, 303, 314, 318, 333, 335, 531, 534, 551, 552, 553, 557, 562, 563, 567, 568, 569, 570, 593, 596, 597], "b_dataload": [158, 178, 551, 568], "b_func": [158, 551], "benchmarkconfig": [158, 178, 551, 568], "accuraci": [158, 173, 177, 178, 181, 182, 249, 255, 264, 279, 284, 292, 302, 303, 313, 314, 319, 333, 335, 468, 492, 503, 531, 534, 550, 552, 553, 556, 557, 558, 559, 567, 568, 569, 579, 588, 590, 591, 593, 594, 595, 598, 599, 600, 601, 605, 606], "goal": [158, 249, 255, 279, 284, 292, 303, 314, 552, 591, 596, 603], "prefer": [158, 255, 292, 303, 314, 593], "space": [158, 170, 177, 178, 181, 182, 255, 262, 267, 270, 271, 272, 292, 300, 303, 314, 318, 323, 330, 500, 529, 530, 532, 535, 593, 596, 605], "etc": [158, 159, 209, 247, 249, 255, 262, 279, 284, 292, 300, 303, 314, 344, 555, 564, 593, 599, 603], "user": [158, 167, 170, 173, 177, 178, 181, 182, 195, 198, 202, 210, 211, 217, 222, 235, 238, 242, 248, 255, 279, 284, 290, 292, 293, 303, 313, 314, 319, 335, 345, 484, 531, 532, 535, 540, 551, 555, 556, 559, 561, 564, 567, 568, 569, 570, 571, 572, 573, 575, 576, 577, 579, 582, 588, 590, 591, 593, 594, 596, 597, 598, 600, 601, 602, 603, 607], "cores_per_inst": [158, 178, 551, 568, 595], "num_of_inst": [158, 178, 551, 568, 595], "7": [158, 177, 178, 313, 551, 560, 561, 565, 568, 593, 596, 598, 600, 603, 606], "pb": [158, 178, 303, 311, 314, 437, 440, 451, 534, 551, 557, 562, 568, 570, 601, 606], "eval_dataload": [158, 178, 181, 182, 293, 303, 314, 315, 318, 319, 323, 326, 335, 534, 551, 562, 563, 568, 596, 603], "compon": [159, 249, 256, 293, 294, 481, 516, 531, 557, 565, 566, 571, 588, 591, 592], "quantizationawaretrainingcallback": [159, 335], "pruningcallback": [159, 335], "distillationcallback": 159, "basecallback": 159, "design": [159, 192, 215, 220, 232, 302, 319, 532, 534, 568, 576, 579, 593, 596, 604], "mainli": [159, 172, 220, 291, 568, 593, 596], "prune": [159, 163, 164, 165, 168, 169, 170, 171, 172, 173, 178, 220, 221, 256, 273, 274, 276, 277, 278, 282, 284, 285, 287, 288, 289, 291, 293, 294, 345, 356, 363, 382, 421, 456, 481, 489, 500, 505, 534, 557, 558, 561, 562, 564, 591, 594, 604, 605], "distil": [159, 162, 178, 212, 219, 220, 256, 294, 534, 558, 562, 564, 591, 604, 605], "deriv": [159, 163, 169, 170, 171, 172, 249, 287, 289, 291], "pipelin": [159, 249, 267, 268, 293, 556, 568, 591], "knowledg": [159, 160, 178, 212, 249, 556, 558, 562, 564, 568, 570, 605], "transfer": [159, 200, 240, 249, 553, 555, 556, 568, 600], "teacher": [159, 178, 249, 555, 556, 568, 606], "student": [159, 178, 193, 219, 233, 249, 553, 555, 556, 606], "distillation_conf": [159, 174, 249], "_epoch_ran": [159, 249], "integ": [159, 169, 170, 178, 249, 260, 264, 271, 287, 289, 298, 302, 333, 535, 596, 600, 603], "indic": [159, 178, 186, 191, 193, 226, 231, 233, 249, 260, 271, 298, 531, 550, 560, 601], "how": [159, 163, 169, 170, 178, 210, 248, 249, 287, 530, 531, 533, 535, 550, 552, 553, 555, 556, 557, 563, 568, 582, 583, 586, 587, 588, 593, 596, 600, 602, 603, 604, 605], "much": [159, 163, 178, 210, 248, 249, 555, 582, 593, 600, 602], "epoch": [159, 170, 249, 289, 335, 555, 556, 557, 568, 591, 593, 605], "ran": [159, 249], "eval_frequ": [159, 249], "frequenc": [159, 170, 178, 249, 289, 568, 592, 593, 605], "term": [159, 170, 171, 249, 530, 555, 566, 567, 590, 591, 603], "best_scor": [159, 249], "best": [159, 210, 248, 249, 255, 292, 323, 529, 532, 565, 571, 577, 588, 590, 596, 602, 603], "metric": [159, 178, 181, 182, 214, 249, 255, 256, 271, 279, 284, 292, 293, 294, 303, 314, 335, 338, 373, 397, 421, 481, 489, 497, 500, 503, 532, 535, 550, 552, 553, 557, 568, 569, 596, 599, 601, 603, 604, 605, 606], "best_model": [159, 249], "found": [159, 249, 484, 500, 517, 534, 550, 555, 569, 576, 600, 603, 606], "critet": [160, 212], "includ": [160, 163, 167, 169, 171, 178, 193, 195, 202, 210, 212, 233, 235, 242, 248, 255, 265, 287, 292, 333, 529, 530, 535, 550, 553, 565, 566, 567, 568, 569, 571, 574, 577, 582, 593, 596, 597, 601, 603], "tensorflowknowledgedistillationloss": [160, 212], "pytorchknowledgedistillationloss": [160, 212, 568], "pytorchintermediatelayersknowledgedistillationloss": [160, 212], "tensorflowcriterion": [160, 212], "pytorchcriterion": [160, 212], "criterion_registri": [160, 212], "criterion_typ": [160, 212], "registry_criterion": [160, 212], "knowledgedistillationframework": [160, 212], "student_model": [160, 178, 212, 568], "teacher_model": [160, 178, 212, 555, 556, 568], "knowledgedistillationloss": [160, 212, 568, 605], "temperatur": [160, 178, 212, 568, 605], "loss_typ": [160, 178, 212, 568, 605], "ce": [160, 178, 212, 568, 605], "loss_weight": [160, 178, 212, 568, 605], "pytorchknowledgedistillationlosswrapp": [160, 212], "param_dict": [160, 212, 217], "tensorflowknowledgedistillationlosswrapp": [160, 212], "tensorflowknowledgedistillationlossextern": [160, 212], "intermediatelayersknowledgedistillationloss": [160, 212, 508], "layer_map": [160, 178, 212, 555], "add_origin_loss": [160, 178, 212], "pytorch": [160, 167, 169, 177, 192, 193, 195, 198, 202, 210, 212, 217, 219, 232, 233, 235, 238, 242, 248, 253, 254, 255, 264, 265, 285, 287, 290, 292, 294, 302, 303, 312, 314, 324, 339, 345, 348, 421, 428, 451, 461, 481, 531, 532, 534, 535, 552, 555, 556, 558, 559, 561, 564, 565, 568, 570, 571, 573, 576, 577, 578, 579, 588, 593, 594, 595, 598, 603, 605], "loss": [160, 178, 212, 255, 264, 279, 284, 292, 302, 335, 555, 556, 557, 558, 567, 568, 569, 579, 591, 593, 596, 600, 603, 605], "pytorchintermediatelayersknowledgedistillationlosswrapp": [160, 212], "selfknowledgedistillationloss": [160, 212, 508], "selfknowledg": [160, 212], "pytorchselfknowledgedistillationloss": [160, 212], "pytorchselfknowledgedistillationlosswrapp": [160, 212], "pruner": [162, 256, 273, 274, 275, 276, 277, 279, 284, 285, 287, 290, 294, 511, 568, 593, 605], "model_slim": [162, 164], "auto_slim": [162, 164, 166], "pattern_analyz": [162, 164, 166], "weight_slim": [162, 164, 166], "criteria": [162, 164, 178, 255, 279, 284, 287, 289, 292, 531, 588, 600], "reg": [162, 164, 170], "schedul": [162, 164, 170, 171, 178, 256, 285, 289, 294, 568, 591], "callback": [162, 279, 284, 335, 338, 516, 531, 568, 591, 593, 596], "register_criterion": 163, "registri": [163, 169, 170, 171, 172, 287, 289, 291, 532], "get_criterion": 163, "pruningcriterion": 163, "about": [163, 487, 488, 494, 529, 550, 552, 568, 597, 603, 604, 606], "module_nam": [163, 170, 171, 289, 345, 500], "store": [163, 167, 170, 171, 178, 195, 235, 282, 289, 563], "score": [163, 169, 170, 178, 257, 258, 260, 261, 262, 264, 289, 295, 296, 298, 299, 300, 302, 321, 338, 531, 567, 590, 593, 599, 603], "magnitudecriterion": 163, "magnitud": [163, 178, 256, 264, 275, 294, 302, 564, 593], "criterion_class": 163, "determin": [163, 169, 170, 178, 340, 529, 531, 593, 596, 600], "gradientcriterion": 163, "gradient": [163, 273, 564, 568, 593, 606], "absolut": [163, 178, 264, 302, 567, 568, 592, 593, 596, 603], "snipcriterion": 163, "snip": [163, 178, 289, 564, 593, 606], "product": [163, 564, 569, 571, 572, 588, 592, 594, 596, 599, 603], "singl": [163, 172, 178, 186, 193, 210, 226, 233, 248, 260, 289, 291, 298, 381, 398, 417, 531, 553, 565, 593], "shot": [163, 170, 172, 220, 289, 291, 532, 564, 568, 593, 594], "sensit": [163, 273, 289, 564, 593], "arxiv": [163, 170, 289, 593, 600], "org": [163, 170, 260, 289, 298, 530, 531, 550, 565, 583, 586], "1810": [163, 289], "02340": [163, 289], "snipmomentumcriterion": 163, "snip_momentum": [163, 178, 568, 593], "momentum": [163, 289, 564, 568, 593, 605], "mechan": [163, 599, 604], "preserv": 163, "step": [163, 169, 170, 172, 178, 287, 289, 291, 335, 550, 555, 556, 557, 568, 583, 586, 588, 591, 593, 595, 597, 599, 600, 601, 603], "beta": 163, "snipmomentumblockcriterion": 163, "snip_momentum_block": 163, "retrainfreecriterion": 163, "retrain_fre": [163, 170], "auto": [165, 167, 177, 178, 294, 316, 322, 345, 531, 571, 574, 576, 578, 579, 593, 596], "slim": [165, 166, 167, 260, 298, 309, 311, 570, 593], "round_multipli": 165, "spars": [165, 170, 289, 553, 594], "automat": [165, 167, 168, 177, 178, 195, 198, 205, 206, 235, 238, 245, 255, 265, 292, 531, 534, 550, 551, 553, 564, 568, 569, 571, 573, 576, 577, 579, 581, 582, 583, 585, 586, 588, 591, 593, 596, 600, 602, 603], "model_slim_ffn2": 165, "32": [165, 557, 563, 592, 593, 600, 606], "some": [165, 167, 178, 193, 233, 288, 500, 550, 553, 565, 567, 568, 569, 590, 593, 596, 597, 600, 601, 603], "part": [165, 170, 287, 289, 531, 565, 569, 583, 586, 593, 600, 604], "perman": [165, 529, 593], "obtain": [165, 167, 170, 171, 173, 288, 531, 559, 593, 599, 600, 603], "acceler": [165, 555, 568, 571, 579, 588, 593, 594, 597, 600, 603], "directli": [165, 178, 192, 232, 260, 264, 288, 298, 302, 559, 567, 568, 575, 593, 595, 596, 601], "sprase": 165, "multipl": [165, 178, 179, 180, 184, 185, 193, 194, 196, 197, 198, 199, 200, 204, 207, 210, 217, 224, 225, 227, 233, 234, 236, 237, 238, 239, 240, 244, 246, 248, 265, 303, 304, 305, 307, 313, 551, 553, 559, 568, 591, 593, 599, 600, 603], "model_slim_mha": 165, "parse_auto_slim_config": 165, "ffn2_sparsiti": 165, "mha_spars": 165, "generate_ffn2_pruning_config": 165, "consecut": [165, 167, 168], "generate_mha_pruning_config": 165, "multi": [165, 167, 260, 298, 358, 532, 552, 553, 564, 568, 590, 596, 603], "head": [165, 167, 168, 173, 593], "get_attribut": 167, "level": [167, 319, 333, 342, 491, 529, 600, 603], "descent": 167, "print_iter": 167, "recipesearch": 167, "searcher": [167, 272], "search": [167, 170, 174, 181, 182, 255, 257, 267, 270, 271, 272, 292, 295, 318, 387, 388, 534, 550, 562, 564, 567, 571, 572, 582, 594, 601, 603, 604], "root": [167, 193, 194, 195, 198, 233, 234, 235, 238, 264, 302, 517, 552, 553, 557, 567, 568, 605], "levelwis": 167, "wai": [167, 194, 195, 198, 234, 235, 238, 500, 532, 550, 552, 553, 567, 568, 571, 574, 589, 591, 593, 596, 600, 603, 605], "huggingfac": [167, 168, 193, 233, 341, 553, 558, 562, 576, 577, 578, 579, 600], "bert": [167, 178, 189, 192, 193, 210, 229, 232, 233, 248, 534, 553, 555, 567, 576, 602, 606], "recipe_sampl": 167, "bertattent": 167, "dens": [167, 172, 178, 291, 593, 606], "infom": [167, 213, 253], "basic": [167, 169, 177, 178, 209, 247, 267, 287, 294, 322, 326, 329, 335, 564, 565, 568, 595, 599], "searching_result": 167, "jitbasicsearch": 167, "placeholder_shap": 167, "placeholder_dtyp": 167, "jit": [167, 177, 571, 573, 578, 600, 601], "them": [167, 193, 233, 531, 552, 559, 561, 563, 591, 593, 603], "static_graph": 167, "flatten_static_graph": 167, "target_lay": 167, "linear2linearsearch": 167, "target_op_lut": 167, "lookup": 167, "tabl": [167, 365, 366, 367, 368, 369, 370, 371, 372, 374, 375, 376, 377, 378, 379, 380, 382, 383, 384, 385, 387, 388, 606], "code": [167, 181, 182, 211, 266, 290, 293, 314, 335, 410, 428, 531, 534, 535, 550, 552, 553, 555, 556, 557, 563, 564, 566, 567, 571, 573, 575, 576, 577, 579, 582, 588, 590, 591, 593, 594, 595, 596, 599, 600, 601, 602], "current_pattern": 167, "statu": [167, 496, 512, 529, 552, 590], "selfmhasearch": 167, "classifierheadsearch": 167, "final": [167, 170, 173, 289, 568, 574, 590, 593, 596, 598, 603], "classifi": [167, 173, 193, 233, 264, 302, 553, 555, 593], "squeezer": 168, "postcompressionutil": 168, "librari": [168, 214, 256, 294, 527, 530, 534, 565, 568, 573, 582, 588, 594, 596], "relat": [168, 171, 249, 260, 279, 284, 287, 298, 338, 428, 431, 433, 438, 518, 521, 522, 523, 526, 571, 593, 605], "linearcompress": 168, "root_linear": 168, "target_linear": 168, "also": [168, 192, 195, 210, 232, 235, 248, 257, 295, 313, 314, 530, 532, 534, 535, 550, 552, 558, 562, 564, 567, 568, 571, 576, 581, 582, 585, 588, 589, 590, 593, 594, 596, 597, 600, 603], "while": [168, 170, 173, 289, 318, 535, 550, 553, 558, 564, 569, 571, 576, 588, 595, 596, 600], "hidden": [168, 169, 287, 500, 535, 593], "structur": [168, 170, 178, 289, 331, 425, 564, 587, 589, 593, 596, 601, 604, 606], "layer_1": 168, "act_fn": 168, "layer_2": 168, "linearcompressioniter": 168, "linear_pattern": 168, "mhacompress": 168, "mha": 168, "head_num": 168, "head_siz": 168, "test": [168, 178, 210, 248, 530, 534, 550, 565, 606], "progress": [168, 195, 235, 582, 588, 593, 596], "register_pattern": [169, 287], "sure": [169, 170, 172, 287, 289, 291, 550, 551], "get_pattern": [169, 287], "assertionerror": [169, 170, 173, 287, 288, 289, 303], "basepattern": [169, 171], "unit": [169, 287, 500, 530], "e": [169, 178, 517, 529, 555, 558, 562, 571, 576, 577, 581, 585, 593, 600, 603], "4x1": [169, 178, 283, 568, 593, 606], "is_glob": [169, 287], "local": [169, 178, 287, 345, 360, 392, 397, 410, 430, 550, 581, 585, 593, 599], "contrast": [169, 287, 602], "keep_mask_lay": 169, "invalid_lay": 169, "max_sparsity_ratio_per_op": [169, 170, 174, 178, 568, 593], "sparsiti": [169, 170, 172, 173, 178, 289, 291, 345, 534, 553, 564, 568, 604, 606], "reach": [169, 172, 178, 291, 530, 534, 552, 593, 603], "min_sparsity_ratio_per_op": [169, 174, 178, 568, 593], "minimum": [169, 178, 568, 579, 593, 603], "target_spars": [169, 174, 178, 568, 593, 595, 605], "patternnxm": [169, 287], "nxm": [169, 170, 178, 283, 287, 593], "kept": [169, 287], "block_siz": [169, 287], "height": [169, 206, 210, 245, 248, 287, 557, 593, 602, 605], "width": [169, 206, 210, 245, 248, 287, 557, 593, 596, 602, 605], "vertic": [169, 210, 248, 287, 602], "becaus": [169, 210, 248, 287, 531, 593, 596, 600, 602, 603], "patternninm": [169, 287], "n": [169, 178, 194, 210, 234, 248, 258, 287, 296, 333, 488, 553, 555, 593, 596, 600, 602], "out": [169, 178, 193, 194, 195, 233, 234, 235, 255, 287, 292, 530, 531, 534, 553, 571, 576, 581, 582, 583, 585, 586, 588, 593, 595, 596], "continu": [169, 260, 287, 298, 532, 568, 589, 593], "doc": [169, 177, 178, 287, 329, 330, 333, 345, 567, 568, 583, 586], "md": [169, 177, 178, 287, 557, 596], "element": [169, 173, 191, 231, 260, 287, 298, 345, 553, 564, 567, 593, 600], "register_prun": [170, 289], "parse_valid_pruner_typ": 170, "get_prun": [170, 289], "cuurent": [170, 289], "baseprun": 170, "current_sparsity_ratio": [170, 289], "global_step": [170, 289], "total": [170, 210, 248, 264, 289, 302, 553, 593, 602], "start_step": [170, 174, 178, 289, 568, 593, 595], "trigger": [170, 289, 530], "end_step": [170, 174, 178, 289, 568, 593, 595], "pruning_frequ": [170, 174, 178, 568, 593], "target_sparsity_ratio": [170, 289], "show": [170, 345, 529, 550, 555, 557, 568, 574, 589, 593, 600, 603, 604], "basicprun": 170, "arrang": [170, 194, 195, 198, 234, 235, 238, 553, 593], "proce": 170, "regul": 170, "patternlockprun": [170, 277, 289], "parent": [170, 172, 283, 289, 291, 601], "blockmaskprun": 170, "grad": 170, "retrainfreeprun": 170, "pruner_class": 170, "rearrang": 170, "fast": [170, 177, 178, 534, 594], "retrain": [170, 556, 593], "effect": [170, 534, 535, 593, 594], "2204": 170, "09656": 170, "progressiveprun": 170, "interpol": [170, 210, 248, 567, 593, 602], "fine": [170, 193, 233, 553, 574, 593, 594, 596], "grain": [170, 594, 603], "improv": [170, 530, 534, 568, 571, 588, 589, 593, 594, 596, 597, 603, 606], "interv": [170, 593], "regular": [171, 257, 288, 295], "register_reg": 171, "regulariz": 171, "get_reg_typ": 171, "get_reg": 171, "basereg": 171, "grouplasso": 171, "coeff": 171, "group": [171, 274, 417, 564, 593, 601, 602, 603, 606], "lasso": [171, 274, 564, 593], "select": [171, 178, 193, 233, 531, 532, 550, 564, 565, 588, 593, 596, 601, 603], "reg_term": 171, "coeffient": 171, "register_schedul": [172, 291], "get_schedul": [172, 291], "pruningschedul": 172, "gradual": [172, 291, 593], "oneshotschedul": [172, 291], "iterativeschedul": [172, 291], "get_sparsity_ratio": 173, "elementwise_over_matmul_gemm_conv": 173, "elementwise_over_al": 173, "blockwise_over_matmul_gemm_conv": 173, "check_config": [173, 288], "prune_config": [173, 288], "everyth": [173, 288, 576], "reset_none_to_default": 173, "undefin": [173, 288], "update_param": 173, "process_weight_config": 173, "global_config": [173, 273, 274, 276, 277, 278], "local_config": [173, 178, 273, 274, 276, 277, 278], "default_config": 173, "pruners_info": 173, "process_yaml_config": 173, "check_key_valid": 173, "template_config": 173, "user_config": 173, "process_and_check_config": [173, 288], "process_config": [173, 288], "parse_last_linear": 173, "often": [173, 552, 555, 591, 593], "act": [173, 191, 231, 529], "might": [173, 531, 550, 603], "caus": [173, 572, 593], "drop": [173, 260, 288, 298, 568, 569, 582, 593, 606], "parse_to_prun": [173, 288], "keep": [173, 288, 319, 531, 535, 587, 588, 598], "generate_pruner_config": 173, "dotdict": [173, 174, 313], "prunerv2": 174, "pruning_typ": [174, 178, 568, 593], "pruning_scop": [174, 178, 568, 593], "sparsity_decay_typ": [174, 178, 568, 593], "pruning_op_typ": [174, 178, 568, 593], "reg_typ": 174, "criterion_reduce_typ": 174, "resume_from_pruned_checkpoint": 174, "similiar": 174, "cfg_fname": 174, "parser": [174, 294, 358, 363, 481, 489, 519], "quantization_conf": 174, "pruning_conf": 174, "graph_optimization_conf": [174, 255], "mixedprecision_conf": 174, "benchmark_conf": 174, "nasconfig": [174, 268, 270, 532], "approach": [174, 177, 178, 267, 268, 270, 508, 531, 532, 534, 552, 553, 555, 564, 568, 576, 588, 594, 595, 603, 605], "search_spac": [174, 267, 270, 271, 272], "search_algorithm": [174, 256, 269, 294, 532], "na": [174, 256, 294, 307, 564], "procedur": [174, 532], "deep_get": [175, 313], "dot": [175, 500, 569, 596], "nest": 175, "eg": [175, 195, 235, 553, 595], "person": [175, 529, 594], "john": 175, "deep": [175, 534, 535, 552, 564, 565, 568, 569, 571, 573, 576, 577, 579, 582, 588, 594, 596, 603, 604, 606], "deep_set": [175, 313], "sex": [175, 529], "male": 175, "instead": [175, 192, 232, 345, 574, 576, 579, 593], "notat": 175, "quantizationconfig": 177, "post_training_static_qu": [177, 552, 553, 568, 595, 603], "calibration_sampling_s": [177, 178, 568], "op_type_dict": [177, 178, 595, 596, 603], "op_name_dict": [177, 178, 568, 596, 603], "strategy_kwarg": [177, 178, 599, 603], "timeout": [177, 178, 568, 595, 603, 605], "max_trial": [177, 178, 568, 603], "quant_level": [177, 178, 603], "accuracy_criterion": [177, 178, 313, 568, 590, 595, 603, 605], "use_distributed_tun": [177, 178, 603], "posttrainingquantconfig": [177, 178, 314, 531, 534, 552, 562, 568, 570, 596, 597, 599, 603], "quantizationawaretrainingconfig": [177, 178, 335, 531, 556, 568, 596, 597, 603], "requir": [177, 178, 293, 311, 347, 349, 361, 416, 422, 447, 454, 455, 456, 457, 459, 460, 461, 463, 466, 467, 472, 477, 481, 531, 535, 550, 551, 552, 556, 557, 561, 568, 569, 570, 572, 582, 588, 592, 593, 596, 598, 599, 601, 603, 605], "onnxrt_trt_ep": [177, 178, 596], "onnxrt_cuda_ep": [177, 178, 569, 596], "cv": [177, 178, 593], "object_detect": [177, 178, 260, 298], "nlp": [177, 178, 290, 576, 593, 596], "recommendation_system": [177, 178], "adaptor": [177, 178, 332, 338, 534, 564, 597, 598, 600, 601, 604], "explicitli": [177, 178, 563], "overrid": [177, 178, 345], "quantiztaion": [177, 178], "smooth_quant_arg": [177, 178, 596], "gemm_to_matmul": [177, 178, 596], "graph_optimization_level": [177, 178, 595, 596], "disable_al": [177, 178, 595], "enable_bas": [177, 178], "enable_extend": [177, 178], "enable_al": [177, 178], "first_conv_or_matmul_quant": [177, 178, 596], "last_conv_or_matmul_quant": [177, 178, 596], "pre_post_process_quant": [177, 178, 596], "preprocess": [177, 178, 193, 210, 233, 248, 338, 557, 602], "postprocess": [177, 178, 204, 207, 210, 214, 248, 256, 294, 338, 503, 535, 568, 601, 602], "vaild": [177, 178], "dedic": [177, 178], "quant_format": [177, 178, 253, 559], "constraint": [177, 178, 255, 292, 568, 599, 603, 605], "reduc": [177, 178, 535, 556, 568, 569, 588, 589, 594, 596, 597, 600, 603, 605], "layer1": [177, 178, 568, 593, 596], "conv1": [177, 178, 596, 605], "tuning_strategi": [177, 178], "guarante": [177, 178, 568], "models": [177, 178, 313, 568, 590, 595], "footprint": [177, 178, 255, 279, 284, 292, 313, 556, 568, 590, 593, 595], "earli": [177, 178, 568, 596, 603, 605], "stop": [177, 178, 568, 603, 604, 605], "field": [177, 178, 195, 235, 260, 298, 531, 535, 550, 557, 568, 599, 603, 605], "exit": [177, 178, 315, 317, 550, 568, 569, 605], "bit": [177, 178, 556, 569, 594, 596, 600], "excluded_precis": [177, 178, 597], "exclud": [177, 178, 535, 569, 597], "empti": [177, 178, 574], "conserv": [177, 178, 294, 322], "random_se": [178, 318, 335, 568, 605], "1978": 178, "workspac": [178, 335, 344, 345, 426, 499, 510, 570], "default_workspac": 178, "resume_from": [178, 345], "tensorboard": [178, 335, 338, 345, 535, 568], "set_random_se": [178, 345], "set_workspac": [178, 345], "set_resume_from": [178, 345], "set_tensorboard": [178, 345], "directori": [178, 194, 195, 234, 235, 311, 341, 344, 345, 409, 500, 553, 557, 560, 581, 583, 585, 586, 601], "histori": [178, 344, 345, 385, 398, 451, 469, 519, 588, 603], "nc_workspac": 178, "datetim": 178, "now": [178, 210, 248, 531, 532, 553, 557, 579, 595, 602, 603], "strftime": 178, "d_": 178, "h": [178, 210, 248, 557, 602], "resum": [178, 181, 182, 315, 326, 335], "wa": [178, 535, 550, 568, 594, 603], "flag": [178, 258, 296, 335], "visual": [178, 534, 579, 588, 599, 601, 603, 604], "displai": [178, 329, 330, 345, 416, 588], "workspace_path": [178, 485, 500], "warmup": [178, 551, 568, 595], "inter_num_of_thread": [178, 568, 595], "intra_num_of_thread": [178, 568, 595], "benchmark": [178, 213, 256, 293, 294, 313, 345, 366, 373, 386, 397, 398, 421, 481, 482, 492, 498, 515, 520, 534, 540, 570, 571, 575, 579, 582, 588, 603, 604, 605, 606], "inter": [178, 191, 195, 231, 235], "intra": 178, "accuracycriterion": [178, 468, 568, 603], "higher_is_bett": [178, 567, 603, 605], "rel": [178, 313, 568, 595, 603, 605, 606], "tolerable_loss": [178, 568, 603], "01": [178, 568, 592, 595, 603, 605, 606], "higher": [178, 181, 182, 271, 303, 314, 335, 531, 555, 559, 567, 593, 596, 599], "tuningcriterion": [178, 568, 590, 599, 603], "optin": 178, "tuning_criterion": [178, 568, 590, 599, 603], "dynam": [178, 183, 223, 253, 330, 353, 535, 552, 555, 564, 568, 571, 576, 577, 578, 579, 582, 588, 594, 603, 606], "ptq": [178, 314, 531, 557, 564, 568, 596, 600, 601, 603], "tri": [178, 603], "meet": [178, 293, 315, 317, 531, 559, 590, 594, 595, 596, 601, 603], "bayesian": [178, 272, 294, 322, 532, 595], "mse_v2": [178, 294, 322], "hawq_v2": [178, 294, 322], "exhaust": [178, 272, 294, 322, 595], "docstr": [178, 333], "copi": [178, 288, 345], "deepcopi": 178, "model_origin": [178, 314, 597], "qat_op_name_dict": 178, "compression_manag": [178, 335, 531, 555, 556, 568, 591, 593, 596], "prepare_compress": [178, 335, 531, 555, 556, 568, 591, 593, 596], "weightpruningconfig": [178, 222, 568, 591, 593], "pruning_config": [178, 568, 593], "9": [178, 531, 565, 568, 593, 595, 600, 603, 605], "98": [178, 568, 593, 595, 606], "exp": [178, 568, 593], "link": [178, 193, 233, 550, 553, 581, 585, 588, 606], "90": [178, 605, 606], "magnitude_progress": 178, "snip_progress": 178, "snip_momentum_progress": [178, 593], "pattern_lock": [178, 256, 275, 294], "most": [178, 264, 302, 550, 568, 569, 593, 596, 600, 603], "feasibl": 178, "situat": [178, 557], "unstructur": [178, 283, 564, 593, 606], "8x1": 178, "channelx1": [178, 593], "1xchannel": [178, 593], "itrex": 178, "start": [178, 210, 248, 260, 298, 319, 565, 602, 603, 604, 607], "togeth": [178, 210, 248, 555, 565, 575, 594, 601, 602], "sort": [178, 323, 409, 603], "sinc": [178, 255, 257, 279, 284, 292, 295, 555, 559, 565, 567, 582, 588, 591], "lead": [178, 500, 555, 568, 569, 593, 600], "increas": [178, 554, 564, 571, 588, 603], "cube": [178, 593], "6": [178, 534, 550, 561, 593, 596, 600, 603, 606], "update_config": 178, "10": [178, 195, 235, 318, 534, 550, 551, 553, 565, 568, 593, 595, 602, 603, 606], "knowledgedistillationlossconfig": [178, 555, 556, 568, 591], "hyperparamet": [178, 599, 600, 603], "entropi": [178, 603], "length": [178, 193, 210, 233, 248, 260, 298, 534, 553, 567, 594, 596, 602], "groundtruth": [178, 260, 298], "label": [178, 181, 182, 193, 195, 196, 197, 198, 201, 206, 210, 215, 233, 235, 236, 237, 238, 241, 245, 248, 257, 259, 264, 295, 297, 302, 303, 314, 335, 417, 531, 552, 553, 567, 568, 596, 602], "tpye": 178, "sum": [178, 264, 302, 555], "distillationconfig": [178, 335, 555, 556, 568, 591], "criterion_conf": 178, "d_conf": [178, 556, 568, 591], "intermediatelayersknowledgedistillationlossconfig": [178, 555], "relationship": 178, "student_layer_nam": 178, "student_layer_output_process": 178, "teacher_layer_nam": 178, "teacher_layer_output_process": 178, "desir": [178, 206, 210, 245, 248, 602], "either": [178, 260, 298, 572, 576, 591, 595, 596], "serv": [178, 311, 517], "numer": [178, 264, 302, 569, 594, 596], "abbrevi": 178, "layer_nam": 178, "l1": 178, "selfknowledgedistillationlossconfig": [178, 555, 568], "student1_layer_name1": 178, "teacher_layer_name1": 178, "student2_layer_name1": 178, "student1_layer_name2": 178, "teacher_layer_name2": 178, "student2_layer_name2": 178, "soft": 178, "l2": [178, 593], "hard": [178, 552], "resblock": 178, "featur": [178, 193, 194, 206, 210, 233, 234, 245, 248, 530, 534, 551, 552, 554, 555, 568, 569, 570, 571, 575, 576, 579, 588, 593, 594, 598, 602], "deepst": 178, "fc": 178, "02": [178, 600, 606], "crossentropyloss": [178, 212, 555, 568], "sgd": [178, 217, 555, 568, 595, 605], "lr": [178, 555, 557, 568], "learning_r": [178, 568, 595, 605], "callabl": [178, 262, 300, 335, 496, 500, 516, 517], "altern": [178, 314], "distil_loss": [178, 568], "mixedprecisionconfig": [178, 303, 333, 568, 569], "mixedprecis": [178, 265, 458, 506, 568], "fp16": [178, 330, 569, 596], "won": [178, 596], "work": [178, 255, 292, 533, 552, 555, 583, 586, 593, 597, 598, 600, 601], "mix_precis": [178, 294, 333, 568, 569], "converted_model": [178, 303, 568, 569], "exportconfig": 178, "dynamic_ax": [178, 253, 559], "qlinear": [178, 195, 202, 235, 242, 264, 302, 535, 559, 578, 606], "ax": [178, 253], "onnxqlinear2qdqconfig": 178, "onnxqlinear2qdq": 178, "new_model": 178, "torch2onnxconfig": [178, 559], "qdq_op_fp32_bia": [178, 253, 559], "torch2onnx": [178, 250, 256, 294], "qdq_op_int32_bia": [178, 253, 559], "qdq_op_fp32_bias_qdq": [178, 253, 559], "resnet50": [178, 534, 557, 562, 571, 575, 593, 596, 599, 606], "int8_onnx_config": [178, 559], "randn": [178, 559], "224": [178, 206, 245, 534, 552, 553, 557, 559, 562, 568, 571, 602, 605, 606], "batch_siz": [178, 183, 185, 191, 192, 193, 194, 213, 223, 225, 231, 232, 233, 234, 253, 532, 552, 553, 557, 559, 563, 568, 571, 596], "tf2onnxconfig": 178, "tf2onnx": [178, 250, 256, 294], "keyword": 178, "argument": [178, 333, 347, 455, 459, 464, 467, 473, 532], "output_graph": [178, 455, 459, 464, 467], "sigopt": [179, 180, 294, 594], "tpe": [179, 180, 294], "sigopttunestrategi": 181, "q_dataload": [181, 182, 315, 318, 319, 323, 326, 563, 603], "eval_func": [181, 182, 293, 303, 314, 315, 318, 319, 323, 326, 333, 335, 531, 552, 553, 555, 556, 557, 568, 596, 597, 603, 605], "q_hook": [181, 182, 315, 318, 319, 323, 326], "hpo": 181, "mandatori": [181, 182, 314, 568, 605], "yield": [181, 182, 191, 213, 231, 303, 314, 318, 333, 335, 552, 596, 603], "_": [181, 182, 314, 531, 532, 535, 550, 555, 557, 561, 567, 568, 569, 570, 571, 577, 581, 583, 585, 586, 590, 593, 596, 598, 599, 600, 601, 603, 605], "taken": [181, 182, 303, 314, 335, 596], "reserv": [181, 182], "abl": [181, 182, 303, 314, 335, 579, 588, 593, 596], "tuner": [181, 182, 255, 292, 303, 314, 335, 596], "scalar": [181, 182, 303, 314, 335, 567, 596], "pseudo": [181, 182, 314, 335, 601], "someth": [181, 182, 195, 235, 314, 335], "fefin": 182, "tpetunestrategi": 182, "basedatalod": [183, 223], "basedataload": [183, 188, 190, 223, 228, 230], "last_batch": [183, 185, 192, 213, 223, 225, 232], "rollov": [183, 185, 192, 213, 223, 225, 232], "collate_fn": [183, 185, 186, 213, 223, 225, 226, 553], "sampler": [183, 185, 187, 213, 223, 225, 227, 244, 256, 329, 557], "batch_sampl": [183, 185, 213, 223, 225], "num_work": [183, 185, 213, 223, 225, 568, 596], "pin_memori": [183, 185, 213, 223, 225], "shuffl": [183, 185, 213, 223, 225, 568, 596], "_generate_dataload": [183, 223], "default_col": [185, 225], "outer": [185, 225], "defaultdataload": [185, 192, 225, 232], "definit": [186, 191, 226, 231, 414, 427, 436, 485, 516], "style": [186, 200, 226, 240, 333, 530, 553, 563], "drop_last": [186, 191, 226, 231], "iterablefetch": [186, 226], "indexfetch": [186, 226], "base_dataload": [187, 227, 244, 256], "default_dataload": [187, 227, 244, 256], "fetcher": [187, 227, 244, 256], "mxnet_dataload": [187, 227, 244, 256], "onnxrt_dataload": [187, 227, 244, 256], "pytorch_dataload": [187, 227, 244, 256], "tensorflow_dataload": [187, 227, 244, 256], "mxnetdataload": [188, 228], "onnxrtbertdataload": [189, 229], "varient": [189, 229], "onnxrtdataload": [189, 229], "pytorchdataload": [190, 230], "data_sourc": [191, 231, 338], "__iter__": [191, 195, 231, 235, 552, 553, 568], "matter": [191, 231, 597], "iterablesampl": [191, 231], "squential": [191, 231], "your": [191, 193, 231, 233, 530, 550, 553, 557, 559, 565, 566, 568, 571, 574, 575, 576, 581, 582, 583, 585, 586, 588, 593, 599, 601, 603], "clear": [191, 231, 535, 561, 567, 568], "iterabledataset": [191, 195, 231, 235], "try": [191, 231, 531, 559, 593, 596, 600, 603], "indexdataset": [191, 231], "__getitem__": [191, 195, 210, 231, 235, 248, 553, 568], "__len__": [191, 195, 231, 235, 553], "retriev": [191, 231, 494], "sequentialsampl": [191, 231], "sequenti": [191, 231, 293, 315, 317, 603], "batchsampl": [191, 231], "tfdatadataload": [192, 232], "tensorflow1": [192, 232], "coupl": [192, 232], "satisfi": [192, 232, 565], "usag": [192, 232, 260, 266, 293, 298, 333, 500, 550, 553, 557, 558, 567, 571, 579, 590, 595, 602], "tf1": [192, 232, 570], "although": [192, 232, 599], "tensorflowbertdataload": [192, 232], "tensorflowmodelzoobertdataload": [192, 232], "zoo": [192, 210, 232, 248, 534, 558, 562, 606], "tensorflowdataload": [192, 232], "pytorchbertdataset": [193, 233], "model_typ": [193, 233, 430, 553], "construct": [193, 196, 197, 200, 208, 213, 215, 216, 218, 233, 236, 237, 240, 302, 307, 311, 338, 529, 553, 557, 593, 603], "tensordataset": [193, 233, 553], "repo": [193, 233, 528, 553, 558, 581, 583, 585, 586, 607], "easi": [193, 233, 292, 550, 552, 559, 568, 594, 596, 599], "load": [193, 209, 210, 233, 247, 248, 303, 311, 314, 344, 345, 473, 500, 552, 581, 585, 589, 595, 596, 600], "squad": [193, 210, 233, 248, 261, 262, 264, 299, 300, 302, 553, 567, 593, 602, 606], "distilbert": [193, 233, 534, 553, 594, 606], "xlnet": [193, 233, 553], "xlm": [193, 233, 553, 606], "101": [193, 233, 264, 302, 567, 600, 606], "2043": [193, 233], "2001": [193, 233], "onnxrtbertdataset": [193, 233], "data_dir": [193, 233, 553], "model_name_or_path": [193, 233, 553, 568, 576, 577], "max_seq_length": [193, 210, 233, 248, 553, 602], "do_lower_cas": [193, 209, 210, 233, 247, 248, 553, 602], "mrpc": [193, 233, 264, 302, 553, 567, 576, 593, 603, 606], "dynamic_length": [193, 233, 553], "shortcut": [193, 233, 553], "token": [193, 204, 207, 210, 233, 244, 246, 248, 256, 257, 258, 294, 295, 296, 341, 517, 550, 553, 567, 568, 599, 600, 602, 603], "longer": [193, 210, 233, 248, 553, 602], "truncat": [193, 210, 233, 248, 553, 602], "shorter": [193, 210, 233, 248, 553, 602], "lowercas": [193, 233, 553], "choic": [193, 233, 535, 550, 553, 567, 600], "qqp": [193, 233, 553, 567, 606], "qnli": [193, 233, 553, 567, 606], "rte": [193, 233, 553, 567, 606], "st": [193, 233, 553, 567], "cola": [193, 233, 553, 567, 606], "mnli": [193, 233, 553, 567, 606], "wnli": [193, 233, 553, 567, 606], "mobilebert": [193, 233, 553, 555, 606], "roberta": [193, 233, 553, 606], "uncas": [193, 210, 233, 248, 553, 602, 606], "load_and_cache_exampl": [193, 233], "cach": [193, 233, 430, 517, 560, 596], "convert_examples_to_featur": [193, 210, 233, 248], "max_length": [193, 233], "label_list": [193, 233, 264, 302], "output_mod": [193, 233], "classif": [193, 210, 233, 248, 264, 290, 302, 555, 559, 562, 567, 577, 593, 594], "pad_token": [193, 233], "pad_token_segment_id": [193, 233], "mask_padding_with_zero": [193, 233], "inputfeatur": [193, 210, 233, 248], "properti": [193, 233, 417, 566, 592], "input_id": [193, 210, 233, 248, 568], "vocabulari": [193, 209, 210, 233, 247, 248, 602], "attention_mask": [193, 233, 568], "usual": [193, 233, 555, 591, 596, 600], "NOT": [193, 233, 561, 565], "token_type_id": [193, 233, 568], "segment": [193, 233, 258, 260, 296, 298], "portion": [193, 233], "problem": [193, 233, 264, 302, 567, 569, 589], "regress": [193, 233], "seq_length": [193, 233], "tensorflowbertdataset": [193, 233], "label_fil": [193, 210, 233, 248, 553, 602], "tfrecord": [193, 194, 195, 233, 234, 235, 553], "guid": [193, 233, 531, 534, 553, 555, 565, 571, 579, 588, 607], "parsedecodebert": [193, 233], "tensorflowmodelzoobertdataset": [193, 194, 233, 234], "num_cor": [193, 194, 198, 233, 234, 238, 553], "28": [193, 194, 198, 233, 234, 238, 553, 606], "coco": [194, 201, 205, 234, 241, 260, 264, 298, 302, 567, 593], "parsedecodecoco": [194, 234], "cocorecorddataset": [194, 234], "interleav": [194, 234, 553], "parallel": [194, 234, 553, 568, 603], "cocoraw": [194, 234, 552, 553], "img_dir": [194, 234, 553], "val2017": [194, 234, 553], "anno_dir": [194, 234, 553], "annot": [194, 234, 260, 298, 333, 553, 567, 593], "instances_val2017": [194, 234, 553], "raw": [194, 198, 201, 234, 238, 241, 323, 562, 567, 603], "jpg": [194, 198, 200, 234, 238, 240, 553], "imag": [194, 195, 198, 200, 206, 210, 234, 235, 238, 240, 245, 248, 260, 298, 550, 553, 557, 559, 593, 595, 600, 601, 602, 606], "coconpi": [194, 234, 553], "npy_dir": [194, 234, 553], "npy": [194, 234, 553], "tensorflowdataset": [195, 235], "pytorchdataset": [195, 235], "mxnetdataset": [195, 235], "onnxrtqldataset": [195, 235], "onnxrtitdataset": [195, 235], "IT": [195, 202, 235, 242, 594], "pytorchmxnetwrapdataset": [195, 235], "datafunc": [195, 235], "pytorchmxnetwrapfunct": [195, 210, 235, 248], "framework_dataset": [195, 235], "convent": [195, 235, 260, 298, 555, 600], "imageclassifi": [195, 235], "choos": [195, 235, 550, 564, 565, 576, 598, 600, 603, 605], "tensorflow_itex": [195, 198, 200, 202, 235, 238, 240, 242, 595], "onnxrt_qdq": [195, 202, 235, 242, 595], "onnxrt_qlinearop": [195, 202, 210, 235, 242, 248, 595], "onnxrt_integerop": [195, 202, 210, 235, 242, 248, 595], "pytorch_ipex": [195, 202, 235, 242, 568, 595, 605], "pytorch_fx": [195, 202, 235, 242, 568, 595], "dataset_registri": [195, 235], "dataset_typ": [195, 235], "dataset_format": [195, 235], "data_format": [195, 206, 235, 245], "raw_imag": [195, 235], "overwrit": [195, 235, 581, 585], "download_url": [195, 235], "filenam": [195, 235, 345, 469, 493, 500, 553], "md5": [195, 235], "download": [195, 235, 421, 444, 445, 447, 448, 481, 550, 553, 565, 598], "address": [195, 235, 517, 529, 550, 569, 594], "gen_bar_updat": [195, 235], "bar": [195, 235, 534, 550, 588, 594], "check_integr": [195, 235], "fpath": [195, 235], "checksum": [195, 235], "calculate_md5": [195, 235], "chunk_siz": [195, 235], "cifar10": [195, 235, 553], "cifar100": [195, 235, 553], "otherwis": [195, 210, 235, 248, 529, 553, 583, 586, 595, 602], "www": [195, 235, 553, 606], "toronto": [195, 235, 553], "kriz": [195, 235, 553], "cifar": [195, 235, 553, 606], "tar": [195, 235, 553, 583, 586], "gz": [195, 235, 553, 583, 586], "manual": [195, 235, 553, 571, 577, 579, 582], "subset": [195, 198, 235, 238, 553], "internet": [195, 235, 550, 553], "put": [195, 235, 553, 555, 593], "again": [195, 235, 553, 597], "pytorchcifar10": [195, 235], "mxnetcifar10": [195, 235], "tensorflowcifar10": [195, 235], "pytorchcifar100": [195, 235], "mxnetcifar100": [195, 235], "tensorflowcifar100": [195, 235], "mnist": [195, 235, 553, 557], "modifi": [195, 222, 235, 479, 531, 550, 557, 561, 605], "nation": [195, 235, 529], "institut": [195, 235], "standard": [195, 210, 235, 248, 559, 567, 602, 603], "technologi": [195, 235, 568, 592], "fashionmnist": [195, 235, 553], "npz": [195, 235, 553], "idx1": [195, 235, 553], "ubyt": [195, 235, 553], "idx3": [195, 235, 553], "t10k": [195, 235, 553], "pytorchmnist": [195, 235], "mxnetmnist": [195, 235], "tensorflowmnist": [195, 235], "pytorchfashionmnist": [195, 235], "mxnetfashionmnist": [195, 235], "tensorflowfashionmnist": [195, 235], "imagefold": [195, 235, 553, 557, 568], "expect": [195, 235, 348, 470, 529, 530, 560, 588, 596, 603], "subfold": [195, 235], "belong": [195, 235, 253, 307, 596], "class_1": [195, 235, 553], "xxx": [195, 235, 530, 553, 568], "png": [195, 235, 553], "xxy": [195, 235, 553], "xxz": [195, 235, 553], "class_n": [195, 235, 553], "123": [195, 235, 553, 602], "nsdf3": [195, 235, 553], "asd932_": [195, 235, 553], "categori": [195, 235, 259, 297, 551, 553, 578], "mxnetimagefold": [195, 235], "tensorflowtfrecorddataset": [195, 235], "tensorflowimagerecord": [195, 235], "imagenet": [195, 198, 206, 235, 238, 245, 532, 550, 568, 577, 593, 601, 602, 605, 606], "000": [195, 235, 534, 553], "001": [195, 235, 553, 557, 600, 605], "099": [195, 235, 553], "tensorflowvocrecord": [195, 235], "pascal": [195, 235], "voc": [195, 235, 264, 302], "2012": [195, 235], "00000": [195, 235], "00004": [195, 235], "00001": [195, 235], "00003": [195, 235], "dummydataset": [196, 197, 236, 237], "127": [196, 197, 236, 237, 553, 596, 600], "float32": [196, 197, 210, 236, 237, 248, 260, 298, 535, 551, 553, 568, 596, 600, 602], "rang": [196, 197, 210, 236, 237, 248, 333, 335, 534, 535, 553, 555, 556, 557, 568, 591, 593, 596, 600, 602], "stand_norm": [196, 197, 236, 237, 553], "dummy_v2": [197, 237, 552, 553], "sparse_dummy_v2": [197, 237, 553], "label_shap": [197, 237, 553], "sparsedummydataset": [197, 237], "dense_shap": [197, 237, 553], "sparse_ratio": [197, 237, 553], "imagenetraw": [198, 238, 553], "data_path": [198, 238, 553], "image_list": [198, 238, 553], "img1": [198, 238, 553], "img2": [198, 238, 553], "imgx": [198, 238, 553], "val_map": [198, 238, 553], "txt": [198, 238, 550, 553, 565], "pytorchimagenetraw": [198, 238], "mxnetimagenetraw": [198, 238], "tensorflowimagenetraw": [198, 238], "inteltensorflow": [198, 200, 238, 240, 565], "tensorflowimagenetdataset": [198, 238], "onnxrtimagenetdataset": [198, 238], "bert_dataset": [199, 204, 239, 244, 256, 294], "coco_dataset": [199, 204, 239, 244, 256, 294], "dummy_dataset": [199, 204, 239, 244, 256, 294], "dummy_dataset_v2": [199, 204, 239, 244, 256, 294], "imagenet_dataset": [199, 204, 239, 244, 256, 294], "style_transfer_dataset": [199, 204, 239, 244, 256, 294], "styletransferdataset": [200, 240], "content_fold": [200, 240, 553], "style_fold": [200, 240, 553], "crop_ratio": [200, 240, 553], "resize_shap": [200, 240, 553], "256": [200, 206, 240, 245, 553, 557, 568, 602], "image_format": [200, 240, 553], "holder": [200, 240, 553], "labelbalancecocorecordfilt": [201, 241], "balanc": [201, 241, 592, 600], "labelbalancecocorawfilt": [201, 241], "tensorflowfilt": [202, 242], "onnxrtqlfilt": [202, 242], "onnxrtitfilt": [202, 242], "pytorchfilt": [202, 242], "mxnetfilt": [202, 242], "filter_registri": [202, 242], "filter_typ": [202, 242], "__call__": [202, 242], "coco_filt": [203, 204, 243, 244, 256, 294], "imagenet_transform": [204, 207, 244, 246, 256, 294], "parsedecodecocotransform": 205, "decod": [205, 206, 245, 257, 295, 567, 602], "quantizedinput": [206, 245, 602], "labelshift": [206, 245, 602], "label_shift": [206, 245, 602], "parsedecodeimagenet": [206, 245, 602], "proto": [206, 210, 245, 248, 602], "parsedecodeimagenettransform": [206, 245], "tensorflowresizecropimagenettransform": [206, 245], "random_crop": [206, 245, 602], "resize_sid": [206, 245, 602], "resize_method": [206, 245], "bilinear": [206, 210, 245, 248, 602], "random_flip_left_right": [206, 245, 602], "mean_valu": [206, 245, 602], "channels_last": [206, 245, 571], "subpixel": [206, 245], "rgb": [206, 245], "seri": [206, 245, 534, 565, 568, 602], "applic": [206, 245, 484, 515, 517, 550, 559, 571, 588, 594, 600, 601, 602], "crop": [206, 210, 245, 248, 553, 602], "flip": [206, 210, 245, 248, 602], "left": [206, 210, 245, 248, 550, 582, 588, 600, 602], "right": [206, 245, 260, 298, 529, 531, 550, 588, 600, 602], "std": [206, 210, 245, 248, 568, 602], "bilinearimagenettransform": [206, 245], "central_fract": [206, 245, 602], "875": [206, 245, 602], "fraction": [206, 245, 602], "onnxbilinearimagenettransform": [206, 245], "onnxresizecropimagenettransform": [206, 245], "std_valu": [206, 245], "229": [206, 245, 568, 606], "225": [206, 245, 568, 606], "resizewithaspectratio": [206, 245], "87": [206, 245, 606], "inter_pol": [206, 245], "cv2": [206, 245], "inter_area": [206, 245], "aspect": [206, 210, 245, 248, 602], "postprocess_cl": [208, 218, 568], "user_postprocess": [208, 218], "convert_to_unicod": [209, 247], "unicod": [209, 247], "assum": [209, 247, 260, 271, 298, 535, 561, 588], "utf": [209, 247], "load_vocab": [209, 247], "vocab_fil": [209, 210, 247, 248, 602], "convert_by_vocab": [209, 247], "vocab": [209, 247], "whitespace_token": [209, 247], "whitespac": [209, 247, 262, 300], "clean": [209, 247, 386, 530, 568], "piec": [209, 247, 257, 295, 559, 567], "fulltoken": [209, 247], "tokenzi": [209, 247], "basictoken": [209, 247], "punctuat": [209, 247, 257, 262, 295, 300], "lower": [209, 210, 247, 248, 262, 300, 319, 500, 556, 593, 594, 596, 600, 602, 603], "wordpiecetoken": [209, 247], "unk_token": [209, 247], "unk": [209, 247], "max_input_chars_per_word": [209, 247], "200": [209, 247, 531, 603], "wordpiec": [209, 210, 247, 248, 602], "concat_gener": [210, 248], "inc": [210, 248, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 393, 394, 395, 396, 529, 534, 571, 578, 588, 594, 595, 598], "tensorflowtransform": [210, 248], "mxnettransform": [210, 248], "pytorchtransform": [210, 248], "onnxrtqltransform": [210, 248], "onnxrtittransform": [210, 248], "transform_registri": [210, 248], "transform_typ": [210, 248], "basetransform": [210, 248], "tensorflowwrapfunct": [210, 248], "transform_func": [210, 248], "pytorchmxnettransform": [210, 248], "get_torchvision_map": [210, 248], "torchvis": [210, 248, 550, 558, 562, 571, 577], "composetransform": [210, 248], "transform_list": [210, 248, 602], "compos": [210, 248, 338, 602], "croptoboundingbox": [210, 248, 602], "offset_height": [210, 248, 602], "offset_width": [210, 248, 602], "target_height": [210, 248, 602], "target_width": [210, 248, 602], "box": [210, 248, 260, 264, 298, 302, 531, 550, 567, 571, 582, 588, 601, 602, 603], "coordin": [210, 248, 318, 602, 603], "top": [210, 248, 255, 264, 279, 284, 292, 302, 567, 588, 602], "corner": [210, 248, 535, 602], "horizont": [210, 248, 602], "mxnetcroptoboundingbox": [210, 248], "onnxrtcroptoboundingbox": [210, 248], "tensorflowcroptoboundingbox": [210, 248], "resizewithratio": [210, 248, 602], "min_dim": [210, 248, 602], "800": [210, 248, 602], "max_dim": [210, 248, 602], "1365": [210, 248, 602, 606], "constant_valu": [210, 248], "longest": [210, 248, 602], "side": [210, 248, 550, 553, 582, 600, 602], "doesn": [210, 248, 535, 557, 568, 589, 605], "exce": [210, 248, 602], "tensorflowresizewithratio": [210, 248], "perm": [210, 248, 602], "permut": [210, 248, 602], "tensorflowtranspos": [210, 248], "mxnettranspos": [210, 248], "pytorchtranspos": [210, 248], "randomverticalflip": [210, 248, 602], "randomli": [210, 248, 272, 318, 532, 600, 602, 603], "tensorflowrandomverticalflip": [210, 248], "randomhorizontalflip": [210, 248, 568, 602], "tensorflowrandomhorizontalflip": [210, 248], "toarrai": [210, 248, 602], "pil": [210, 248, 602], "casttftransform": [210, 248], "castonnxtransform": [210, 248], "castpytorchtransform": [210, 248], "centercroptftransform": [210, 248], "center": [210, 248, 533, 534, 565, 602, 603], "paddedcentercroptransform": [210, 248], "crop_pad": [210, 248], "resizetftransform": [210, 248], "nearest": [210, 248, 602], "bicub": [210, 248, 602], "resizepytorchtransform": [210, 248], "randomcroptftransform": [210, 248], "randomresizedcroppytorchtransform": [210, 248], "randomresizedcropmxnettransform": [210, 248], "randomresizedcroptftransform": [210, 248], "normalizetftransform": [210, 248], "rescal": [210, 248, 602], "deviat": [210, 248, 602], "broadcast": [210, 248, 557, 602], "rescalekeraspretraintransform": [210, 248], "rescaletftransform": [210, 248], "rescaletransform": [210, 248], "alignimagechanneltransform": [210, 248], "dim": [210, 248, 600, 602], "align": [210, 248, 529, 602], "w": [210, 248, 593, 600, 602], "must": [210, 248, 260, 298, 530, 531, 550, 551, 552, 565, 596, 602], "pytorchalignimagechannel": [210, 248], "tondarraytransform": [210, 248], "resizemxnettransform": [210, 248], "resizetransform": [210, 248], "cropresizetftransform": [210, 248], "boundari": [210, 248, 602], "area": [210, 248, 260, 298, 567, 602], "pytorchcropresizetransform": [210, 248], "mxnetcropresizetransform": [210, 248], "cropresizetransform": [210, 248], "centercroptransform": [210, 248], "mxnetnormalizetransform": [210, 248], "pytorchnormalizetransform": [210, 248], "normalizetransform": [210, 248], "randomcroptransform": [210, 248], "randomresizedcroptransform": [210, 248], "get_final_text": [210, 248], "pred_text": [210, 248], "orig_text": [210, 248], "project": [210, 248, 373, 396, 397, 421, 528, 529, 530, 594, 599, 603, 607], "squadexampl": [210, 248], "qas_id": [210, 248], "question_text": [210, 248], "doc_token": [210, 248], "orig_answer_text": [210, 248], "start_posit": [210, 248], "end_posit": [210, 248], "is_imposs": [210, 248], "simpl": [210, 248, 550, 565, 568, 599, 600, 603], "answer": [210, 248, 261, 262, 299, 300, 529, 593, 602, 606], "posit": [210, 248, 529, 550, 567, 571], "unique_id": [210, 248], "example_index": [210, 248], "doc_span_index": [210, 248], "token_to_orig_map": [210, 248], "token_is_max_context": [210, 248], "input_mask": [210, 248, 568], "segment_id": [210, 248, 568], "read_squad_exampl": [210, 248], "input_fil": [210, 248], "doc_strid": [210, 248, 602], "max_query_length": [210, 248, 602], "output_fn": [210, 248], "inputbatch": [210, 248], "collecttransform": [210, 248], "10833": [210, 248], "tfsquadv1posttransform": [210, 248], "n_best_siz": [210, 248, 602], "20": [210, 248, 592, 600, 602, 605, 606], "384": [210, 248, 602], "64": [210, 248, 532, 600, 602, 606], "max_answer_length": [210, 248, 602], "30": [210, 248, 558, 562, 564, 600, 602, 606], "nbest_predict": [210, 248, 602], "question": [210, 248, 261, 262, 299, 300, 529, 530, 535, 565, 571, 593, 600, 602, 606], "anoth": [210, 248, 257, 266, 295, 345, 555, 569, 581, 585, 602, 603], "long": [210, 248, 560, 602], "document": [210, 248, 333, 530, 540, 557, 569, 573, 583, 586, 587, 598, 602, 604], "chunk": [210, 248, 602], "tfmodelzoocollecttransform": [210, 248], "tfsquadv1modelzooposttransform": [210, 248], "squadv1": [210, 248, 602], "see": [210, 248, 257, 295, 529, 531, 533, 550, 566, 568, 581, 582, 585, 588, 589, 600, 601, 603, 606], "parsedecodevoctransform": [210, 248], "conf_fname_or_obj": [211, 220, 249, 255, 265, 266, 267, 268, 270, 279, 284, 292], "thei": [211, 333, 529, 555, 561, 567, 568, 569, 576, 590, 593], "command": [211, 335, 485, 493, 550, 557, 571, 573, 576, 581, 585, 589], "possibl": [211, 362, 550, 591, 593, 597, 603], "unnecessari": [211, 568], "tensorflowcrossentropyloss": 212, "pytorchcrossentropyloss": 212, "tensorflowsparsecategoricalcrossentropi": 212, "sparsecategoricalcrossentropyloss": 212, "setter": 213, "calib_dataload": [213, 293, 314, 531, 534, 552, 553, 562, 563, 567, 568, 596, 597], "reason": [213, 529, 552, 601, 603], "know": [213, 486, 557, 598], "known": [213, 318, 559, 568, 593, 601, 603], "open": [214, 256, 294, 338, 527, 529, 534, 550, 559, 560, 568, 583, 586, 589, 594], "metric_cl": [215, 302, 568], "user_metr": [215, 302], "alwai": [215, 260, 298, 302, 567, 568], "recommend": [215, 302, 535, 553, 559, 561, 579, 582, 587, 589, 593, 595, 603], "set_backend": 216, "tensorflowoptim": 217, "pytorchoptim": 217, "optimizer_registri": 217, "optimizer_typ": 217, "cross": [217, 264, 302, 563, 603], "tensorflowsgd": 217, "tensorflowadamw": 217, "tensorflow_addon": 217, "adamw": 217, "tensorflowadam": 217, "adam": [217, 605], "pytorchsgd": 217, "record_output": 219, "output_process": 219, "help": [219, 266, 362, 500, 570, 571, 577, 588, 603, 604], "get_activ": 219, "f": [222, 555, 557, 596, 600], "pickle_modul": 222, "pickle_protocol": 222, "_use_new_zipfile_seri": 222, "prepare_prun": 222, "opt": [222, 534, 576, 600], "tensorflowimagefold": 235, "qlinear2qdq": [250, 256, 294], "qlinearop": [251, 564, 579, 596], "check_model": 251, "modelproto": [251, 253, 303, 570], "onnx_qlinear_to_qdq": 251, "input_name_to_nod": 251, "destin": [251, 266], "tf_to_fp32_onnx": 252, "tf_to_int8_onnx": 252, "int8_model": [252, 253, 535], "update_weight_bia": 253, "fp32_onnx_path": [253, 254], "wegiht": 253, "set_data_typ": 253, "weight_typ": 253, "activation_typ": 253, "get_node_map": 253, "module_node_map": 253, "get_quantizable_onnx_op": 253, "quantize_nod": 253, "build_scale_map": 253, "int8_scale_info": 253, "scale_zp_dict": 253, "set_scale_info": 253, "int8_onnx_model": 253, "int8_onnx_path": 253, "recalculate_bia": 253, "recalcul": [253, 600], "remove_nodes_by_nam": 253, "sub_graph_with_int32_bia": 253, "a_info": 253, "b_info": 253, "bias_nam": 253, "int32": [253, 553], "nodeproto": 253, "_type_": 253, "qdq_fp32_bia": 253, "excut": 253, "qdq_int32_bia": 253, "qdq_fp32_bias_qdq": 253, "torch_to_fp32_onnx": 253, "do_constant_fold": 253, "verbos": [253, 318], "torch_to_int8_onnx": 253, "u8s8": 253, "optionl": 253, "onnx2numpy_dtyp": 254, "onnx_node_typ": 254, "dummydataread": 254, "dataread": 254, "achiev": [255, 292, 559, 567, 568, 591, 593, 594, 596, 601, 603], "across": [255, 265, 292, 303, 554, 568, 593, 600, 603], "variou": [255, 265, 292, 303, 564, 571, 595], "dl": [255, 265, 279, 284, 292, 303, 563, 575, 588, 594], "bring": [255, 292, 582, 596, 600], "unifi": [255, 292, 535, 552, 563, 564, 568, 570], "vari": [255, 279, 284, 292, 592, 600, 606], "roc": [255, 264, 279, 284, 292, 302], "flexibl": [255, 279, 284, 292, 555, 593], "via": [255, 279, 284, 292, 517, 529, 557, 564, 568, 571, 588, 593], "popular": [256, 294, 527, 534, 535, 555, 558, 559, 562, 568, 593, 596, 603, 604], "compress": [256, 279, 284, 294, 313, 335, 527, 534, 540, 555, 564, 568, 588, 590, 591, 593, 594, 596, 600, 604, 606], "techniqu": [256, 294, 527, 534, 564, 568, 571, 591, 593, 595, 596, 604, 605, 606], "bleu": [256, 258, 263, 294, 296, 301, 567], "bleu_util": [256, 263, 294, 301], "coco_label_map": [256, 263, 294, 301], "coco_tool": [256, 263, 294, 301], "evaluate_squad": [256, 263, 294, 301], "f1": [256, 261, 263, 264, 294, 299, 301, 302, 557, 567, 568, 599, 606], "basic_na": [256, 269, 294], "dyna": [256, 269, 294, 532, 564, 595], "nas_util": [256, 269, 294], "pruner_legaci": [256, 294], "gradient_sensit": [256, 275, 294], "group_lasso": [256, 275, 294], "pruning_recip": [256, 294], "tile_pattern": [256, 280, 281], "pytorch_prun": [256, 294], "logger": [256, 285, 294, 336, 339, 345, 481, 489], "prune_util": [256, 285, 294], "graph_optim": [256, 294, 421, 456, 460, 461, 481, 489, 505], "mixed_precis": [256, 294, 421, 456, 481, 489, 505, 568], "model_convers": [256, 294], "pruning_v2": [256, 294], "unicoderegex": [257, 295], "hoc": [257, 295], "hack": [257, 295], "recogn": [257, 295, 603], "nondigit_punct_r": [257, 295], "compil": [257, 295, 568, 592], "express": [257, 295, 529], "preced": [257, 295, 600], "digit": [257, 295, 594], "punct_nondigit_r": [257, 295], "symbol_r": [257, 295], "bleu_token": [257, 295], "mose": [257, 295], "smt": [257, 295], "mosesdecod": [257, 295], "mteval": [257, 295], "v14": [257, 295], "pl": [257, 295], "l954": [257, 295], "l983": [257, 295], "bilingu": [257, 295], "understudi": [257, 295], "qualiti": [257, 295], "machin": [257, 295, 360, 550, 559, 565, 574, 588, 594, 600, 601], "translat": [257, 258, 295, 296, 593, 603], "natur": [257, 295, 559], "approxim": [257, 258, 295, 296, 567], "glue": [257, 264, 295, 302, 553, 567, 568, 577], "word": [257, 295, 567, 593], "ngram": [257, 295, 567], "breviti": [257, 258, 295, 296, 567], "penalti": [257, 258, 295, 296, 567], "doe": [257, 295, 553, 567, 568, 598, 602], "beam": [257, 295, 567], "tensor2tensor": [258, 296], "bleu_hook": [258, 296], "compute_bleu": [258, 296], "reference_corpu": [258, 296], "translation_corpu": [258, 296], "max_ord": [258, 296], "use_bp": [258, 296], "against": [258, 296], "gram": [258, 296], "bleu_scor": [258, 296], "third": [260, 298, 550, 566], "parti": [260, 298, 566, 596], "pycocotool": [260, 298, 560, 565], "noth": [260, 298, 603], "thu": [260, 298, 568, 593, 596], "cannot": [260, 298, 488, 531, 559, 560, 569, 601], "jonathanhuang": [260, 298], "image_id": [260, 298, 567], "encod": [260, 298, 602], "invok": [260, 298], "groundtruth_dict": [260, 298], "exportgroundtruthtococo": [260, 298], "groundtruth_boxes_list": [260, 298], "groundtruth_classes_list": [260, 298], "max_num_class": [260, 298], "output_path": [260, 298], "detections_list": [260, 298], "exportdetectionstococo": [260, 298], "detection_boxes_list": [260, 298], "detection_scores_list": [260, 298], "detection_classes_list": [260, 298], "cocowrapp": [260, 298], "loadannot": [260, 298], "cocoevalwrapp": [260, 298], "agnostic_mod": [260, 298], "computemetr": [260, 298], "detection_typ": [260, 298], "bbox": [260, 298, 531, 567], "hold": [260, 298, 318, 553], "iou_typ": [260, 298], "iou_thr": [260, 264, 298, 302, 567], "map_point": [260, 264, 298, 302, 567], "cocoev": [260, 298], "mscoco": [260, 298], "Then": [260, 298, 550, 581, 583, 585, 586, 600, 603], "exportsingleimagegroundtruthtococo": [260, 298], "next_annotation_id": [260, 298], "category_id_set": [260, 298], "groundtruth_box": [260, 298], "groundtruth_class": [260, 298], "groundtruth_mask": [260, 298], "groundtruth_is_crowd": [260, 298], "ingest": [260, 298], "ones": [260, 298, 593], "exportsingleimagedetectionstococo": [260, 298], "uniqu": [260, 293, 298, 387, 388, 596], "assign": [260, 298, 345, 550, 557, 595], "num_gt_box": [260, 298], "num_detect": [260, 264, 298, 302, 567, 568, 605], "image_height": [260, 298], "image_width": [260, 298], "detection_mask": [260, 298], "crowd": [260, 298], "insid": [260, 298, 555, 556, 589, 593, 603], "exportsingleimagedetectionboxestococo": [260, 298], "detection_box": [260, 298, 568, 605], "detection_scor": [260, 298, 568, 605], "detection_class": [260, 298, 568, 605], "exporsingleimagedetectionboxestococo": [260, 298], "exportsingleimagedetectionmaskstococo": [260, 298], "allenai": [261, 262, 299, 300], "bi": [261, 262, 299, 300], "att": [261, 262, 299, 300], "flow": [261, 262, 299, 300, 531, 532, 568], "f1_score": [261, 262, 299, 300], "ground_truth": [261, 262, 299, 300], "ground": [261, 262, 299, 300], "truth": [261, 262, 299, 300], "metric_max_over_ground_truth": [261, 262, 299, 300], "metric_fn": [261, 262, 299, 300], "exact_match_scor": [261, 299], "exact": [261, 299], "averag": [261, 262, 264, 299, 300, 302, 567, 568, 603], "articl": [261, 262, 299, 300], "paragraph": [261, 262, 299, 300], "qa": [261, 262, 299, 300], "cantain": [261, 262, 299, 300], "normalize_answ": [262, 300], "extra": [262, 300, 568], "newlin": [262, 300], "tab": [262, 300, 398, 516, 588, 601], "harmon": [262, 264, 300, 302], "recal": [262, 264, 300, 302], "answer_start": [262, 300], "177": [262, 300], "denver": [262, 300], "bronco": [262, 300], "nfl": [262, 300], "team": [262, 300, 529, 597], "afc": [262, 300], "super": [262, 300, 532], "bowl": [262, 300], "50": [262, 300, 532, 600, 606], "56be4db0acb8001400a502ec": [262, 300], "form": [262, 300, 550, 555, 588], "percentag": [262, 300, 605], "tensorflowmetr": [264, 302], "maintain": [264, 302, 529, 530, 534, 570, 571, 583, 586, 593, 598], "pytorchmetr": [264, 302], "mxnetmetr": [264, 302], "onnxrtqlmetr": [264, 302], "onnxrtitmetr": [264, 302], "metric_registri": [264, 302], "metric_typ": [264, 302], "decorator_metr": [264, 302], "basemetr": [264, 302], "single_output": [264, 302], "hvd": [264, 302, 557], "wrappytorchmetr": [264, 302], "wrapmxnetmetr": [264, 302], "wraponnxrtmetr": [264, 302], "proport": [264, 302], "were": [264, 302, 574, 593], "pred_list": [264, 302], "pytorchloss": [264, 302], "mae": [264, 302, 567], "compare_label": [264, 302, 567], "actual": [264, 302, 557, 600], "rmse": [264, 302, 567, 603], "squar": [264, 302, 323, 567, 600, 603], "tensorflowtopk": [264, 302], "k": [264, 302, 567, 593], "among": [264, 302, 582, 600], "outcom": [264, 302], "num_correct": [264, 302], "num_sampl": [264, 302], "generaltopk": [264, 302], "cocomapv2": [264, 302, 567], "anno_path": [264, 302, 567], "map_kei": [264, 302], "detectionboxes_precis": [264, 302], "output_index_map": [264, 302, 567], "tensorflowmap": [264, 302], "tensorflowcocomap": [264, 302], "tensorflowvocmap": [264, 302], "squadf1": [264, 302, 567], "miou": [264, 302], "num_class": [264, 302], "21": [264, 302, 576, 577, 594, 600, 606], "iou": [264, 302], "intersect": [264, 302, 535, 567], "union": [264, 302, 335, 567], "onnxrtglu": [264, 302], "dlrm": [264, 302], "modelconvers": 266, "typic": [266, 293, 532, 534, 556, 558, 562, 593, 606], "basicna": 267, "model_build": [267, 270], "conf_fnam": 267, "nasbas": [270, 532], "nas_registri": 271, "nas_method": 271, "create_search_space_pool": 271, "idx": [271, 553], "enumer": [271, 335, 349, 450, 456, 482, 535, 555, 556, 557, 568, 591, 593, 601], "find_pareto_front": 271, "pareto": [271, 532], "front": [271, 532], "n_point": 271, "n_metric": 271, "n_pareto_point": 271, "gridsearch": 272, "grid": [272, 532], "whole": [272, 515, 550, 596], "randomsearch": 272, "42": [272, 592, 606], "bayesianoptimizationsearch": 272, "gradientsensitivityprun": 273, "pytorchmodel": [273, 274, 276, 277, 278, 312], "overwritten": [273, 274, 276, 277, 278, 576], "grouplassoprun": 274, "legaci": 275, "basicmagnitudeprun": 276, "lock": [277, 278, 564, 591, 593], "pruner_registri": 278, "clase": 278, "pruningconf": [279, 284], "tfpruningcallback": [279, 284], "input_model": [279, 284, 570, 601], "pure": [279, 284, 569, 593], "pattern_registri": 282, "pattern_typ": 282, "patternbas": 282, "mask_shap": [282, 283], "is_contigu": 282, "tile": 283, "tilepatternbas": 283, "tilepattern_1x1": 283, "1x1": [283, 555, 568, 593], "tilepattern_2x2": 283, "2x2": [283, 600], "tilepattern_1x16": 283, "1x16": 283, "tilepattern_4x1": 283, "tilepattern_1x2": 283, "1x2": [283, 600], "reset_non_value_to_default": 288, "obejct": 288, "parse_not_to_prun": 288, "update_frequency_on_step": [289, 595], "max_sparsity_ratio_per_lay": [289, 595], "magnitudeprun": 289, "snipprun": 289, "snipmomentumprun": 289, "moreoev": 289, "least": [290, 568, 593, 603], "templat": [290, 294, 481, 489, 550, 568, 593], "tree": [290, 330], "huggingface_model": 290, "eager": [290, 347, 455, 459, 467, 557, 564, 596, 597, 601, 606], "config_file_path": 290, "pruner_info": 290, "quantconf": [292, 303], "server": [293, 294, 421, 428, 480, 481, 488, 489, 497, 500, 511, 513, 515, 550, 588], "seper": 293, "opt_model": [293, 568], "fulli": [293, 568, 596, 600], "train_func": [293, 335, 557, 568, 596], "experiment": [294, 532, 553, 556, 557, 559, 568, 593, 595, 598, 602], "base_model": [294, 305], "keras_model": [294, 305], "mxnet_model": [294, 305], "nets_factori": [294, 305], "onnx_model": [294, 305], "tensorflow_model": [294, 305], "torch_model": [294, 305], "tuning_sampl": [294, 322, 328], "tuning_spac": [294, 322, 328, 329, 331], "tuning_struct": [294, 322, 328, 329, 330], "auto_mixed_precis": [294, 322], "collect_layer_histogram": [294, 339], "create_obj_from_config": [294, 339], "kl_diverg": [294, 339], "load_huggingfac": [294, 339, 568], "ux": 294, "config_gener": [294, 421, 481], "configuration_wizard": [294, 421, 481], "db_manag": [294, 421, 481], "file_brows": [294, 421, 481], "jobs_manag": [294, 421, 481], "model_zoo": [294, 421, 481], "names_mapp": [294, 421, 481], "profil": [294, 373, 380, 395, 397, 398, 421, 481, 482, 492, 515, 520], "manage_workspac": [294, 421, 481], "workload": [294, 360, 481, 489, 500, 515, 520, 521, 594], "except": [294, 333, 345, 481, 489, 500, 515], "executor": [294, 348, 481, 489], "expiring_dict": [294, 481, 489], "github_info": [294, 481, 489], "hw_info": [294, 481, 489], "json_seri": [294, 481, 489], "proc": [294, 481, 489], "status_upd": [294, 481, 489], "yaml_util": [294, 481, 489], "web": [294, 480, 481, 534, 550, 601], "servic": [294, 481, 514, 515, 534, 588, 592], "commun": [294, 481, 515, 517, 529, 550], "router": [294, 481, 515], "inc_bench": [294, 481, 550, 562], "eval_metr": [303, 314, 335, 596], "frozen": [303, 311, 314, 437, 440, 550, 570], "savedmodel": [303, 311, 314, 606], "chould": 303, "onnx_ml_pb2": [303, 570], "hybirdblock": [303, 314], "paramt": [303, 335], "_mixedprecis": 303, "basemodel": 304, "plai": [304, 593, 594, 600], "role": [304, 593, 600], "kerasmodel": [306, 439], "get_model_fwk_nam": 307, "fwk": 307, "mxnetmodel": 308, "net": 309, "factori": [309, 402, 421, 456, 472, 477, 481, 492, 496], "tfslimnetsfactori": 309, "onnxmodel": 310, "get_model_typ": [311, 430], "validate_graph_nod": 311, "validate_and_inference_input_output": 311, "input_tensor_nam": 311, "output_tensor_nam": 311, "graph_sess": 311, "graph_def_sess": 311, "frozen_pb_sess": 311, "load_saved_model": 311, "saved_model_tag": 311, "signatur": 311, "saved_model_dir": 311, "tag": [311, 500, 600, 601], "metagraphdef": 311, "keras_sess": 311, "slim_sess": 311, "checkpoint_sess": 311, "estimator_sess": 311, "saved_model_sess": 311, "tensorflowbasemodel": 311, "tensorflowsavedmodelmodel": 311, "tensorflowqatmodel": 311, "tensorflowcheckpointmodel": 311, "checkpoint": [311, 344, 570], "tensorflowmodel": [311, 441], "pytorchbasemodel": 312, "pytorchfxmodel": 312, "ipexmodel": 312, "driven": [313, 534, 568, 569, 588, 590, 601], "objective_registri": 313, "objective_custom_registri": 313, "obj_cl": 313, "eural_compressor": 313, "objective_cl": 313, "user_object": 313, "__class__": 313, "__name__": 313, "objective_cfg": 313, "usr_cfg": 313, "user_obj_cfg": 313, "easili": [313, 535, 572, 576, 588, 590, 593, 600], "peak": [313, 590], "multiobject": [313, 510], "metric_criterion": 313, "metric_weight": 313, "obj_criterion": 313, "obj_weight": 313, "is_measur": 313, "calib_func": [314, 597], "entir": [314, 335, 531, 593, 600], "autotunestrategi": 315, "stage": [315, 317, 324, 555, 601, 603], "polici": [315, 317, 323, 529, 534, 592, 605, 607], "automixedprecisiontunestrategi": 316, "basictunestrategi": 317, "bayesiantunestrategi": 318, "acq_max": 318, "ac": 318, "gp": 318, "y_max": 318, "n_warmup": 318, "10000": 318, "n_iter": 318, "acquisit": 318, "gaussian": [318, 603], "relev": 318, "limit": [318, 345, 534, 555, 593, 601], "acq": 318, "randomst": 318, "scipi": 318, "x_max": 318, "targetspac": 318, "pbound": 318, "9527": [318, 568, 605], "allow": [318, 517, 550, 555, 557, 567, 568, 569, 595, 603, 605], "bayesianoptim": 318, "conservativetunestrategi": 319, "o0": [319, 603], "who": [319, 529], "exhaustivetunestrategi": 320, "hawq_v2tunestrategi": 321, "made": [321, 535, 596, 598, 603], "impact": [321, 598, 603], "msetunestrategi": 323, "mse_v2tunestrategi": 324, "revert": [324, 332, 603], "randomtunestrategi": 325, "strategy_registri": [326, 603], "tunestrategi": [326, 603], "tuningsamplerregistri": 329, "tuningsampl": 329, "tuningord": 329, "Not": [329, 330, 345, 484, 532], "tuningspac": [329, 330], "tuning_order_lst": 329, "initial_op_tuning_cfg": 329, "modelwisetuningsampl": 329, "tuning_items_prior": 329, "op_dtype_dict": 329, "optuningconfig": [329, 330, 331], "optypewisetuningsampl": 329, "opwisetuningsampl": 329, "fallbacktuningsampl": 329, "op_dtyp": 329, "accumul": [329, 603], "skip_first": 329, "blockfallbacktuningsampl": 329, "op_block_lst": 329, "target_dtyp": 329, "tuningitem": 330, "item_typ": 330, "get_op_mode_by_query_ord": 330, "query_ord": 330, "pattern_to_intern": 330, "default_dtyp": 330, "pattern_to_path": 330, "quant_mode_from_pattern": 330, "internal_pattern": 330, "initial_tuning_cfg_with_quant_mod": 330, "op_name_typ": 330, "step1": 330, "step2": 330, "complet": [330, 535, 550, 596, 603, 605, 606], "step3": 330, "step4": 330, "step5": 330, "op_quant_mod": 331, "ordereddefaultdict": 332, "extract_data_typ": 332, "data_typ": 332, "sign": [332, 530, 550, 596, 599], "reverted_data_typ": 332, "signed_flag": 332, "get_adaptor_nam": 332, "fun": 333, "attribute1": 333, "module_debug_level1": 333, "debug": [333, 342, 402, 403, 407, 550, 581, 585, 589, 603], "function1": 333, "param1": 333, "param2": 333, "parameter1": 333, "parameter2": 333, "o": [333, 409, 565, 573, 592, 600], "function2": 333, "pep": 333, "484": 333, "output_model": [333, 552, 568, 601], "function3": 333, "section": [333, 550, 555, 556, 588, 593, 595, 605], "restructuredtext": 333, "liter": 333, "attributeerror": 333, "generator1": 333, "example_gener": 333, "exampleclass": 333, "param3": 333, "public": [333, 529, 583, 586], "attr1": 333, "attr2": 333, "attr5": 333, "api_doc_exampl": 334, "loop": [335, 531, 532, 561, 599, 603], "compressionmanag": 335, "callbacks_list": 335, "uesd": 335, "deal": 335, "Such": 335, "distillationcallbback": 335, "on_train_begin": [335, 531, 555, 556, 568, 591, 593, 596], "train_loop": [335, 568, 591], "on_epoch_begin": [335, 338, 555, 556, 568, 591, 593], "on_step_begin": [335, 338, 555, 556, 568, 591, 593], "on_after_compute_loss": [335, 555, 556, 568, 591], "backward": [335, 555, 556, 557, 568, 591, 593, 596, 598], "on_before_optimizer_step": [335, 555, 556, 568, 591, 593], "on_step_end": [335, 338, 555, 556, 568, 591, 593], "on_epoch_end": [335, 338, 555, 556, 568, 591, 593], "on_train_end": [335, 555, 556, 568, 591, 593, 596], "path_to_sav": 335, "manag": [335, 338, 364, 399, 422, 483, 499, 562, 568, 571, 572, 582], "summari": [335, 550, 583, 586, 592, 601], "pruningconfig": 335, "orchestr": [335, 534, 564, 604], "layerhistogramcollector": 336, "layer_tensor": 336, "include_lay": 336, "get_func_from_config": 338, "func_dict": 338, "get_preprocess": 338, "get_metr": 338, "get_postprocess": 338, "get_algorithm": 338, "algo": 338, "create_dataset": 338, "cfg_preprocess": 338, "cfg_filter": 338, "create_dataload": 338, "dataloader_cfg": 338, "create_eval_func": 338, "postprocess_cfg": 338, "fp32_baselin": [338, 535], "baselin": [338, 599, 601], "create_train_func": 338, "train_cfg": 338, "Their": 338, "auxiliari": 339, "pretrain": [341, 571, 577], "optimizedmodel": 341, "from_pretrain": [341, 568], "save_for_huggingface_upstream": [341, 568], "output_dir": [341, 493, 568, 576, 577], "msg": 342, "fatal": 342, "warn": [342, 550], "warin": 342, "alia": [342, 573, 578], "is_int8_model": 344, "checkpoint_dir": 344, "history_cfg": 344, "best_configur": 344, "best_model_weight": 344, "pt": [344, 570, 594, 597], "snapshot": [344, 519], "cfg_from_fil": 345, "yaml_fil": [345, 553, 557, 567], "lazyimport": 345, "lazi": 345, "till": [345, 603], "decorat": 345, "time_limit": 345, "get_siz": [345, 500], "seen": [345, 535], "recurs": 345, "compute_spars": 345, "fault_tolerant_fil": 345, "equal_dict": 345, "d2": 345, "compare_kei": 345, "ignore_kei": 345, "ignor": [345, 553, 600], "cpuinfo": 345, "dump_elapsed_tim": [345, 535], "customized_msg": 345, "elaps": 345, "combine_histogram": 345, "old_hist": 345, "old": [345, 568, 598], "get_tensor_histogram": 345, "get_all_fp32_data": 345, "get_tuning_histori": 345, "tuning_history_path": [345, 469], "num": [345, 567], "str2arrai": 345, "dequantizeweight": 345, "weight_tensor": 345, "min_filter_tensor": 345, "max_filter_tensor": 345, "scale_info": 345, "captureoutputtofil": 345, "tmp_file_path": 345, "stream": 345, "sy": [345, 574], "stderr": 345, "captur": 345, "statist": 345, "header": [345, 560], "field_nam": 345, "output_handl": 345, "printer": 345, "global_st": 345, "load_data_from_pkl": 345, "pkl": 345, "dump_data_to_loc": 345, "show_memory_info": 345, "hint": 345, "project_data": [346, 453, 458, 462, 465, 468, 475], "benchmark_data": 346, "dataloaderinterfac": [346, 462, 475], "dataloader_data": [346, 462, 475], "parse_arg": [347, 455, 459, 464, 467, 473], "benchmark_mod": 347, "set_eager_execut": [347, 455, 459, 467], "request_id": [348, 451, 469, 470, 493], "asd": [348, 470], "benchmark_id": 348, "benchmark_result_upd": 348, "benchmark_result_update_pytorch_script": 348, "neural_coder_perform": 348, "neural_coder_tim": 348, "pytorch_script_bench_optim": 348, "command_line_of_script": 348, "pytorch_script_bench_original_model": 348, "execute_real_benchmark": 348, "project_detail": [348, 451, 470], "benchmark_detail": 348, "benchmark_model": [349, 421, 481], "execute_benchmark": [349, 421, 481], "benchmarkconfiggener": 350, "configgener": 351, "workload_directori": 351, "configuration_path": 351, "graphoptimizationconfiggener": 352, "benchmark_config_gener": [353, 421, 481], "graph_optimization_config_gener": [353, 421, 481], "mixed_precision_config_gener": [353, 421, 481], "profiling_config_gener": [353, 421, 481], "pruning_config_gener": [353, 421, 481], "quantization_config_gener": [353, 421, 481], "mixedprecisionconfiggener": 354, "profilingconfiggener": 355, "pruningconfiggener": 356, "quantizationconfiggener": 357, "configurationpars": 358, "parse_list_valu": 358, "required_typ": 358, "parse_multidim_list": 358, "dimension": 358, "normalize_string_list": 358, "string_list": 358, "bracket": 358, "miss": [358, 593, 596], "get_predefined_configur": 360, "update_config_to_machine_specif": 360, "configuration_pars": [361, 421, 481], "get_boundary_nod": [361, 421, 481], "get_configur": [361, 421, 481], "params_feed": [361, 421, 481], "pruning_config_pars": [361, 421, 481], "feeder": 362, "get_possible_valu": 362, "pruningconfigpars": 363, "bench": [364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 393, 394, 395, 396, 451, 480, 571], "dbmanag": 364, "database_loc": 364, "log_level": [364, 491], "benchmarkresult": 366, "fill_dictionari": [367, 369, 370, 372, 374, 377, 378, 383], "fill": [367, 369, 370, 372, 374, 377, 378, 383, 550, 588, 599, 602], "domainflavour": [370, 482], "db": [370, 398, 399], "benchmark_result": [373, 397, 421], "domain_flavour": [373, 397, 421, 427, 500], "optimization_typ": [373, 397, 421], "profiling_result": [373, 397, 421], "pruning_detail": [373, 397, 421], "tuning_detail": [373, 397, 421], "tuning_histori": [373, 397, 421, 456, 481], "optimizationtyp": [377, 482], "profilingresult": 380, "pruningdetail": 382, "tuningdetail": [384, 468], "tuninghistori": [385, 469], "benchmarkapiinterfac": 386, "before_delete_benchmark_entri": 386, "mapper": [386, 449, 450], "sqlite3": 386, "db_model": [386, 397, 421, 481], "datasetapiinterfac": 387, "set_database_vers": [387, 388], "version_num": [387, 388], "alembic_vers": [387, 388], "initialize_associ": [387, 388], "initialize_precision_optimization_types_associ": [387, 388], "search_in_list_of_dict_for_unique_valu": [387, 388], "list_of_dict": [387, 388], "search_in_list_of_dict": [387, 388], "diagnosisapiinterfac": 389, "dictionariesapiinterfac": 390, "dictonari": 390, "examplesapiinterfac": 391, "predefin": [391, 500], "benchmark_api_interfac": [392, 397, 421], "dataset_api_interfac": [392, 397, 421], "diagnosis_api_interfac": [392, 397, 421], "dictionaries_api_interfac": [392, 397, 421], "examples_api_interfac": [392, 397, 421], "model_api_interfac": [392, 397, 421], "optimization_api_interfac": [392, 397, 421], "profiling_api_interfac": [392, 397, 421], "project_api_interfac": [392, 397, 421], "modelapiinterfac": 393, "optimizationapiinterfac": 394, "profilingapiinterfac": 395, "projectapiinterfac": 396, "db_oper": [397, 421, 481], "params_interfac": [397, 421, 481], "modeladdparamsinterfac": 398, "datasetaddparamsinterfac": 398, "optimizationaddparamsinterfac": 398, "optimizationeditparamsinterfac": 398, "edit": [398, 529], "benchmarkaddparamsinterfac": 398, "benchmarkeditparamsinterfac": 398, "profilingaddparamsinterfac": 398, "profilingeditparamsinterfac": 398, "profilingresultaddparamsinterfac": 398, "tuninghistoryiteminterfac": 398, "tuninghistoryinterfac": 398, "diagnosisoptimizationparamsinterfac": 398, "update_dataloaders_param": 399, "framework_id": 399, "dataloaders_to_upd": 399, "framework_dataloaders_config": 399, "get_framework_dataloaders_config": 399, "get_framework_transforms_config": 399, "diagnosisfactori": 401, "onnx_diagnosi": [402, 421, 481], "onnxrt_diagnosi": [402, 403, 421], "tensorflow_diagnosi": [402, 421, 481], "op_detail": [402, 421, 481], "op_entri": [402, 421, 481], "onnxrtdiagnosi": 404, "opdetail": 405, "oppattern": 405, "pattern_data": 405, "opweight": 405, "weights_data": 405, "opactiv": 405, "op_activ": 405, "opentri": 406, "activation_min": 406, "activation_max": 406, "tensorflowdiagnosi": 408, "browser": [409, 550, 581, 585], "get_directory_entri": 409, "get_requested_path": 409, "request": [409, 421, 422, 423, 444, 445, 448, 469, 481, 512, 514, 517, 524, 550, 596], "get_non_hidden_directory_entri": 409, "create_dir_entri": 409, "direntri": 409, "create_file_entri": 409, "create_entri": 409, "is_directori": 409, "sort_entri": 409, "should_show_fil": 409, "should_show_only_model_fil": 409, "get_setting_valu": 409, "get_filter_valu": 409, "filter_requested_entri": 409, "filter_nam": 409, "is_directory_entri": 409, "is_model_or_directory_entri": 409, "shown": [409, 532, 550, 552, 555, 567, 568, 582, 590, 591, 600, 603], "is_dataset_or_directory_entri": 409, "brows": 410, "filesystem": [410, 500], "attribute_typ": 411, "expanded_group": 412, "reader": [415, 416, 421, 481], "graphread": 415, "onnxrt_read": [416, 418, 421], "tensorflow_read": [416, 418, 421], "collaps": [416, 421, 481, 550], "edg": [416, 421, 481, 602], "graph_read": [416, 421, 481], "highlight": [417, 531, 550], "groupnod": 417, "group_nam": 417, "onnxrtread": 419, "tensorflowread": 420, "jobs_control_queu": [421, 422, 481], "frozen_pb": [421, 428, 438], "meta_graph": [421, 428, 438], "model_type_gett": [421, 428, 481], "repositori": [421, 426, 428, 481, 487, 583, 586], "download_config": [421, 447, 481], "download_model": [421, 447, 481], "list_model": [421, 447, 481], "optimize_model": [421, 454, 456, 457, 460, 463], "neural_coder_optim": [421, 456, 481], "tune_model": [421, 456, 466], "execute_optim": [421, 456, 481], "tensorflow_profil": [421, 472, 481], "execute_profil": [421, 472, 481], "profile_model": [421, 472, 481], "job": [422, 496], "_jobscontrolqueu": 423, "queu": 423, "jobsmanag": 423, "_jobsmmanag": 424, "_job": 424, "get_default_path": 426, "getter": 430, "onnxrtmodel": 432, "remove_number_of_samples_from_shap": 432, "pytorchscriptmodel": 434, "modelrepositori": 435, "trust": [436, 550], "frozenpbmodel": 437, "metagraphmodel": 440, "metagraph": 440, "savedmodelmodel": 442, "get_input_shap": 443, "fix_dynamic_shap": 443, "get_available_model": 448, "check_vers": 448, "framework_vers": 448, "supported_vers": 448, "validate_model_list": 448, "model_list": 448, "get_framework_module_nam": 448, "framework_nam": [448, 488], "get_installed_framework": 448, "instal": [448, 557, 560, 562, 571, 573, 576, 579, 583, 586, 588, 589, 592, 607], "mappingdirect": 450, "namesmapp": 450, "execute_optimization_pytorch_script": 451, "optimization_id": 451, "execute_optimization_regular": 451, "parse_model_data_to_bench_nam": 451, "parse_log": 451, "optimization_detail": 451, "check_if_collect_tuning_histori": 451, "optimizationfactori": 452, "graphoptim": [453, 504], "optimization_data": [453, 458, 462, 465, 468], "dataset_data": [453, 458, 462, 465, 468], "optimize_graph": [455, 459], "optimize_graph_config": [455, 459], "optimize_pt_script": 461, "optimizationinterfac": 462, "optimization_workdir": 469, "watcher": 469, "send": [469, 512, 517, 530], "profiling_id": 470, "execute_real_profil": 470, "profiling_detail": 470, "profilerfactori": [471, 476], "load_profiling_detail": 473, "json_path": 473, "profiling_data": [475, 478], "delete_assign": 479, "wsgi": 480, "prepare_environ": 480, "app": [481, 515], "workdir": [481, 489, 497], "history_snapshot_pars": [481, 515, 520], "request_data_processor": [481, 515, 520], "response_gener": [481, 515, 520], "flavour": 482, "executionstatu": 482, "status": 482, "notfoundexcept": 484, "accessdeniedexcept": 484, "deni": 484, "clienterrorexcept": 484, "internalexcept": 484, "subject": [485, 512, 566], "send_respons": 485, "log_nam": 485, "additional_log_nam": [485, 493], "shell": [485, 493, 601], "expir": 486, "expiringdictitem": 486, "expires_at": 486, "expiringdict": 486, "initial_valu": 486, "ttl": 486, "120": [486, 600], "githubinfo": 487, "hw": 488, "hwinfo": 488, "respons": [488, 492, 499, 512, 517, 525, 596], "platform": [488, 534, 564, 571, 579, 594, 596, 606], "hardwar": [488, 530, 534, 535, 555, 564, 568, 569, 588, 592, 593, 594, 595], "get_number_of_socket": 488, "get_distribut": 488, "distibut": 488, "get_bios_vers": 488, "bio": [488, 592], "is_turbo_boost_en": 488, "turbo": [488, 592], "boost": [488, 569, 572, 588, 594], "get_kernel_vers": 488, "get_framework_info": 488, "get_framework_dependency_info": 488, "subdepend": 488, "jsonseri": 490, "serializ": 490, "change_log_level": 491, "optimizationpars": 492, "performancepars": 492, "accuracypars": 492, "benchmarkparserfactori": 492, "profilingpars": 492, "pid": 493, "ncprocess": 494, "aggreg": 494, "get_status_update_funct": 496, "job_typ": 496, "sent": 498, "deprec": [500, 583, 586, 602], "func": [500, 517, 596, 605], "signal": 500, "is_hidden": 500, "get_dataset_path": 500, "get_framework_from_path": 500, "get_file_extens": 500, "is_dataset_fil": 500, "get_predefined_config_path": 500, "normalize_domain": 500, "underscor": 500, "normalize_framework": 500, "normalize_str": 500, "string_to_norm": 500, "get_model_zoo_config_path": 500, "model_dict": 500, "get_model_zoo_model_path": 500, "check_modul": 500, "get_module_vers": 500, "mb": 500, "add_unit": 500, "load_model_config": 500, "load_dataloader_config": 500, "load_transforms_config": 500, "load_transforms_filter_config": 500, "meaning": [500, 568, 591], "load_precisions_config": 500, "load_pruning_details_config": 500, "get_default_pruning_config_path": 500, "load_model_wise_param": 500, "load_metrics_config": 500, "get_metrics_dict": 500, "load_help_nc_param": 500, "replace_with_valu": 500, "file_path": 500, "verify_file_path": 500, "determine_ip": 500, "ip": 500, "is_development_env": 500, "nc_mode": 500, "filter_transform": 500, "parse_bool_valu": 500, "release_tag": 500, "releas": [500, 534, 565, 577, 579, 581, 585, 587, 607], "get_shape_from_transform": 500, "shape_elements_ord": 500, "get_height_width_from_s": 500, "parse_to_string_list": 500, "parse_to_float_list": 500, "export_to_csv": 500, "csv": [500, 532, 550], "parse_vers": 500, "string_vers": 500, "are_archive_filenames_valid": 500, "archiv": 500, "malici": 500, "safe_extract_arch": 500, "zipfil": 500, "tarfil": 500, "destination_dir": 500, "member": [500, 529, 535], "safe": [500, 530], "labelbal": [502, 552, 553], "postprocessschema": 503, "sgdoptim": 508, "adamwoptim": 508, "adamoptim": 508, "crossentropylosscriterion": 508, "sparsecategoricalcrossentropycriterion": 508, "knowledgedistillationlosscriterion": 508, "weightcompressionapproach": 508, "parse_dict_value_to_float": 508, "parse_dict_value_to_int": 508, "wiseconfigdetail": 509, "wiseconfig": 509, "acccriterion": 510, "exitpolici": 510, "float_represent": 511, "dumper": 511, "pruner_represent": 511, "logic": [512, 605], "outsid": 512, "create_simple_respons": 512, "gui": [512, 517, 534, 550, 564, 565, 593, 604], "messagequeu": 512, "queue": [512, 517], "servicenotfoundexcept": 514, "unknown": 514, "connector": 516, "routingdefinit": 516, "rout": 516, "realtimeroutingdefinit": 516, "realtim": 516, "deferredroutingdefinit": 516, "separ": [516, 529, 550, 563, 566, 591, 595], "deferredsubprocessroutingdefinit": 516, "spawn": 516, "subprocess": 516, "get_model_graph": 516, "find_pattern_in_graph": 516, "get_system_info": 516, "endpoint": 517, "run_serv": 517, "webserv": 517, "get_tls_arg": 517, "tl": [517, 550], "block_ifram": 517, "werkzeug": 517, "ifram": 517, "csp": 517, "block_snif": 517, "mime": 517, "snif": 517, "require_api_token": 517, "author": [517, 566], "j": [517, 530, 534, 600, 606], "handle_api_cal": 517, "subpath": 517, "allow_api_cal": 517, "page_not_found": 517, "disable_cach": 517, "build_paramet": 517, "flask": [517, 550], "web_socket_publish": 517, "web_socket": 517, "flask_socketio": 517, "socketio": [517, 550], "benchmarkservic": 518, "historysnapshotpars": 519, "history_snapshot": 519, "provide_perform": 519, "modelservic": 521, "optimizationservic": 522, "profilingservic": 523, "processor": [524, 534, 569, 592, 594, 596, 597, 606], "requestdataprocessor": 524, "responsegener": 525, "workloadservic": 526, "welcom": [528, 529, 530, 534, 607], "interest": [529, 534, 601], "foster": 529, "particip": 529, "harass": 529, "experi": [529, 571, 599, 600, 603], "everyon": 529, "regardless": 529, "ag": 529, "bodi": 529, "ethnic": 529, "characterist": 529, "gender": 529, "educ": 529, "socio": 529, "econom": 529, "appear": [529, 550, 582, 588], "race": 529, "religion": 529, "sexual": 529, "orient": 529, "behavior": [529, 530, 535, 561, 570, 601, 603, 605], "contribut": [529, 534], "inclus": 529, "Being": 529, "respect": [529, 561, 593, 600, 605], "viewpoint": 529, "gracefulli": 529, "critic": 529, "focus": [529, 535], "empathi": 529, "toward": [529, 555], "unaccept": 529, "imageri": 529, "unwelcom": 529, "troll": 529, "insult": 529, "derogatori": 529, "comment": [529, 553, 567, 568, 602], "polit": 529, "attack": 529, "privat": 529, "publish": [529, 566, 569, 589, 600], "electron": 529, "explicit": 529, "permiss": 529, "inappropri": 529, "profession": 529, "clarifi": 529, "appropri": [529, 600], "fair": 529, "action": [529, 583, 586], "reject": 529, "commit": [529, 530], "wiki": 529, "issu": [529, 530, 533, 550, 565, 596, 601], "ban": 529, "temporarili": 529, "deem": 529, "threaten": 529, "offens": 529, "harm": 529, "mail": 529, "social": [529, 534, 594], "media": [529, 534, 594], "account": [529, 599, 603], "appoint": 529, "event": [529, 601], "abus": 529, "report": [529, 530, 550, 599], "contact": [529, 598, 599], "complaint": 529, "review": [529, 530], "investig": 529, "circumst": [529, 595], "oblig": 529, "confidenti": [529, 550], "regard": [529, 597], "incid": 529, "good": [529, 596, 603], "faith": 529, "face": [529, 534, 540, 571, 575, 594, 598], "repercuss": 529, "leadership": 529, "faq": [529, 534], "page": [529, 530, 534], "view": [530, 534, 550, 558, 579, 588, 598], "pylint": 530, "flake8": 530, "autopep8": 530, "cover": [530, 559, 563, 594], "would": [530, 568, 569, 593, 596, 600], "adopt": [530, 534, 571, 593, 594, 600], "certif": [530, 550], "agre": 530, "bug": 530, "jira": 530, "ticket": 530, "potenti": [530, 532], "risk": 530, "pr": [530, 567, 583, 586, 598], "reproduc": 530, "submit": [530, 594], "intend": 530, "collabor": [530, 573, 579], "adher": 530, "toolkit": [531, 534, 565, 571, 579, 594, 604], "tracer": 531, "resolv": [531, 533], "floatfunct": 531, "cat": [531, 574], "done": [531, 555, 556, 572, 588, 593, 596], "10004": [531, 532, 535, 552, 555, 556, 559, 561, 564, 569, 591, 595, 605], "neural_compressor": [531, 532, 534, 551, 552, 553, 555, 556, 557, 559, 562, 563, 567, 568, 569, 570, 590, 591, 593, 595, 596, 597, 598, 599, 600, 602, 603, 605], "eval": [531, 552, 571, 596, 601], "fail": 531, "conduct": [531, 568, 576, 588, 604], "imper": 531, "therefor": [531, 568, 593, 596, 598, 600], "lot": [531, 600], "As": [531, 550, 552, 555, 568, 582, 593, 603], "failur": 531, "successfulli": [531, 557, 594], "suggest": [531, 599], "traceabl": 531, "proxi": 531, "tutori": [531, 579, 594, 604], "prototyp": 531, "html": [531, 534, 583, 586], "untrac": 531, "ssd": [531, 606], "resnet34": [531, 606], "r34": 531, "bboxes_labels_scor": 531, "prob": 531, "45": [531, 600, 606], "max_output": 531, "zip": 531, "dbox": 531, "dlabel": 531, "dscore": 531, "decode_singl": 531, "autom": [532, 571, 588, 589, 600], "artifici": 532, "ann": 532, "par": 532, "outperform": 532, "hand": [532, 550], "propos": [532, 535, 555, 569, 593, 600], "lie": 532, "predictor": 532, "4x": [532, 596], "figur": [532, 581, 582, 585, 593], "popul": 532, "inner": 532, "evolutionari": 532, "cycl": 532, "until": [532, 603], "conclud": 532, "met": [532, 561, 569, 596, 601], "yet": [532, 550, 583, 586, 589], "simplest": [532, 574], "launcher": [532, 534, 555, 556, 579, 593, 604], "agent": 532, "nsga2": 532, "supernet": 532, "ofa_mbv3_d234_e346_k357_w1": 532, "acc": [532, 601, 606], "mac": [532, 589], "num_ev": 532, "250": 532, "results_csv_path": 532, "search_result": 532, "dataset_path": 532, "ilsvrc2012": 532, "aim": [532, 534, 571, 593, 600, 603, 604], "mobilenetv3": 532, "lt": [532, 553, 592, 606], "wmt": 532, "en": 532, "de": 532, "guidelin": [533, 534], "mainstream": [534, 604], "learn": [534, 535, 552, 553, 559, 563, 564, 565, 568, 569, 571, 573, 576, 577, 579, 582, 583, 586, 588, 593, 594, 596, 600, 601, 603, 604], "runtim": [534, 535, 536, 552, 558, 561, 564, 573, 578, 579, 595], "workflow": [534, 555, 565, 569, 583, 586, 601, 604], "particular": [534, 593], "wide": [534, 558, 569, 596, 606], "xeon": [534, 565, 566, 569, 592, 594, 596, 597, 606], "scalabl": [534, 565, 569, 592, 594, 596, 597, 606], "flex": [534, 565], "amd": [534, 564, 565, 606], "arm": [534, 564, 565, 606], "nvidia": [534, 564, 565, 593, 596, 606], "bloom": [534, 600], "176b": [534, 600], "7b": [534, 600], "stabl": [534, 550, 565, 594], "diffus": [534, 594, 606], "gpt": [534, 600, 606], "hub": [534, 558, 562, 579], "hug": [534, 594], "vision": [534, 559, 562, 575, 600], "coder": [534, 564, 572, 573, 576, 579, 582, 594], "cloud": [534, 594], "marketplac": [534, 589, 594], "googl": [534, 569, 594], "amazon": [534, 571, 579], "azur": [534, 594], "softwar": [534, 566, 569, 592, 593, 594, 598], "alibaba": [534, 578, 585, 586, 594], "tencent": [534, 594], "taco": [534, 594], "ai": [534, 571, 594, 597, 604], "ecosystem": [534, 594], "lightn": [534, 578], "pip": [534, 550, 557, 560, 562, 565, 573, 576, 581, 583, 585, 586, 598], "wget": [534, 560, 562], "storag": [534, 562, 567, 600], "googleapi": [534, 562], "v1_6": [534, 562], "mobilenet_v1_1": [534, 562], "0_224_frozen": [534, 562], "quick": [534, 561, 604, 605], "overview": 534, "notebook": [534, 604], "oneapi": [534, 565, 594, 604], "analyt": [534, 565, 594, 604], "jupyterlab": [534, 571, 577, 579, 581, 585, 604], "studio": [534, 579, 588, 604], "matrix": [534, 579, 600, 604], "topic": 534, "blog": [534, 594], "medium": [534, 594], "enhanc": [534, 571, 594, 597], "apr": [534, 594], "2023": [534, 600, 606], "still": [534, 568, 594, 596, 597], "mlperf": [534, 594, 606], "5x": [534, 594], "heterogen": [534, 594], "power": [534, 555, 568, 582, 592, 594], "mar": [534, 594], "busi": [534, 594], "jan": [534, 594], "neurip": [534, 594], "oct": [534, 594], "quala": [534, 594], "minilm": [534, 594, 606], "legal": [534, 607], "secur": [534, 592, 594, 607], "idea": [534, 593, 600, 603], "feel": 534, "look": [534, 535, 561, 567, 605], "bridg": [535, 564], "vanilla": [535, 564], "abcadaptor": 535, "__init__": [535, 552, 553, 567, 603], "query_fw_cap": 535, "query_fused_pattern": 535, "he": 535, "besid": [535, 555], "describ": [535, 550, 561, 601], "past": 535, "mainten": 535, "difficult": [535, 600], "abil": [535, 553, 561, 600], "modif": [535, 552, 561, 576], "fragment": 535, "granular": [535, 561, 564, 574, 593, 596, 600, 605], "semant": [535, 561], "mla": [535, 596], "becom": [535, 559], "explor": 535, "inspect_tensor": 535, "op_list": [535, 601], "iteration_list": 535, "inspect_typ": 535, "save_to_disk": 535, "quantization_cfg": 535, "set_tensor": 535, "tensor_dict": 535, "diagnosis_help": 535, "easier": [550, 581, 585, 588, 594], "nightli": [550, 565], "pypi": [550, 565, 583, 586], "conda": [550, 560, 565, 574, 582, 598], "forg": [550, 560, 565], "git": [550, 560, 565], "clone": [550, 565, 581, 585], "cd": [550, 557, 565], "setup": [550, 561, 565, 583, 586, 593], "instruct": [550, 555, 565, 569, 583, 586, 594, 595, 596], "ui": 550, "5000": 550, "338174d13706855fc6924cec7b3a8ae8": 550, "listen": 550, "firewal": 550, "8080": 550, "tf_enable_onednn_opt": [550, 565], "cert": 550, "path_to_cert": 550, "crt": 550, "path_to_private_kei": 550, "encrypt": 550, "insecur": 550, "expos": 550, "forfeit": 550, "client": 550, "extern": 550, "threat": 550, "button": [550, 564, 582, 588], "click": [550, 562, 564, 571, 572, 579, 582, 588, 594, 601], "pop": [550, 588], "recognit": [550, 557, 559, 593, 601], "few": [550, 594, 603], "finish": [550, 582], "chosen": 550, "synthet": 550, "plu": 550, "icon": 550, "unfold": 550, "On": [550, 596], "panel": [550, 583, 586, 588], "navig": 550, "previou": [550, 568, 593, 598, 600, 601, 603, 604], "trash": 550, "visibl": 550, "cursor": 550, "prompt": [550, 557], "confirm": 550, "bottom": 550, "pencil": 550, "light": [550, 556], "blue": 550, "color": 550, "That": 550, "row": [550, 593, 600], "arrow": 550, "line": [550, 557, 564, 571, 576, 577, 593, 601], "checkbox": 550, "column": [550, 593, 600], "chart": [550, 596, 599, 601], "offer": [550, 553], "conveni": [550, 568], "variat": 550, "pictur": 550, "yellow": 550, "remind": 550, "ofa": 550, "fvcore": 550, "autograd": 550, "pymoo": 550, "numba": 550, "ilsvrc": 550, "hour": [550, 603], "One": [550, 553, 557, 564, 593, 594, 603], "dialog": 550, "organ": [550, 605], "cryptographi": 550, "linux": [551, 560, 582, 588], "window": [551, 588, 589], "x86_64": 551, "aarch64": 551, "encount": 552, "consum": 552, "previous": 552, "lack": [552, 560], "faster": [552, 554, 594, 603, 606], "treat": 552, "manner": [552, 555, 570], "300": [552, 553], "input_data": 552, "customis": [552, 553], "ensp": [553, 567, 602], "imagerecord": [553, 557, 605], "image_nam": 553, "cocorecord": 553, "gt": [553, 559, 602], "int64": 553, "style_transf": 553, "content": 553, "tfrecorddataset": 553, "helloworld": [553, 602], "aid": 554, "deploy": [554, 571, 588, 600], "infrastructur": 554, "expens": [555, 568, 603], "deploi": [555, 568, 603], "mobil": [555, 568, 606], "produc": 555, "logit": 555, "softmax": 555, "l": [555, 601, 603], "kd": 555, "distanc": 555, "euclidean": 555, "kullback": 555, "leibler": 555, "patient": 555, "compact": [555, 568, 574, 593], "agnost": 555, "resourc": [555, 593, 603], "convolut": [555, 593, 594], "ia": 555, "attach": [555, 568, 600], "shallow": 555, "depth": [555, 597], "deepest": 555, "deeper": 555, "10006": [555, 556], "student_output": [555, 556], "student_loss": [555, 556], "training_func_for_nc": [555, 556], "distil_loss_conf": 555, "accordingli": [555, 579], "promis": [556, 568, 593], "huge": 556, "heavi": 556, "booster": 556, "degrad": [556, 603], "incorpor": [556, 603], "novel": [556, 571, 582, 588], "place": [556, 565, 593, 601], "illustr": 556, "comb": 556, "distillation_criterion": [556, 568, 591], "q_conf": 556, "horovod": 557, "builtin": 557, "program": [557, 566, 569, 571, 588], "addition": [557, 603], "enable_eager_execut": 557, "yaml_file_path": 557, "pre_process": 557, "simpli": [557, 570, 571, 573, 576, 588], "evaluation_result": 557, "evaluation_time_cost": 557, "partit": 557, "distributedsampl": 557, "train_sampl": 557, "train_dataset": [557, 596], "num_replica": 557, "rank": 557, "train_load": 557, "train_kwarg": 557, "adadelta": 557, "distributedoptim": 557, "named_paramet": 557, "broadcast_paramet": 557, "root_rank": 557, "broadcast_optimizer_st": 557, "set_epoch": 557, "batch_idx": 557, "zero_grad": [557, 568, 593], "nll_loss": 557, "log_interv": 557, "0f": 557, "tloss": 557, "6f": 557, "dry_run": 557, "test_func": 557, "host": 557, "num_of_process": 557, "002": 557, "ssh": [557, 588], "readm": 557, "exactli": [557, 572], "resnet50_v1": [557, 568], "topk": [557, 567, 568, 596], "resizecropimagenet": [557, 602], "realiz": [557, 567, 590, 597, 599], "tow": 557, "node1": 557, "node2": 557, "TO": [557, 573], "your_node1_nam": 557, "your_node2_nam": 557, "resnet50_fp32_pretrained_model": 557, "nc_resnet50_v1": 557, "resnet": [557, 562, 606], "varieti": [558, 595, 603], "demonstr": [558, 571, 593, 601], "10k": [558, 562], "speedup": [558, 564, 596], "2x": [558, 564, 592], "vnni": [558, 564, 595, 596], "exchang": 559, "howev": [559, 593, 600], "hope": 559, "briefli": [559, 568, 593, 600], "matur": 559, "major": [559, 563, 596, 600], "reus": 559, "inc_model": [559, 570], "fp32_onnx_config": 559, "verifi": 559, "gap": [559, 570], "matmulintegertofloat": 559, "matmulinteg": 559, "toolchain": 560, "bare": 560, "metal": 560, "sudo": [560, 574], "apt": [560, 565, 574, 582], "python3": 560, "dev": [560, 581, 585], "distutil": 560, "essenti": 560, "libgl1": 560, "mesa": 560, "glx": 560, "libglib2": 560, "numactl": [560, 574, 582], "ln": 560, "sf": 560, "usr": 560, "incompat": 560, "88": [560, 599, 606], "80": [560, 600, 601, 606], "pyobject": 560, "reinstal": 560, "importerror": 560, "libgl": 560, "No": [560, 568, 592, 594], "yum": [560, 565], "opencv": [560, 582], "pend": 560, "27": [560, 565, 606], "alemb": [560, 565], "friendli": [561, 568, 600, 605], "dive": [561, 604], "unless": 561, "purpos": [561, 569, 588, 595, 596], "let": [561, 576, 595, 605], "syntax": 561, "go": [561, 583, 586, 595, 602], "up1": 561, "up2": 561, "valid_mixed_precis": 561, "per_tensor": [561, 596, 605], "addn": 561, "grappler_optim": 561, "constfold": 561, "arithmet": 561, "debug_stripp": 561, "jupyt": [562, 579, 581, 582, 585], "lab": [562, 581, 582, 583, 585, 586], "concept": [563, 599, 604], "rather": 563, "custom_metr": 563, "refin": [563, 593], "These": 564, "broad": [564, 577, 604], "420": 564, "geomean": 564, "snippet": 564, "upload": [564, 583, 586], "dispatch": 564, "qintegerop": [564, 596], "plan": 564, "success": 565, "re": [565, 588], "uninstal": [565, 588], "frequent": 565, "ask": 565, "consolid": 565, "latest": [565, 594, 598], "eas": [565, 573, 594], "along": 565, "streamlin": 565, "scienc": 565, "mani": [565, 603, 605], "websit": 565, "anaconda": 565, "suit": [565, 589, 601], "esri": 565, "formerli": 565, "skylak": 565, "cascad": 565, "lake": [565, 569, 594], "cooper": [565, 569, 594], "ic": [565, 593, 594], "sapphir": 565, "rapid": 565, "hbm": 565, "arctic": 565, "sound": 565, "pont": 565, "vecchio": 565, "cento": 565, "ubuntu": [565, 592], "04": [565, 592, 606], "fortensorflow": 565, "forpytorch": 565, "onednn": [565, 596], "newer": 565, "copyright": 566, "accompani": 566, "research": [566, 600], "wish": 566, "bibtex": 566, "misc": 566, "feng": 566, "tian": 566, "hanwen": 566, "haihao": [566, 593], "shen": [566, 593], "suyu": 566, "chen": 566, "titl": [566, 589], "howpublish": 566, "year": 566, "logo": [566, 592], "atom": 566, "phi": 566, "pentium": 566, "vtune": 566, "corpor": [566, 592], "subsidiari": [566, 592], "brand": [566, 592], "claim": [566, 592], "popularli": 567, "industri": [567, 594], "label_map": 567, "decis": 567, "ap": 567, "curv": 567, "turn": [567, 582], "target_boxes_num": 567, "str_label": 567, "int_label": 567, "inturn": 567, "cocomap": 567, "vocmap": 567, "categor": 567, "multiclass": 567, "multilabel": 567, "multi_metr": 567, "newmetr": 567, "reset": 567, "reflect": [567, 592, 602], "deliv": [568, 594], "upgrad": 568, "veri": [568, 589, 596, 603], "speed": [568, 579, 593, 594, 596, 603], "fundament": 568, "comprehens": [568, 604], "kind": 568, "resort": 568, "automodelforsequenceclassif": 568, "autotoken": 568, "val_dataset": [568, 596], "val_dataload": [568, 596], "worker": [568, 596], "ping_memori": [568, 596], "formul": 568, "effort": 568, "written": 568, "onnxrt_integ": [568, 605], "onnxrt_qlinear": [568, 605], "unsupport": 568, "image_tensor": [568, 605], "post_training_dynamic_qu": [568, 595, 603], "1000": [568, 605], "2000": 568, "sampling_s": [568, 605], "model_wis": [568, 605], "op_dict": 568, "op_wis": [568, 601, 605], "sigopt_api_token": [568, 599, 603], "sigopt_project_id": [568, 599, 603], "sigopt_experiment_nam": [568, 599, 603], "demo": 568, "600": [568, 606], "training_arg": 568, "emul": [568, 596], "trainer": [568, 579], "similar": [568, 595, 600, 603, 605], "maxim": [568, 593, 603], "pruning_func": 568, "num_train_epoch": [568, 593], "train_dataload": [568, 593, 596], "n_gpu": 568, "gradient_accumulation_step": 568, "clip_grad_norm_": 568, "max_grad_norm": 568, "rate": [568, 593, 596], "start_epoch": [568, 595, 605], "end_epoch": [568, 595, 605], "97": [568, 600, 606], "newli": [568, 593], "on_after_optimizer_step": [568, 593], "layer3": [568, 593], "layer2": [568, 593, 596], "lr_schedul": [568, 593], "weight_decai": [568, 605], "0004": 568, "nesterov": [568, 605], "randomresizedcrop": [568, 602], "totensor": [568, 602], "485": 568, "456": 568, "406": 568, "nepoch": 568, "cnt": 568, "loss_sum": 568, "iter_bar": 568, "tqdm": 568, "desc": 568, "teacher_logit": 568, "train_fun": 568, "training_func": 568, "recent": [568, 569], "growth": [568, 569, 593], "complex": [568, 569, 593], "significantli": [568, 569, 593, 603], "bandwidth": [568, 569], "exit_polici": [568, 605], "determinist": 568, "arbitrari": [568, 591], "reli": [568, 600], "prune_conf": 568, "quantization_aware_training_conf": 568, "aforement": 568, "inset": 568, "p_conf": [568, 591], "ssd_mobilenet_v1": 568, "benchmarkconf": 568, "half": [569, 579], "sixteen": 569, "launch": [569, 589], "3rd": [569, 594, 596, 597], "gen": [569, 594, 597], "codenam": 569, "x86": 569, "avx512": [569, 596], "vcvtne2ps2bf16": 569, "vcvtneps2bf16": 569, "vdpbf16p": 569, "consequ": 569, "avx512_bf16": 569, "cuda": [569, 571, 573, 596], "persist": 570, "brought": [570, 572, 579, 596], "tf2": 570, "h5": 570, "hybridblock": 570, "0000": 570, "saved_result": 570, "simplifi": [571, 582, 588], "subsequ": [571, 588], "acquir": 571, "analysi": [571, 588, 599], "heurist": [571, 588], "rule": [571, 593], "great": 571, "facilit": 571, "autocast": 571, "simultan": [571, 591, 595], "my_model": 571, "no_grad": 571, "memory_format": 571, "112": [571, 606], "rand": [571, 600], "plugin": [571, 589], "aw": [571, 579, 594, 606], "sagemak": [571, 579], "inlin": [571, 576, 579], "neural_cod": [571, 573, 575, 576, 577, 579], "superbench": 571, "enjoi": [572, 576, 579], "rebuild": [572, 581, 585], "reload": [572, 589], "modern": 573, "democrat": [573, 594], "programm": [573, 579, 588], "nano_bf16_channels_last": 573, "resnet18": [573, 606], "nano_bf16_ipex_channels_last": 573, "nano_bf16_ipex": 573, "nano_bf16": 573, "nano_fp32_channels_last": 573, "nano_fp32_ipex_channels_last": 573, "nano_fp32_ipex": 573, "nano_gpu_to_cpu": 573, "nano_int8": 573, "nano_jit_bf16_channels_last": 573, "nano_jit_bf16_ipex_channels_last": 573, "nano_jit_bf16_ipex": 573, "nano_jit_bf16": 573, "nano_jit_fp32_channels_last": 573, "nano_jit_fp32_ipex_channels_last": 573, "nano_jit_fp32_ipex": 573, "nano_jit_fp32": 573, "nano_onnxruntime_fp32": 573, "nano_onnxruntime_int8_qlinear": 573, "openvino": 573, "nano_openvino_fp32": 573, "nano_openvino_int8": 573, "bc": [574, 582], "conda_prefix": 574, "echo": 574, "tradit": [574, 593], "libjemalloc": 574, "libiomp5": 574, "home": 574, "lib": 574, "ld_preload": 574, "malloc_conf": 574, "oversize_threshold": 574, "background_thread": 574, "metadata_thp": 574, "dirty_decay_m": 574, "9000000000": 574, "muzzy_decay_m": 574, "kmp_affin": 574, "kmp_blocktim": 574, "dnnl_primitive_cache_capac": 574, "cpufreq": 574, "scaling_governor": 574, "powersav": 574, "tee": 574, "pytorch_jit_script": [575, 578], "pytorch_channels_last": [575, 578], "run_bench": 575, "patch": [575, 588], "patch_path": 575, "your_patch_path": 575, "sweep": 575, "sweep_object": 575, "bench_config": 575, "bench_featur": 575, "sai": 576, "run_glu": [576, 577], "requisit": 576, "task_nam": [576, 577], "do_ev": [576, 577], "remain": 576, "itself": 576, "run_glue_optim": 576, "static_ipex": 576, "auto_qu": 577, "v4": [577, 606], "albert": [577, 606], "sst2": 577, "alexnet": [577, 606], "pytorch_amp": 578, "optimize_for_infer": 578, "pytorch_jit_trac": 578, "pytorch_jit_script_ofi": 578, "pytorch_jit_trace_ofi": 578, "torchdynamo": 578, "pytorch_torchdynamo_jit_script": 578, "pytorch_torchdynamo_jit_trac": 578, "pytorch_torchdynamo_jit_script_ofi": 578, "pytorch_torchdynamo_jit_trace_ofi": 578, "pytorch_inc_bf16": 578, "pytorch_inc_static_quant_fx": 578, "pytorch_inc_static_quant_ipex": 578, "pytorch_inc_dynamic_qu": 578, "pytorch_ipex_fp32": 578, "pytorch_ipex_bf16": 578, "pytorch_ipex_int8_static_qu": 578, "pytorch_ipex_int8_dynamic_qu": 578, "blade": 578, "disc": 578, "pytorch_aliblad": 578, "pytorch_lightning_bf16_cpu": 578, "tensorflow_amp": 578, "keras_amp": 578, "tensorflow_inc": 578, "keras_inc": 578, "onnx_inc_static_quant_qlinear": 578, "onnx_inc_static_quant_qdq": 578, "onnx_inc_dynamic_qu": 578, "optimum": [578, 579], "pytorch_inc_huggingface_optimum_stat": 578, "pytorch_inc_huggingface_optimum_dynam": 578, "intel_extension_for_transform": 578, "bigdl": [578, 579], "nano": [578, 579], "nano_": 578, "inc_auto": 578, "delight": 579, "announc": 579, "v": [579, 588, 603, 605], "500": 579, "innov": [579, 594, 604], "isa": 579, "xpu": 579, "delta": 579, "acc_delta": 579, "int8_acc": 579, "fp32_acc": 579, "ext": [581, 583, 585, 586, 587], "nodej": [581, 585], "jlpm": [581, 585], "pin": [581, 585], "yarn": [581, 585], "npm": [581, 582, 585], "lieu": [581, 585], "labextens": [581, 582, 585], "typescript": [581, 585], "watch": [581, 585], "termin": [581, 582, 585], "immedi": [581, 585, 593], "refresh": [581, 585], "wait": [581, 585, 588], "rebuilt": [581, 585], "symlink": [581, 585], "down": 582, "enter": [582, 588], "blank": 582, "cell": 582, "gain": [582, 591, 594], "mkl": 582, "jemalloc": 582, "pip3": 582, "headless": 582, "pyproject": [583, 586], "toml": [583, 586], "twine": [583, 586], "whl": [583, 586], "dist": [583, 586], "sdist": [583, 586], "bdist_wheel": [583, 586], "frontend": [583, 586], "login": [583, 586, 599], "cut": [583, 586], "fork": [583, 586], "admin_github_token": [583, 586], "pypi_token": [583, 586], "npm_token": [583, 586], "secret": [583, 586], "draft": [583, 586], "changelog": [583, 586, 587], "pkg": [583, 586], "bot": [583, 586], "pick": [583, 586, 589], "feedstock": [583, 586], "hatch": 586, "notabl": 587, "vscode": [587, 589], "daili": 588, "give": [588, 603], "advantag": [588, 593, 595, 603], "remot": 588, "market": 588, "upper": 588, "sidebar": 588, "hover": 588, "track": [588, 599], "argpars": 588, "diff": 588, "manifest": 589, "declar": 589, "palett": 589, "registercommand": 589, "amodio": 589, "tsl": 589, "matcher": 589, "dbaeumer": 589, "eslint": 589, "press": 589, "f5": 589, "ctrl": [589, 606], "cmd": 589, "hello": 589, "world": 589, "breakpoint": 589, "consol": 589, "relaunch": 589, "toolbar": 589, "node_modul": 589, "viewlet": 589, "dropdown": 589, "runner": 589, "startup": 589, "bundl": 589, "multi_object": 590, "benefit": [591, 593], "instanti": 591, "platinum": [592, 606], "8358": 592, "manufactur": 592, "m50cyp2sbstd": 592, "se5c620": 592, "86b": 592, "0005": 592, "2202160810": 592, "microcod": 592, "0xd000332": 592, "irq": 592, "60ghz": 592, "6chz": 592, "perf": 592, "512gb": 592, "16x32gb": 592, "ddr4": 592, "3200": 592, "mt": 592, "nic": 592, "1x": 592, "ethernet": 592, "100mb": 592, "i350": 592, "gigabit": 592, "drive": 592, "intel_ssdsckkb48": 592, "447": 592, "1g": 592, "publicli": 592, "degre": 592, "mark": 592, "trademark": 592, "art": 593, "increasingli": 593, "crucial": 593, "salient": 593, "nonzero": 593, "irregular": 593, "anywher": 593, "2in4": 593, "amper": 593, "delet": 593, "due": [593, 596, 600, 601], "oc": 593, "kh": 593, "kw": 593, "shrink": 593, "examin": 593, "lowest": [593, 603], "fastform": 593, "formula": [593, 600], "emsp": 593, "partial": [593, 596], "downstream": 593, "co": 593, "discourag": 593, "push": [593, 600], "penal": 593, "parameter": 593, "exemplifi": 593, "complement": 593, "pruner1": 593, "pruner2": 593, "mention": 593, "readi": 593, "hesit": 593, "sst": [593, 606], "flan": 593, "t5": 593, "english": 593, "romanian": 593, "yolov5": 593, "signific": [593, 594, 596, 600], "reduct": [593, 605], "namhoon": 593, "lee": 593, "thalaiyasingam": 593, "ajanthan": 593, "philip": 593, "torr": 593, "2019": 593, "zafrir": 593, "ofir": 593, "ariel": 593, "larei": 593, "boudoukh": 593, "mosh": 593, "wasserblat": 593, "preprint": [593, 600], "2111": 593, "05754": 593, "2021": 593, "amx": 594, "4th": 594, "mleffici": 594, "dec": 594, "wechat": 594, "deepen": 594, "foundat": 594, "intellig": 594, "vmware": 594, "virtual": 594, "applianc": 594, "bitnami": 594, "nov": 594, "sota": 594, "plug": 594, "twitter": 594, "linkedin": 594, "zone": 594, "land": 594, "gcp": 594, "pat": 594, "keynot": 594, "intelon": 594, "sep": 594, "chines": 594, "aug": 594, "purif": 594, "sacrif": 594, "jun": 594, "partner": 594, "feb": 594, "joint": 594, "msft": 594, "bilibili": 594, "gestalt": 594, "ml": 594, "doubl": 594, "reconstruct": 594, "abound": 594, "lpot": [594, 598], "nextplatform": 594, "cern": 594, "gan": 594, "3dgan": 594, "iml": 594, "workshop": 594, "asplo": 594, "18": [594, 606], "highli": 594, "intelcaff": 594, "aris": 595, "tell": 595, "henc": 595, "onnxrt_qoper": 595, "quant_aware_train": 595, "weight_compress": [595, 605], "initial_spars": [595, 605], "prune_typ": [595, 605], "basic_magnitud": [595, 605], "update_frequ": 595, "prune_domain": 595, "tile_pattern_1x1": 595, "invent": 596, "int4": 596, "cost": 596, "theoret": 596, "affin": 596, "zeropoint": 596, "asymmetr": [596, 603], "255": [596, 600], "overflow": 596, "solv": [596, 598], "fbgemm": 596, "unseen": 596, "enough": 596, "peopl": 596, "mimic": 596, "fact": 596, "ultim": 596, "pain": 596, "lossi": 596, "understand": [596, 601, 604], "philosophi": 596, "neither": 596, "nor": 596, "val_load": 596, "top1": [596, 606], "avg": 596, "themselv": 596, "tensorrtexecutionprovid": 596, "cudaexecutionprovid": 596, "ON": 597, "forc": 597, "postposttrainingquantconfig": 597, "bf16wrapper": 597, "retrac": 597, "site": 598, "assist": 598, "comparison": [598, 601], "sed": 598, "your_script": 598, "backbon": 599, "interact": 599, "sigopt_experiment_id": 599, "nc": [599, 603], "certain": 599, "suffici": 599, "ordinari": 599, "capac": 599, "receiv": 599, "latenc": [599, 603], "draw": [599, 603], "mobilenet": [599, 606], "durat": 599, "8266": 599, "8372": 599, "2132": 599, "83": [599, 600, 606], "7495": 599, "8299": 599, "8294": 599, "85": [599, 600, 606], "0837": 599, "8291": 599, "4469": 599, "llm": 600, "gigant": 600, "systemat": 600, "outlier": 600, "quantif": 600, "difficulti": 600, "mathemat": 600, "allevi": 600, "coarsest": 600, "finer": [600, 603], "matric": 600, "similarli": 600, "finest": 600, "consumpt": 600, "why": [600, 601], "suppos": 600, "6839": 600, "4741": 600, "7451": 600, "9301": 600, "1742": 600, "6835": 600, "frac": 600, "q_min": 600, "q_max": 600, "clip": 600, "zp": 600, "q_x": 600, "clamp_": 600, "round_": 600, "w_q": 600, "00296431384049356": 600, "59": [600, 606], "172": 600, "192": 600, "w_dq": 600, "1220": 600, "0500": 600, "1430": 600, "2570": 600, "1890": 600, "mseloss": 600, "1983354538679123": 600, "6848": 600, "4743": 600, "7440": 600, "9308": 600, "1749": 600, "385297635664756e": 600, "affect": 600, "quantize_per_channel": 600, "x_tmp": 600, "detach": 600, "keepdim": 600, "divid": [600, 603], "dequantize_per_channel": 600, "0029": [600, 606], "0036": 600, "162": [600, 606], "48": [600, 606], "72": [600, 606], "93": [600, 606], "207": [600, 606], "139": [600, 606], "6837": 600, "4734": 600, "1751": 600, "6821": 600, "637690492221736e": 600, "6376e": 600, "3852e": 600, "cdot": 600, "quantize_per_tensor_absmax": 600, "n_bit": 600, "div_": 600, "0806": 600, "7589": 600, "6038": 600, "3815": 600, "5040": 600, "7174": 600, "5444": 600, "5826": 600, "7772": 600, "5555": 600, "3740": 600, "3253": 600, "0698": 600, "1381": 600, "5972": 600, "0086": 600, "0737": 600, "8298": 600, "6883": 600, "2991": 600, "1601": 600, "6506": 600, "8246": 600, "3924": 600, "3845": 600, "8768": 600, "w_scale": 600, "x_q": 600, "x_scale": 600, "84": [600, 606], "0059755356051027775": 600, "89": [600, 606], "119": [600, 606], "57": [600, 606], "91": [600, 606], "006533813662827015": 600, "y_q": 600, "17509": 600, "7608": 600, "4055": 600, "16599": 600, "21020": 600, "10016": 600, "9860": 600, "22444": 600, "y_dq": 600, "6836": 600, "2970": 600, "1583": 600, "6481": 600, "8207": 600, "3911": 600, "3850": 600, "8763": 600, "prove": 600, "simplic": 600, "middl": 600, "denot": 600, "fp1": 600, "fp2": 600, "subsect": [600, 605], "explain": 600, "suppress": 600, "straightforward": 600, "intuit": 600, "x1": [600, 603], "x2": [600, 603], "larger": 600, "herebi": 600, "sq": 600, "torchscript": 600, "overhead": 600, "stai": 600, "hardtanh": 600, "t5norm": 600, "llamanorm": 600, "groupnorm": 600, "lambada": 600, "sweet": 600, "spot": 600, "region": 600, "bigscienc": 600, "560m": 600, "65": [600, 606], "63": [600, 606], "44": [600, 606], "66": [600, 606], "76": [600, 606], "1b7": 600, "71": [600, 606], "43": [600, 606], "67": [600, 606], "78": [600, 602, 606], "56": [600, 606], "58": [600, 606], "55": [600, 606], "3b": 600, "73": [600, 606], "69": [600, 606], "74": [600, 606], "7b1": 600, "77": [600, 606], "75": [600, 606], "46": [600, 606], "82": [600, 606], "facebook": 600, "125m": 600, "70": [600, 606], "94": [600, 602, 606], "79": [600, 601, 606], "60": [600, 606], "25": [600, 606], "81": [600, 606], "26": [600, 606], "39": [600, 606], "68": [600, 602, 606], "eleutherai": 600, "6b": 600, "96": [600, 606], "jason": 600, "wei": 600, "emerg": 600, "transact": 600, "yvinec": 600, "edouard": 600, "proceed": 600, "cvf": 600, "winter": 600, "xiui": 600, "2209": 600, "13325": 600, "xiao": 600, "guangxuan": 600, "2211": 600, "10438": 600, "discov": 601, "valuabl": 601, "instrument": 601, "writer": 601, "_pre_eval_hook": 601, "_post_eval_hook": 601, "submodul": 601, "whitelist": 601, "_recordingobserv": 601, "output_tensors_dict": 601, "current_it": 601, "get_tensor_valu": 601, "_observer_forward_hook": 601, "activation_post_process": 601, "_add_observer_": 601, "named_children": 601, "leaf": 601, "add_modul": 601, "register_forward_hook": 601, "dump_tim": 601, "summarywrit": 601, "_acc": 601, "tune_": 601, "add_graph": 601, "get_observer_dict": 601, "observer_dict": 601, "is_quant": 601, "add_histogram": 601, "bind_al": 601, "logdir_spec": 601, "tune_0_acc0": 601, "tune_1": 601, "tune_1_acc0": 601, "four": 601, "baseline_acc_0": 601, "776": 601, "tune_1_acc_0": 601, "095": 601, "runs_v3": 601, "image_recognit": 601, "run_tuning_dump_tensor": 601, "sh": 601, "inceptionv3": 601, "v0": 601, "cg": 601, "conv0": 601, "bash": 601, "run_tun": 601, "topologi": 601, "inception_v3": 601, "dataset_loc": 601, "inceptionv3_fp32_pretrained_model": 601, "nc_inceptionv3": 601, "inceptionv3_dump_tensor": 601, "poor": 601, "eightbit": 601, "disappear": 601, "centercrop": 602, "randomcrop": 602, "cropres": 602, "decodeimag": 602, "jpeg": 602, "encodejp": 602, "alignimagechannel": 602, "116": 602, "103": 602, "017": 602, "bilinearimagenet": [602, 605], "topilimag": 602, "padding_mod": 602, "border": 602, "pixel": 602, "colorjitt": 602, "bright": 602, "satur": 602, "hue": 602, "jitter": 602, "tondarrai": 602, "quickli": [603, 604], "travers": 603, "human": 603, "concret": 603, "insight": 603, "aggress": 603, "classic": 603, "six": 603, "At": 603, "ii": 603, "iii": 603, "post_training_auto_qu": 603, "iv": 603, "vi": 603, "increment": 603, "primari": 603, "highest": 603, "spent": 603, "hawq_v2_loss": 603, "model_loss": 603, "black": 603, "come": 603, "compli": 603, "posterior": 603, "focu": 603, "short": 603, "never": 603, "loglevel": 603, "endlessli": 603, "perspect": 603, "smbo": 603, "trial": 603, "appl": 603, "surrog": 603, "repeat": 603, "quantil": 603, "densiti": 603, "parzen": 603, "greatest": 603, "dai": 603, "next_tune_cfg": 603, "overridden": 603, "cluster": 603, "seamlessli": 603, "mpi": 603, "replic": 603, "replica": 603, "fed": 603, "handler": 603, "synchron": 603, "slave": 603, "abctunestrategi": 603, "familiar": 604, "mobilenet_v1": 605, "hyper": 605, "40": [605, 606], "06": [605, 606], "beta_1": 605, "beta_2": 605, "epsilon": 605, "sparsecategoricalcrossentropi": 605, "sum_over_batch_s": 605, "from_logit": 605, "54": [605, 606], "19": [605, 606], "overal": 605, "8380": 606, "visit": 606, "performancethroughput": 606, "sec": 606, "86": 606, "00": 606, "170": 606, "82x": 606, "92": 606, "85x": 606, "61": 606, "83x": 606, "densenet": 606, "121": 606, "274": 606, "148": 606, "161": 606, "132": 606, "35": 606, "39x": 606, "169": 606, "38": 606, "36": 606, "191": 606, "118": 606, "61x": 606, "cnn": 606, "incept": 606, "37": 606, "84x": 606, "resnet101": 606, "21x": 606, "70x": 606, "51": 606, "14x": 606, "955": 606, "328": 606, "91x": 606, "709": 606, "282": 606, "51x": 606, "v3": 606, "337": 606, "160": 606, "11x": 606, "438": 606, "204": 606, "223": 606, "105": 606, "12x": 606, "10x": 606, "47": 606, "1347": 606, "439": 606, "07x": 606, "1192": 606, "492": 606, "42x": 606, "412": 606, "376": 606, "662": 606, "397": 606, "66x": 606, "299": 606, "23": 606, "154": 606, "93x": 606, "476": 606, "227": 606, "fashion": 606, "2734": 606, "1299": 606, "498": 606, "178": 606, "79x": 606, "427": 606, "173": 606, "47x": 606, "resnetv2": 606, "194": 606, "146": 606, "33x": 606, "237": 606, "187": 606, "27x": 606, "152": 606, "155": 606, "38x": 606, "302": 606, "215": 606, "40x": 606, "346": 606, "312": 606, "277": 606, "60x": 606, "273": 606, "31x": 606, "18x": 606, "53x": 606, "24x": 606, "vgg16": 606, "219": 606, "vgg19": 606, "193": 606, "11506": 606, "9665": 606, "19x": 606, "xception": 606, "262": 606, "137": 606, "barthez": 606, "143": 606, "02x": 606, "20x": 606, "209": 606, "08x": 606, "221": 606, "stsb": 606, "218": 606, "16x": 606, "62": 606, "57x": 606, "55x": 606, "56x": 606, "53": 606, "89x": 606, "blendcnn": 606, "4885": 606, "3715": 606, "camembert": 606, "206": 606, "09x": 606, "deberta": 606, "125": 606, "366": 606, "197": 606, "399": 606, "flaubert": 606, "592": 606, "385": 606, "54x": 606, "wikitext": 606, "hubert": 606, "446": 606, "181": 606, "46x": 606, "layoutlm": 606, "longform": 606, "49": 606, "mbart": 606, "625": 606, "451": 606, "lvwerra": 606, "pegasu": 606, "samsum": 606, "peleenet": 606, "402": 606, "29x": 606, "pokemon": 606, "275": 606, "334": 606, "48x": 606, "reform": 606, "crime": 606, "punish": 606, "153": 606, "06x": 606, "657": 606, "327": 606, "01x": 606, "812": 606, "344": 606, "36x": 606, "360": 606, "23x": 606, "resnext101": 606, "32x8d": 606, "182": 606, "squeezebert": 606, "195": 606, "150": 606, "30x": 606, "75x": 606, "transfo": 606, "xl": 606, "41x": 606, "wave2vec2": 606, "22x": 606, "102": 606, "00x": 606, "115": 606, "17x": 606, "yolo": 606, "232": 606, "28x": 606, "664": 606, "329": 606, "832": 606, "338": 606, "433": 606, "164": 606, "63x": 606, "836": 606, "1396": 606, "463": 606, "90x": 606, "159": 606, "32x": 606, "968": 606, "473": 606, "05x": 606, "958": 606, "477": 606, "arcfac": 606, "126": 606, "78x": 606, "298": 606, "124": 606, "624": 606, "254": 606, "45x": 606, "caffenet": 606, "1432": 606, "540": 606, "65x": 606, "1460": 606, "357": 606, "265": 606, "35x": 606, "86x": 606, "524": 606, "duc": 606, "efficientnet": 606, "1211": 606, "758": 606, "856": 606, "762": 606, "emot": 606, "ferplu": 606, "925": 606, "694": 606, "fcn": 606, "25x": 606, "googlenet": 606, "771": 606, "571": 606, "763": 606, "579": 606, "hf": 606, "156": 606, "multilingu": 606, "99x": 606, "199": 606, "104": 606, "73x": 606, "449": 606, "74x": 606, "l12": 606, "h384": 606, "466": 606, "247": 606, "88x": 606, "l6": 606, "523": 606, "354": 606, "183": 606, "107": 606, "spanbert": 606, "208": 606, "795": 606, "780": 606, "591": 606, "515": 606, "15x": 606, "2370": 606, "1526": 606, "2216": 606, "1506": 606, "2078": 606, "1028": 606, "1762": 606, "76x": 606, "mobilenetv2": 606, "2615": 606, "1645": 606, "59x": 606, "2461": 606, "1674": 606, "766": 606, "431": 606, "77x": 606, "575": 606, "430": 606, "34x": 606, "747": 606, "564": 606, "594": 606, "590": 606, "643": 606, "253": 606, "shufflenet": 606, "2354": 606, "1461": 606, "1850": 606, "1368": 606, "squeezenet": 606, "2484": 606, "1912": 606, "2526": 606, "1911": 606, "710": 606, "549": 606, "622": 606, "497": 606, "652": 606, "507": 606, "573": 606, "470": 606, "527": 606, "396": 606, "68x": 606, "tini": 606, "647": 606, "514": 606, "26x": 606, "ultrafac": 606, "314": 606, "50x": 606, "304": 606, "316": 606, "315": 606, "zfnet": 606, "462": 606, "268": 606, "72x": 606, "465": 606, "62x": 606, "436": 606, "270": 606, "429": 606, "92x": 606, "94x": 606, "331": 606, "242": 606, "37x": 606, "98x": 606, "taskdataset": 606, "accuracyspars": 606, "ratiospars": 606, "commentsbalancedor": 606, "unbalanc": 606, "mini": 606, "answeringsquad": 606, "87f1": 606, "momentumunbalanc": 606, "momentumbalanc": 606, "90f1": 606, "59f1": 606, "23f1": 606, "classificationmrpc": 606, "52f1": 606, "26f1": 606, "classificationsst": 606, "61accuraci": 606, "recognitionimagenet": 606, "95top1": 606, "2x1": 606, "v5s6": 606, "detectioncoco": 606, "ap0": 606, "404": 606, "6ap0": 606, "393": 606, "584": 606, "34f1": 606, "lassounbalanc": 606, "classificationmnli": 606, "mm": 606, "allbalanc": 606, "32accuraci": 606, "sensitivitybalanc": 606, "classificationqqp": 606, "classificationqnli": 606, "54accuraci": 606, "em": 606, "7965": 606, "wideresnet40": 606, "9522": 606, "8178": 606, "0213": 606, "8235": 606, "027": 606, "5494": 606, "7153": 606, "5540": 606, "0046": 606, "5523": 606, "vgg": 606, "bn": 606, "7022": 606, "7415": 606, "7025": 606, "0003": 606, "wip": 606, "6739": 606, "7399": 606, "6845": 606, "0106": 606, "7034": 606, "8382": 606, "bilstm": 606, "8314": 606, "9403": 606, "9048": 606, "0734": 606, "7323": 606, "8256": 606, "8084": 606, "8814": 606, "7442": 606, "8371": 606, "0119": 606, "0115": 606, "tinybert": 606, "8018": 606, "8044": 606, "8363": 606, "8411": 606, "8025": 606, "8074": 606, "0007": 606, "0030": 606, "8626": 606, "8213": 606, "9091": 606, "8782": 606, "8684": 606, "8259": 606, "0058": 606, "distilroberta": 606, "6057": 606, "6455": 606, "6187": 606, "0130": 606, "c6i": 606, "2xlarg": 606, "c6a": 606, "c6g": 606, "a100cuda": 606, "executionprovid": 606}, "objects": {"": [[0, 0, 0, "-", "644ec953a7dc_pruning_support"], [1, 0, 0, "-", "6ece06672ed3_v1_14"], [2, 0, 0, "-", "6f0d0f71d92e_v1_13"], [3, 0, 0, "-", "9e89549a08c8_v1_11"], [4, 0, 0, "-", "block_mask"], [5, 0, 0, "-", "env"], [294, 0, 0, "-", "neural_compressor"]], "6ece06672ed3_v1_14": [[1, 1, 1, "ece06672ed3_v1_14.update_dataloaders", "update_dataloaders"], [1, 1, 1, "ece06672ed3_v1_14.update_transformations", "update_transformations"]], "env": [[5, 1, 1, "", "run_migrations_offline"], [5, 1, 1, "", "run_migrations_online"]], "neural_compressor": [[7, 0, 0, "-", "adaptor"], [155, 0, 0, "-", "algorithm"], [158, 0, 0, "-", "benchmark"], [162, 0, 0, "-", "compression"], [176, 0, 0, "-", "conf"], [178, 0, 0, "-", "config"], [179, 0, 0, "-", "contrib"], [204, 0, 0, "-", "data"], [256, 0, 0, "-", "experimental"], [301, 0, 0, "-", "metric"], [303, 0, 0, "-", "mix_precision"], [305, 0, 0, "-", "model"], [313, 0, 0, "-", "objective"], [314, 0, 0, "-", "quantization"], [322, 0, 0, "-", "strategy"], [334, 0, 0, "-", "template"], [335, 0, 0, "-", "training"], [339, 0, 0, "-", "utils"], [481, 0, 0, "-", "ux"], [527, 0, 0, "-", "version"]], "neural_compressor.adaptor": [[6, 0, 0, "-", "adaptor"], [8, 0, 0, "-", "keras"], [12, 0, 0, "-", "keras_utils"], [15, 0, 0, "-", "mxnet"], [16, 0, 0, "-", "mxnet_utils"], [18, 0, 0, "-", "onnxrt"], [21, 0, 0, "-", "ox_utils"], [44, 0, 0, "-", "pytorch"], [45, 0, 0, "-", "query"], [46, 0, 0, "-", "tensorflow"], [110, 0, 0, "-", "tf_utils"], [148, 0, 0, "-", "torch_utils"]], "neural_compressor.adaptor.adaptor": [[6, 2, 1, "", "Adaptor"], [6, 1, 1, "", "adaptor_registry"]], "neural_compressor.adaptor.keras": [[8, 2, 1, "", "KerasAdaptor"]], "neural_compressor.adaptor.keras_utils": [[9, 0, 0, "-", "conv2d"], [10, 0, 0, "-", "dense"], [11, 0, 0, "-", "depthwise_conv2d"], [13, 0, 0, "-", "quantizer"], [14, 0, 0, "-", "separable_conv2d"]], "neural_compressor.adaptor.mxnet": [[15, 2, 1, "", "MXNetQuery"], [15, 2, 1, "", "MxNetAdaptor"]], "neural_compressor.adaptor.mxnet_utils": [[17, 0, 0, "-", "util"]], "neural_compressor.adaptor.mxnet_utils.util": [[17, 2, 1, "", "CalibCollector"], [17, 2, 1, "", "CalibData"], [17, 2, 1, "", "CollectorBase"], [17, 2, 1, "", "DataIterLoader"], [17, 2, 1, "", "DataLoaderWrap"], [17, 2, 1, "", "NameCollector"], [17, 2, 1, "", "OpType"], [17, 2, 1, "", "TensorCollector"], [17, 1, 1, "", "amp_convert"], [17, 1, 1, "", "calib_model"], [17, 1, 1, "", "check_mx_version"], [17, 1, 1, "", "combine_capabilities"], [17, 1, 1, "", "create_data_example"], [17, 1, 1, "", "distribute_calib_tensors"], [17, 1, 1, "", "ensure_list"], [17, 1, 1, "", "fuse"], [17, 1, 1, "", "get_framework_name"], [17, 1, 1, "", "is_model_quantized"], [17, 1, 1, "", "isiterable"], [17, 1, 1, "", "make_module"], [17, 1, 1, "", "make_nc_model"], [17, 1, 1, "", "make_symbol_block"], [17, 1, 1, "", "ndarray_to_device"], [17, 1, 1, "", "parse_tune_config"], [17, 1, 1, "", "prepare_dataloader"], [17, 1, 1, "", "prepare_model"], [17, 1, 1, "", "prepare_model_data"], [17, 1, 1, "", "quantize_sym_model"], [17, 1, 1, "", "query_quantizable_nodes"], [17, 1, 1, "", "run_forward"]], "neural_compressor.adaptor.onnxrt": [[18, 2, 1, "", "ONNXRT_IntegerOpsAdaptor"], [18, 2, 1, "", "ONNXRT_QDQAdaptor"], [18, 2, 1, "", "ONNXRT_QLinearOpsAdaptor"], [18, 2, 1, "", "ONNXRUNTIMEAdaptor"]], "neural_compressor.adaptor.ox_utils": [[19, 0, 0, "-", "calibration"], [20, 0, 0, "-", "calibrator"], [33, 0, 0, "-", "operators"], [42, 0, 0, "-", "quantizer"], [43, 0, 0, "-", "util"]], "neural_compressor.adaptor.ox_utils.calibration": [[19, 2, 1, "", "ONNXRTAugment"]], "neural_compressor.adaptor.ox_utils.calibrator": [[20, 2, 1, "", "CalibratorBase"], [20, 2, 1, "", "HistogramCollector"], [20, 2, 1, "", "KLCalibrator"], [20, 2, 1, "", "MinMaxCalibrator"], [20, 2, 1, "", "PercentileCalibrator"], [20, 1, 1, "", "calib_registry"], [20, 1, 1, "", "smooth_distribution"]], "neural_compressor.adaptor.ox_utils.operators": [[22, 0, 0, "-", "activation"], [23, 0, 0, "-", "argmax"], [24, 0, 0, "-", "attention"], [25, 0, 0, "-", "binary_op"], [26, 0, 0, "-", "concat"], [27, 0, 0, "-", "conv"], [28, 0, 0, "-", "direct_q8"], [29, 0, 0, "-", "embed_layernorm"], [30, 0, 0, "-", "gather"], [31, 0, 0, "-", "gavgpool"], [32, 0, 0, "-", "gemm"], [34, 0, 0, "-", "lstm"], [35, 0, 0, "-", "matmul"], [36, 0, 0, "-", "maxpool"], [37, 0, 0, "-", "ops"], [38, 0, 0, "-", "pad"], [39, 0, 0, "-", "pooling"], [40, 0, 0, "-", "resize"], [41, 0, 0, "-", "split"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[22, 2, 1, "", "ActivationOperator"], [22, 2, 1, "", "QActivationOperator"], [22, 2, 1, "", "RemovableActivationOperator"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[23, 2, 1, "", "ArgMaxOperator"], [23, 2, 1, "", "QArgMaxOperator"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[24, 2, 1, "", "AttentionOperator"], [24, 2, 1, "", "QAttentionOperator"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[25, 2, 1, "", "BinaryOperator"], [25, 2, 1, "", "QBinaryOperator"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[26, 2, 1, "", "ConcatOperator"], [26, 2, 1, "", "QConcatOperator"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[27, 2, 1, "", "ConvOperator"], [27, 2, 1, "", "QConvOperator"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[28, 2, 1, "", "Direct8BitOperator"], [28, 2, 1, "", "QDirectOperator"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[29, 2, 1, "", "EmbedLayerNormalizationOperator"], [29, 2, 1, "", "QEmbedLayerNormalizationOperator"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[30, 2, 1, "", "GatherOperator"], [30, 2, 1, "", "QGatherOperator"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[31, 2, 1, "", "GlobalAveragePoolOperator"], [31, 2, 1, "", "QGlobalAveragePoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[32, 2, 1, "", "GemmOperator"], [32, 2, 1, "", "QGemmOperator"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[34, 2, 1, "", "LSTMOperator"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[35, 2, 1, "", "MatMulOperator"], [35, 2, 1, "", "QMatMulOperator"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[36, 2, 1, "", "MaxPoolOperator"], [36, 2, 1, "", "QMaxPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[37, 2, 1, "", "Operator"], [37, 2, 1, "", "QOperator"], [37, 1, 1, "", "op_registry"], [37, 1, 1, "", "qop_registry"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[38, 2, 1, "", "PadOperator"], [38, 2, 1, "", "QPadOperator"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[39, 2, 1, "", "PoolOperator"], [39, 2, 1, "", "QPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[40, 2, 1, "", "QResizeOperator"], [40, 2, 1, "", "ResizeOperator"]], "neural_compressor.adaptor.ox_utils.operators.split": [[41, 2, 1, "", "QSplitOperator"], [41, 2, 1, "", "SplitOperator"]], "neural_compressor.adaptor.ox_utils.quantizer": [[42, 2, 1, "", "Quantizer"]], "neural_compressor.adaptor.ox_utils.util": [[43, 2, 1, "", "QuantFormat"], [43, 2, 1, "", "QuantType"], [43, 2, 1, "", "QuantizationMode"], [43, 2, 1, "", "QuantizedInitializer"], [43, 2, 1, "", "QuantizedValue"], [43, 2, 1, "", "QuantizedValueType"], [43, 2, 1, "", "ValueInfo"], [43, 1, 1, "", "adjust_weights_per_input"], [43, 1, 1, "", "adjust_weights_per_op"], [43, 1, 1, "", "attribute_to_kwarg"], [43, 1, 1, "", "calculate_scale_zp"], [43, 1, 1, "", "cast_tensor"], [43, 1, 1, "", "collate_preds"], [43, 1, 1, "", "dequantize_data"], [43, 1, 1, "", "dequantize_data_with_scale_zero"], [43, 1, 1, "", "dtype_to_name"], [43, 1, 1, "", "find_by_name"], [43, 1, 1, "", "float_to_bfloat16"], [43, 1, 1, "", "float_to_float16"], [43, 1, 1, "", "get_smooth_scales_per_input"], [43, 1, 1, "", "get_smooth_scales_per_op"], [43, 1, 1, "", "insert_smooth_mul_op_per_input"], [43, 1, 1, "", "insert_smooth_mul_op_per_op"], [43, 1, 1, "", "is_B_transposed"], [43, 1, 1, "", "make_dquant_node"], [43, 1, 1, "", "make_quant_node"], [43, 1, 1, "", "quantize_data"], [43, 1, 1, "", "quantize_data_per_channel"], [43, 1, 1, "", "quantize_data_with_scale_zero"], [43, 1, 1, "", "quantize_nparray"], [43, 1, 1, "", "remove_init_from_model_input"], [43, 1, 1, "", "split_shared_bias"], [43, 1, 1, "", "trt_env_setup"]], "neural_compressor.adaptor.pytorch": [[44, 2, 1, "", "PyTorchAdaptor"], [44, 2, 1, "", "PyTorchQuery"], [44, 2, 1, "", "PyTorch_FXAdaptor"], [44, 2, 1, "", "PyTorch_IPEXAdaptor"], [44, 2, 1, "", "TemplateAdaptor"], [44, 1, 1, "", "get_ops_recursively"]], "neural_compressor.adaptor.query": [[45, 2, 1, "", "QueryBackendCapability"]], "neural_compressor.adaptor.tensorflow": [[46, 2, 1, "", "TensorFlowAdaptor"], [46, 2, 1, "", "TensorflowQuery"], [46, 2, 1, "", "Tensorflow_ITEXAdaptor"]], "neural_compressor.adaptor.tf_utils": [[47, 0, 0, "-", "graph_converter"], [48, 0, 0, "-", "graph_converter_without_calib"], [86, 0, 0, "-", "graph_rewriter"], [109, 0, 0, "-", "graph_util"], [111, 0, 0, "-", "quantize_graph"], [138, 0, 0, "-", "quantize_graph_common"], [139, 0, 0, "-", "tf2onnx_converter"], [142, 0, 0, "-", "transform_graph"], [145, 0, 0, "-", "util"]], "neural_compressor.adaptor.tf_utils.graph_converter": [[47, 2, 1, "", "GraphConverter"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[48, 2, 1, "", "GraphConverterWithoutCalib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[50, 0, 0, "-", "bf16"], [75, 0, 0, "-", "generic"], [85, 0, 0, "-", "graph_base"], [94, 0, 0, "-", "int8"], [100, 0, 0, "-", "onnx"], [105, 0, 0, "-", "qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[49, 0, 0, "-", "bf16_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[49, 2, 1, "", "BF16Convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[51, 0, 0, "-", "convert_add_to_biasadd"], [52, 0, 0, "-", "convert_layout"], [53, 0, 0, "-", "convert_leakyrelu"], [54, 0, 0, "-", "convert_nan_to_random"], [55, 0, 0, "-", "convert_placeholder_to_const"], [56, 0, 0, "-", "dequantize_cast_optimizer"], [57, 0, 0, "-", "dilated_contraction"], [58, 0, 0, "-", "dummy_biasadd"], [59, 0, 0, "-", "expanddims_optimizer"], [60, 0, 0, "-", "fetch_weight_from_reshape"], [61, 0, 0, "-", "fold_batch_norm"], [62, 0, 0, "-", "fold_constant"], [63, 0, 0, "-", "fuse_biasadd_add"], [64, 0, 0, "-", "fuse_column_wise_mul"], [65, 0, 0, "-", "fuse_conv_with_math"], [66, 0, 0, "-", "fuse_decomposed_bn"], [67, 0, 0, "-", "fuse_decomposed_in"], [68, 0, 0, "-", "fuse_gelu"], [69, 0, 0, "-", "fuse_layer_norm"], [70, 0, 0, "-", "fuse_pad_with_conv"], [71, 0, 0, "-", "fuse_pad_with_fp32_conv"], [72, 0, 0, "-", "fuse_reshape_transpose"], [73, 0, 0, "-", "graph_cse_optimizer"], [74, 0, 0, "-", "grappler_pass"], [76, 0, 0, "-", "insert_print_node"], [77, 0, 0, "-", "move_squeeze_after_relu"], [78, 0, 0, "-", "pre_optimize"], [79, 0, 0, "-", "remove_training_nodes"], [80, 0, 0, "-", "rename_batch_norm"], [81, 0, 0, "-", "split_shared_input"], [82, 0, 0, "-", "strip_equivalent_nodes"], [83, 0, 0, "-", "strip_unused_nodes"], [84, 0, 0, "-", "switch_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[51, 2, 1, "", "ConvertAddToBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[52, 2, 1, "", "ConvertLayoutOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[53, 2, 1, "", "ConvertLeakyReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[54, 2, 1, "", "ConvertNanToRandom"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[55, 2, 1, "", "ConvertPlaceholderToConst"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer": [[56, 2, 1, "", "DequantizeCastOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[57, 2, 1, "", "DilatedContraction"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[58, 2, 1, "", "InjectDummyBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[59, 2, 1, "", "ExpandDimsOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[60, 2, 1, "", "FetchWeightFromReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[61, 2, 1, "", "FoldBatchNormNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[62, 2, 1, "", "GraphFoldConstantOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[63, 2, 1, "", "FuseBiasAddAndAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[64, 2, 1, "", "FuseColumnWiseMulOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[65, 2, 1, "", "FuseConvWithMathOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[66, 2, 1, "", "FuseDecomposedBNOptimizer"], [66, 1, 1, "", "bypass_reshape"], [66, 1, 1, "", "get_const_dim_count"], [66, 1, 1, "", "node_from_map"], [66, 1, 1, "", "node_name_from_input"], [66, 1, 1, "", "valid_reshape_inputs"], [66, 1, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[67, 2, 1, "", "FuseDecomposedINOptimizer"], [67, 1, 1, "", "bypass_reshape"], [67, 1, 1, "", "get_const_dim_count"], [67, 1, 1, "", "node_from_map"], [67, 1, 1, "", "node_name_from_input"], [67, 1, 1, "", "valid_reshape_inputs"], [67, 1, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[68, 2, 1, "", "FuseGeluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[69, 2, 1, "", "FuseLayerNormOptimizer"], [69, 1, 1, "", "node_from_map"], [69, 1, 1, "", "node_name_from_input"], [69, 1, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[70, 2, 1, "", "FusePadWithConv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[71, 2, 1, "", "FusePadWithFP32Conv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[72, 2, 1, "", "FuseTransposeReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[73, 2, 1, "", "GraphCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[74, 2, 1, "", "GrapplerOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[76, 2, 1, "", "InsertPrintMinMaxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[77, 2, 1, "", "MoveSqueezeAfterReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[78, 2, 1, "", "PreOptimization"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[79, 2, 1, "", "RemoveTrainingNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[80, 2, 1, "", "RenameBatchNormOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[81, 2, 1, "", "SplitSharedInputOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[82, 2, 1, "", "StripEquivalentNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[83, 2, 1, "", "StripUnusedNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[84, 2, 1, "", "SwitchOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[85, 2, 1, "", "GraphRewriterBase"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[87, 0, 0, "-", "freeze_fake_quant"], [88, 0, 0, "-", "freeze_value"], [89, 0, 0, "-", "freeze_value_without_calib"], [90, 0, 0, "-", "fuse_conv_redundant_dequantize"], [91, 0, 0, "-", "fuse_conv_requantize"], [92, 0, 0, "-", "fuse_matmul_redundant_dequantize"], [93, 0, 0, "-", "fuse_matmul_requantize"], [95, 0, 0, "-", "meta_op_optimizer"], [96, 0, 0, "-", "post_hostconst_converter"], [97, 0, 0, "-", "post_quantized_op_cse"], [98, 0, 0, "-", "rnn_convert"], [99, 0, 0, "-", "scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[87, 2, 1, "", "FreezeFakeQuantOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[88, 2, 1, "", "FreezeValueTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[89, 2, 1, "", "FreezeValueWithoutCalibTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[90, 2, 1, "", "FuseConvRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[91, 2, 1, "", "FuseConvRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[92, 2, 1, "", "FuseMatMulRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[93, 2, 1, "", "FuseMatMulRequantizeDequantizeNewAPITransformer"], [93, 2, 1, "", "FuseMatMulRequantizeDequantizeTransformer"], [93, 2, 1, "", "FuseMatMulRequantizeNewAPITransformer"], [93, 2, 1, "", "FuseMatMulRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[95, 2, 1, "", "MetaInfoChangingMemOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[96, 2, 1, "", "PostHostConstConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[97, 2, 1, "", "PostCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[98, 2, 1, "", "QuantizedRNNConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[99, 2, 1, "", "ScaleProPagationTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx": [[101, 0, 0, "-", "onnx_graph"], [102, 0, 0, "-", "onnx_node"], [103, 0, 0, "-", "onnx_schema"], [104, 0, 0, "-", "tf2onnx_utils"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph": [[101, 2, 1, "", "OnnxGraph"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node": [[102, 2, 1, "", "OnnxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema": [[103, 2, 1, "", "OnnxOpSchema"], [103, 1, 1, "", "get_max_supported_opset_version"], [103, 1, 1, "", "get_schema"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils": [[104, 2, 1, "", "SeqType"], [104, 1, 1, "", "add_port_to_name"], [104, 1, 1, "", "are_shapes_equal"], [104, 1, 1, "", "assert_error"], [104, 1, 1, "", "compute_const_folding_using_tf"], [104, 1, 1, "", "convert_tensorflow_tensor_to_onnx"], [104, 1, 1, "", "find_opset"], [104, 1, 1, "", "get_index_from_strided_slice_of_shape"], [104, 1, 1, "", "get_subgraphs_from_onnx"], [104, 1, 1, "", "get_tensorflow_node_attr"], [104, 1, 1, "", "get_tensorflow_node_shape_attr"], [104, 1, 1, "", "get_tensorflow_tensor_data"], [104, 1, 1, "", "get_tensorflow_tensor_shape"], [104, 1, 1, "", "infer_onnx_shape_dtype"], [104, 1, 1, "", "initialize_name_counter"], [104, 1, 1, "", "is_list_or_tuple"], [104, 1, 1, "", "is_onnx_domain"], [104, 1, 1, "", "make_onnx_inputs_outputs"], [104, 1, 1, "", "make_onnx_shape"], [104, 1, 1, "", "map_numpy_to_onnx_dtype"], [104, 1, 1, "", "map_onnx_to_numpy_type"], [104, 1, 1, "", "map_tensorflow_dtype"], [104, 1, 1, "", "read_tensorflow_node_attrs"], [104, 1, 1, "", "save_protobuf"], [104, 1, 1, "", "set_name"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[106, 0, 0, "-", "insert_qdq_pattern"], [107, 0, 0, "-", "merge_duplicated_qdq"], [108, 0, 0, "-", "share_qdq_y_pattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[106, 2, 1, "", "GenerateGraphWithQDQPattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[107, 2, 1, "", "MergeDuplicatedQDQOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[108, 2, 1, "", "ShareQDQForItexYPatternOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_util": [[109, 2, 1, "", "GraphAnalyzer"], [109, 2, 1, "", "GraphRewriterHelper"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[113, 0, 0, "-", "qat"], [129, 0, 0, "-", "qdq"], [131, 0, 0, "-", "quantize_graph_base"], [132, 0, 0, "-", "quantize_graph_bn"], [133, 0, 0, "-", "quantize_graph_concatv2"], [134, 0, 0, "-", "quantize_graph_conv"], [135, 0, 0, "-", "quantize_graph_for_intel_cpu"], [136, 0, 0, "-", "quantize_graph_matmul"], [137, 0, 0, "-", "quantize_graph_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[112, 0, 0, "-", "fake_quantize"], [114, 0, 0, "-", "quantize_config"], [115, 0, 0, "-", "quantize_helper"], [116, 0, 0, "-", "quantize_layers"], [121, 0, 0, "-", "quantize_wrapper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[112, 2, 1, "", "FakeQuantize"], [112, 2, 1, "", "FakeQuantizeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[114, 2, 1, "", "QuantizeConfig"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[115, 1, 1, "", "init_quantize_config"], [115, 1, 1, "", "qat_clone_function"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[117, 0, 0, "-", "optimize_layer"], [118, 0, 0, "-", "quantize_layer_add"], [119, 0, 0, "-", "quantize_layer_base"], [120, 0, 0, "-", "quantize_layer_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer": [[117, 1, 1, "", "config_quantizable_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[118, 2, 1, "", "QuantizeLayerAdd"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[119, 2, 1, "", "QuantizeLayerBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[120, 2, 1, "", "QuantizeLayerBatchNormalization"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[121, 2, 1, "", "QuantizeWrapper"], [121, 2, 1, "", "QuantizeWrapperBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[122, 0, 0, "-", "fuse_qdq_bn"], [123, 0, 0, "-", "fuse_qdq_concatv2"], [124, 0, 0, "-", "fuse_qdq_conv"], [125, 0, 0, "-", "fuse_qdq_deconv"], [126, 0, 0, "-", "fuse_qdq_in"], [127, 0, 0, "-", "fuse_qdq_matmul"], [128, 0, 0, "-", "fuse_qdq_pooling"], [130, 0, 0, "-", "optimize_qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[122, 2, 1, "", "FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[123, 2, 1, "", "FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[124, 2, 1, "", "FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[125, 2, 1, "", "FuseNodeStartWithDeconv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[126, 2, 1, "", "FuseNodeStartWithFusedInstanceNorm"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[127, 2, 1, "", "FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[128, 2, 1, "", "FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[130, 2, 1, "", "OptimizeQDQGraph"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[131, 2, 1, "", "QuantizeGraphBase"], [131, 2, 1, "", "QuantizeNodeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[132, 2, 1, "", "FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[133, 2, 1, "", "FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[134, 2, 1, "", "FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[135, 2, 1, "", "QuantizeGraphForIntel"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[136, 2, 1, "", "FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[137, 2, 1, "", "FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[138, 2, 1, "", "QuantizeGraphHelper"]], "neural_compressor.adaptor.tf_utils.tf2onnx_converter": [[139, 2, 1, "", "TensorflowQDQToOnnxQDQConverter"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[140, 0, 0, "-", "bias_correction"], [141, 0, 0, "-", "graph_transform_base"], [143, 0, 0, "-", "insert_logging"], [144, 0, 0, "-", "rerange_quantized_concat"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[140, 2, 1, "", "BiasCorrection"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[141, 2, 1, "", "GraphTransformBase"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[143, 2, 1, "", "InsertLogging"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[144, 2, 1, "", "RerangeQuantizedConcat"]], "neural_compressor.adaptor.tf_utils.util": [[145, 1, 1, "", "collate_tf_preds"], [145, 1, 1, "", "disable_random"], [145, 1, 1, "", "fix_ref_type_of_graph_def"], [145, 1, 1, "", "generate_feed_dict"], [145, 1, 1, "", "get_estimator_graph"], [145, 1, 1, "", "get_graph_def"], [145, 1, 1, "", "get_input_output_node_names"], [145, 1, 1, "", "get_model_input_shape"], [145, 1, 1, "", "get_tensor_by_name"], [145, 1, 1, "", "get_tensor_val_from_graph_node"], [145, 1, 1, "", "int8_node_name_reverse"], [145, 1, 1, "", "is_ckpt_format"], [145, 1, 1, "", "is_saved_model_format"], [145, 1, 1, "", "iterator_sess_run"], [145, 1, 1, "", "read_graph"], [145, 1, 1, "", "strip_equivalent_nodes"], [145, 1, 1, "", "strip_unused_nodes"], [145, 1, 1, "", "tf_diagnosis_helper"], [145, 1, 1, "", "version1_eq_version2"], [145, 1, 1, "", "version1_gt_version2"], [145, 1, 1, "", "version1_gte_version2"], [145, 1, 1, "", "version1_lt_version2"], [145, 1, 1, "", "version1_lte_version2"], [145, 1, 1, "", "write_graph"]], "neural_compressor.adaptor.torch_utils": [[146, 0, 0, "-", "bf16_convert"], [147, 0, 0, "-", "hawq_metric"], [149, 0, 0, "-", "model_wrapper"], [150, 0, 0, "-", "smooth_quant"], [151, 0, 0, "-", "symbolic_trace"], [152, 0, 0, "-", "util"]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[146, 2, 1, "", "BF16ModuleWrapper"], [146, 1, 1, "", "Convert"], [146, 1, 1, "", "bf16_symbolic_trace"]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[147, 2, 1, "", "HessianTrace"], [147, 2, 1, "", "Node_collector"], [147, 1, 1, "", "compare_weights"], [147, 1, 1, "", "hawq_top"]], "neural_compressor.adaptor.torch_utils.smooth_quant": [[150, 2, 1, "", "GraphTrace"], [150, 2, 1, "", "TorchSmoothQuant"], [150, 1, 1, "", "get_module"], [150, 1, 1, "", "set_module"], [150, 1, 1, "", "update_sq_scale"]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[151, 1, 1, "", "symbolic_trace"], [151, 1, 1, "", "trace_and_fuse_sub_graph"]], "neural_compressor.adaptor.torch_utils.util": [[152, 1, 1, "", "append_attr"], [152, 1, 1, "", "auto_copy"], [152, 1, 1, "", "calculate_quant_min_max"], [152, 1, 1, "", "check_cfg_and_qconfig"], [152, 1, 1, "", "collate_torch_preds"], [152, 1, 1, "", "fetch_module"], [152, 1, 1, "", "generate_activation_observer"], [152, 1, 1, "", "get_embedding_contiguous"], [152, 1, 1, "", "get_example_input"], [152, 1, 1, "", "get_fallback_order"], [152, 1, 1, "", "get_mse_order_per_fp32"], [152, 1, 1, "", "get_mse_order_per_int8"], [152, 1, 1, "", "get_quantizable_ops_from_cfgs"], [152, 1, 1, "", "get_torch_version"], [152, 1, 1, "", "input2tuple"], [152, 1, 1, "", "is_fused_module"], [152, 1, 1, "", "match_datatype_pattern"], [152, 1, 1, "", "paser_cfgs"], [152, 1, 1, "", "set_module"], [152, 1, 1, "", "simple_inference"]], "neural_compressor.algorithm": [[153, 0, 0, "-", "algorithm"], [154, 0, 0, "-", "fast_bias_correction"], [156, 0, 0, "-", "smooth_quant"], [157, 0, 0, "-", "weight_correction"]], "neural_compressor.algorithm.algorithm": [[153, 2, 1, "", "ALGORITHMS"], [153, 2, 1, "", "Algorithm"], [153, 2, 1, "", "AlgorithmScheduler"], [153, 1, 1, "", "algorithm_registry"]], "neural_compressor.algorithm.fast_bias_correction": [[154, 2, 1, "", "FastBiasCorrection"]], "neural_compressor.algorithm.smooth_quant": [[156, 2, 1, "", "SmoothQuant"]], "neural_compressor.algorithm.weight_correction": [[157, 2, 1, "", "WeightCorrection"]], "neural_compressor.benchmark": [[158, 1, 1, "", "fit"], [158, 1, 1, "", "get_architecture"], [158, 1, 1, "", "get_bounded_threads"], [158, 1, 1, "", "get_core_ids"], [158, 1, 1, "", "get_physical_ids"], [158, 1, 1, "", "get_threads"], [158, 1, 1, "", "get_threads_per_core"], [158, 1, 1, "", "set_all_env_var"], [158, 1, 1, "", "set_env_var"]], "neural_compressor.compression": [[159, 0, 0, "-", "callbacks"], [161, 0, 0, "-", "distillation"], [164, 0, 0, "-", "pruner"]], "neural_compressor.compression.callbacks": [[159, 2, 1, "", "BaseCallbacks"], [159, 2, 1, "", "DistillationCallbacks"], [159, 2, 1, "", "PruningCallbacks"], [159, 2, 1, "", "QuantizationAwareTrainingCallbacks"]], "neural_compressor.compression.callbacks.DistillationCallbacks": [[159, 3, 1, "", "_epoch_ran"], [159, 3, 1, "", "best_model"], [159, 3, 1, "", "best_score"], [159, 3, 1, "", "eval_frequency"]], "neural_compressor.compression.distillation": [[160, 0, 0, "-", "criterions"]], "neural_compressor.compression.distillation.criterions": [[160, 2, 1, "", "Criterions"], [160, 2, 1, "", "IntermediateLayersKnowledgeDistillationLoss"], [160, 2, 1, "", "KnowledgeDistillationFramework"], [160, 2, 1, "", "KnowledgeDistillationLoss"], [160, 2, 1, "", "PyTorchCriterions"], [160, 2, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLoss"], [160, 2, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"], [160, 2, 1, "", "PyTorchKnowledgeDistillationLoss"], [160, 2, 1, "", "PyTorchKnowledgeDistillationLossWrapper"], [160, 2, 1, "", "PyTorchSelfKnowledgeDistillationLoss"], [160, 2, 1, "", "PyTorchSelfKnowledgeDistillationLossWrapper"], [160, 2, 1, "", "SelfKnowledgeDistillationLoss"], [160, 2, 1, "", "TensorflowCriterions"], [160, 2, 1, "", "TensorflowKnowledgeDistillationLoss"], [160, 2, 1, "", "TensorflowKnowledgeDistillationLossExternal"], [160, 2, 1, "", "TensorflowKnowledgeDistillationLossWrapper"], [160, 1, 1, "", "criterion_registry"]], "neural_compressor.compression.pruner": [[163, 0, 0, "-", "criteria"], [166, 0, 0, "-", "model_slim"], [169, 0, 0, "-", "patterns"], [170, 0, 0, "-", "pruners"], [171, 0, 0, "-", "regs"], [172, 0, 0, "-", "schedulers"], [173, 0, 0, "-", "utils"]], "neural_compressor.compression.pruner.criteria": [[163, 2, 1, "", "GradientCriterion"], [163, 2, 1, "", "MagnitudeCriterion"], [163, 2, 1, "", "PruningCriterion"], [163, 2, 1, "", "RetrainFreeCriterion"], [163, 2, 1, "", "SnipCriterion"], [163, 2, 1, "", "SnipMomentumBlockCriterion"], [163, 2, 1, "", "SnipMomentumCriterion"], [163, 1, 1, "", "get_criterion"], [163, 1, 1, "", "register_criterion"]], "neural_compressor.compression.pruner.criteria.GradientCriterion": [[163, 3, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.MagnitudeCriterion": [[163, 3, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.PruningCriterion": [[163, 3, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.RetrainFreeCriterion": [[163, 3, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.SnipCriterion": [[163, 3, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.SnipMomentumBlockCriterion": [[163, 3, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.SnipMomentumCriterion": [[163, 3, 1, "", "scores"]], "neural_compressor.compression.pruner.model_slim": [[165, 0, 0, "-", "auto_slim"], [167, 0, 0, "-", "pattern_analyzer"], [168, 0, 0, "-", "weight_slim"]], "neural_compressor.compression.pruner.model_slim.auto_slim": [[165, 1, 1, "", "generate_ffn2_pruning_config"], [165, 1, 1, "", "generate_mha_pruning_config"], [165, 1, 1, "", "model_slim"], [165, 1, 1, "", "model_slim_ffn2"], [165, 1, 1, "", "model_slim_mha"], [165, 1, 1, "", "parse_auto_slim_config"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer": [[167, 2, 1, "", "ClassifierHeadSearcher"], [167, 2, 1, "", "JitBasicSearcher"], [167, 2, 1, "", "Linear2LinearSearcher"], [167, 2, 1, "", "RecipeSearcher"], [167, 2, 1, "", "SelfMHASearcher"], [167, 1, 1, "", "get_attributes"], [167, 1, 1, "", "print_iterables"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher": [[167, 3, 1, "", "device"], [167, 3, 1, "", "flatten_static_graph"], [167, 3, 1, "", "model"], [167, 3, 1, "", "static_graph"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher": [[167, 3, 1, "", "device"], [167, 3, 1, "", "flatten_static_graph"], [167, 3, 1, "", "model"], [167, 3, 1, "", "searching_results"], [167, 3, 1, "", "static_graph"], [167, 3, 1, "", "target_layers"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher": [[167, 3, 1, "", "current_pattern"], [167, 3, 1, "", "device"], [167, 3, 1, "", "flatten_static_graph"], [167, 3, 1, "", "model"], [167, 3, 1, "", "searching_results"], [167, 3, 1, "", "static_graph"], [167, 3, 1, "", "target_layers"], [167, 3, 1, "", "target_op_lut"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher": [[167, 3, 1, "", "model"], [167, 3, 1, "", "recipe"], [167, 3, 1, "", "searching_results"], [167, 3, 1, "", "targets"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher": [[167, 3, 1, "", "device"], [167, 3, 1, "", "flatten_static_graph"], [167, 3, 1, "", "model"], [167, 3, 1, "", "static_graph"]], "neural_compressor.compression.pruner.model_slim.weight_slim": [[168, 2, 1, "", "LinearCompression"], [168, 2, 1, "", "LinearCompressionIterator"], [168, 2, 1, "", "MHACompression"], [168, 2, 1, "", "PostCompressionUtils"]], "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression": [[168, 3, 1, "", "device"], [168, 3, 1, "", "layer_1"], [168, 3, 1, "", "layer_2"]], "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompressionIterator": [[168, 3, 1, "", "linear_patterns"]], "neural_compressor.compression.pruner.patterns": [[169, 2, 1, "", "BasePattern"], [169, 2, 1, "", "PatternNInM"], [169, 2, 1, "", "PatternNxM"], [169, 1, 1, "", "get_pattern"], [169, 1, 1, "", "register_pattern"]], "neural_compressor.compression.pruner.patterns.BasePattern": [[169, 3, 1, "", "config"], [169, 3, 1, "", "invalid_layers"], [169, 3, 1, "", "is_global"], [169, 3, 1, "", "keep_mask_layers"], [169, 3, 1, "", "max_sparsity_ratio_per_op"], [169, 3, 1, "", "min_sparsity_ratio_per_op"], [169, 3, 1, "", "modules"], [169, 3, 1, "", "pattern"], [169, 3, 1, "", "target_sparsity"]], "neural_compressor.compression.pruner.patterns.PatternNInM": [[169, 3, 1, "", "M"], [169, 3, 1, "", "N"]], "neural_compressor.compression.pruner.patterns.PatternNxM": [[169, 3, 1, "", "block_size"]], "neural_compressor.compression.pruner.pruners": [[170, 2, 1, "", "BasePruner"], [170, 2, 1, "", "BasicPruner"], [170, 2, 1, "", "BlockMaskPruner"], [170, 2, 1, "", "PatternLockPruner"], [170, 2, 1, "", "ProgressivePruner"], [170, 2, 1, "", "RetrainFreePruner"], [170, 1, 1, "", "get_pruner"], [170, 1, 1, "", "parse_valid_pruner_types"], [170, 1, 1, "", "register_pruner"]], "neural_compressor.compression.pruner.pruners.BasePruner": [[170, 3, 1, "", "config"], [170, 3, 1, "", "current_sparsity_ratio"], [170, 3, 1, "", "end_step"], [170, 3, 1, "", "global_step"], [170, 3, 1, "", "masks"], [170, 3, 1, "", "max_sparsity_ratio_per_op"], [170, 3, 1, "", "modules"], [170, 3, 1, "", "pattern"], [170, 3, 1, "", "pruning_frequency"], [170, 3, 1, "", "scheduler"], [170, 3, 1, "", "scores"], [170, 3, 1, "", "start_step"], [170, 3, 1, "", "target_sparsity_ratio"]], "neural_compressor.compression.pruner.pruners.BasicPruner": [[170, 3, 1, "", "criterion"], [170, 3, 1, "", "pattern"], [170, 3, 1, "", "reg"], [170, 3, 1, "", "scheduler"]], "neural_compressor.compression.pruner.pruners.BlockMaskPruner": [[170, 3, 1, "", "criterion"], [170, 3, 1, "", "pattern"], [170, 3, 1, "", "reg"], [170, 3, 1, "", "scheduler"]], "neural_compressor.compression.pruner.pruners.RetrainFreePruner": [[170, 3, 1, "", "criterion"], [170, 3, 1, "", "pattern"], [170, 3, 1, "", "reg"], [170, 3, 1, "", "scheduler"]], "neural_compressor.compression.pruner.regs": [[171, 2, 1, "", "BaseReg"], [171, 2, 1, "", "GroupLasso"], [171, 1, 1, "", "get_reg"], [171, 1, 1, "", "get_reg_type"], [171, 1, 1, "", "register_reg"]], "neural_compressor.compression.pruner.regs.GroupLasso": [[171, 3, 1, "", "alpha"], [171, 3, 1, "", "reg_terms"]], "neural_compressor.compression.pruner.schedulers": [[172, 2, 1, "", "IterativeScheduler"], [172, 2, 1, "", "OneshotScheduler"], [172, 2, 1, "", "PruningScheduler"], [172, 1, 1, "", "get_scheduler"], [172, 1, 1, "", "register_scheduler"]], "neural_compressor.compression.pruner.schedulers.PruningScheduler": [[172, 3, 1, "", "config"]], "neural_compressor.compression.pruner.utils": [[173, 1, 1, "", "check_config"], [173, 1, 1, "", "check_key_validity"], [173, 1, 1, "", "generate_pruner_config"], [173, 1, 1, "", "get_sparsity_ratio"], [173, 1, 1, "", "parse_last_linear"], [173, 1, 1, "", "parse_to_prune"], [173, 1, 1, "", "process_and_check_config"], [173, 1, 1, "", "process_config"], [173, 1, 1, "", "process_weight_config"], [173, 1, 1, "", "process_yaml_config"], [173, 1, 1, "", "reset_none_to_default"], [173, 1, 1, "", "update_params"]], "neural_compressor.conf": [[174, 0, 0, "-", "config"], [175, 0, 0, "-", "dotdict"], [177, 0, 0, "-", "pythonic_config"]], "neural_compressor.conf.config": [[174, 2, 1, "", "Benchmark_Conf"], [174, 2, 1, "", "Conf"], [174, 2, 1, "", "Distillation_Conf"], [174, 2, 1, "", "Graph_Optimization_Conf"], [174, 2, 1, "", "MixedPrecision_Conf"], [174, 2, 1, "", "NASConfig"], [174, 2, 1, "", "PrunerV2"], [174, 2, 1, "", "Pruning_Conf"], [174, 2, 1, "", "Quantization_Conf"]], "neural_compressor.conf.dotdict": [[175, 2, 1, "", "DotDict"], [175, 1, 1, "", "deep_get"], [175, 1, 1, "", "deep_set"]], "neural_compressor.conf.pythonic_config": [[177, 2, 1, "", "QuantizationConfig"]], "neural_compressor.config": [[178, 2, 1, "", "AccuracyCriterion"], [178, 2, 1, "", "BenchmarkConfig"], [178, 2, 1, "", "DistillationConfig"], [178, 2, 1, "", "ExportConfig"], [178, 2, 1, "", "IntermediateLayersKnowledgeDistillationLossConfig"], [178, 2, 1, "", "KnowledgeDistillationLossConfig"], [178, 2, 1, "", "MixedPrecisionConfig"], [178, 2, 1, "", "ONNXQlinear2QDQConfig"], [178, 2, 1, "", "Options"], [178, 2, 1, "", "PostTrainingQuantConfig"], [178, 2, 1, "", "QuantizationAwareTrainingConfig"], [178, 2, 1, "", "SelfKnowledgeDistillationLossConfig"], [178, 2, 1, "", "TF2ONNXConfig"], [178, 2, 1, "", "Torch2ONNXConfig"], [178, 2, 1, "", "TuningCriterion"], [178, 2, 1, "", "WeightPruningConfig"]], "neural_compressor.contrib": [[180, 0, 0, "-", "strategy"]], "neural_compressor.contrib.strategy": [[181, 0, 0, "-", "sigopt"], [182, 0, 0, "-", "tpe"]], "neural_compressor.contrib.strategy.sigopt": [[181, 2, 1, "", "SigOptTuneStrategy"]], "neural_compressor.contrib.strategy.tpe": [[182, 2, 1, "", "TpeTuneStrategy"]], "neural_compressor.data": [[187, 0, 0, "-", "dataloaders"], [199, 0, 0, "-", "datasets"], [203, 0, 0, "-", "filters"], [207, 0, 0, "-", "transforms"]], "neural_compressor.data.dataloaders": [[183, 0, 0, "-", "base_dataloader"], [184, 0, 0, "-", "dataloader"], [185, 0, 0, "-", "default_dataloader"], [186, 0, 0, "-", "fetcher"], [188, 0, 0, "-", "mxnet_dataloader"], [189, 0, 0, "-", "onnxrt_dataloader"], [190, 0, 0, "-", "pytorch_dataloader"], [191, 0, 0, "-", "sampler"], [192, 0, 0, "-", "tensorflow_dataloader"]], "neural_compressor.data.dataloaders.base_dataloader": [[183, 2, 1, "", "BaseDataLoader"]], "neural_compressor.data.dataloaders.dataloader": [[184, 2, 1, "", "DataLoader"]], "neural_compressor.data.dataloaders.default_dataloader": [[185, 2, 1, "", "DefaultDataLoader"], [185, 1, 1, "", "default_collate"]], "neural_compressor.data.dataloaders.fetcher": [[186, 2, 1, "", "Fetcher"], [186, 2, 1, "", "IndexFetcher"], [186, 2, 1, "", "IterableFetcher"]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[188, 2, 1, "", "MXNetDataLoader"]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[189, 2, 1, "", "ONNXRTBertDataLoader"], [189, 2, 1, "", "ONNXRTDataLoader"]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[190, 2, 1, "", "PyTorchDataLoader"]], "neural_compressor.data.dataloaders.sampler": [[191, 2, 1, "", "BatchSampler"], [191, 2, 1, "", "IterableSampler"], [191, 2, 1, "", "Sampler"], [191, 2, 1, "", "SequentialSampler"]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[192, 2, 1, "", "TFDataDataLoader"], [192, 2, 1, "", "TensorflowBertDataLoader"], [192, 2, 1, "", "TensorflowDataLoader"], [192, 2, 1, "", "TensorflowModelZooBertDataLoader"]], "neural_compressor.data.datasets": [[193, 0, 0, "-", "bert_dataset"], [194, 0, 0, "-", "coco_dataset"], [195, 0, 0, "-", "dataset"], [196, 0, 0, "-", "dummy_dataset"], [197, 0, 0, "-", "dummy_dataset_v2"], [198, 0, 0, "-", "imagenet_dataset"], [200, 0, 0, "-", "style_transfer_dataset"]], "neural_compressor.data.datasets.bert_dataset": [[193, 2, 1, "", "InputFeatures"], [193, 2, 1, "", "ONNXRTBertDataset"], [193, 2, 1, "", "ParseDecodeBert"], [193, 2, 1, "", "PytorchBertDataset"], [193, 2, 1, "", "TensorflowBertDataset"], [193, 2, 1, "", "TensorflowModelZooBertDataset"], [193, 1, 1, "", "convert_examples_to_features"], [193, 1, 1, "", "load_and_cache_examples"]], "neural_compressor.data.datasets.coco_dataset": [[194, 2, 1, "", "COCONpy"], [194, 2, 1, "", "COCORaw"], [194, 2, 1, "", "COCORecordDataset"], [194, 2, 1, "", "ParseDecodeCoco"]], "neural_compressor.data.datasets.dataset": [[195, 2, 1, "", "CIFAR10"], [195, 2, 1, "", "CIFAR100"], [195, 2, 1, "", "Dataset"], [195, 2, 1, "", "Datasets"], [195, 2, 1, "", "FashionMNIST"], [195, 2, 1, "", "ImageFolder"], [195, 2, 1, "", "IterableDataset"], [195, 2, 1, "", "MNIST"], [195, 2, 1, "", "MXNetCIFAR10"], [195, 2, 1, "", "MXNetCIFAR100"], [195, 2, 1, "", "MXNetDatasets"], [195, 2, 1, "", "MXNetFashionMNIST"], [195, 2, 1, "", "MXNetImageFolder"], [195, 2, 1, "", "MXNetMNIST"], [195, 2, 1, "", "ONNXRTITDatasets"], [195, 2, 1, "", "ONNXRTQLDatasets"], [195, 2, 1, "", "PyTorchDatasets"], [195, 2, 1, "", "PytorchCIFAR10"], [195, 2, 1, "", "PytorchCIFAR100"], [195, 2, 1, "", "PytorchFashionMNIST"], [195, 2, 1, "", "PytorchMNIST"], [195, 2, 1, "", "PytorchMxnetWrapDataset"], [195, 2, 1, "", "PytorchMxnetWrapFunction"], [195, 2, 1, "", "Tensorflow"], [195, 2, 1, "", "TensorflowCIFAR10"], [195, 2, 1, "", "TensorflowCIFAR100"], [195, 2, 1, "", "TensorflowDatasets"], [195, 2, 1, "", "TensorflowFashionMNIST"], [195, 2, 1, "", "TensorflowImageRecord"], [195, 2, 1, "", "TensorflowMNIST"], [195, 2, 1, "", "TensorflowTFRecordDataset"], [195, 2, 1, "", "TensorflowVOCRecord"], [195, 1, 1, "", "calculate_md5"], [195, 1, 1, "", "check_integrity"], [195, 1, 1, "", "dataset_registry"], [195, 1, 1, "", "download_url"], [195, 4, 1, "", "framework_datasets"], [195, 1, 1, "", "gen_bar_updater"]], "neural_compressor.data.datasets.dummy_dataset": [[196, 2, 1, "", "DummyDataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[197, 2, 1, "", "DummyDataset"], [197, 2, 1, "", "SparseDummyDataset"]], "neural_compressor.data.datasets.imagenet_dataset": [[198, 2, 1, "", "ImagenetRaw"], [198, 2, 1, "", "MXNetImagenetRaw"], [198, 2, 1, "", "ONNXRTImagenetDataset"], [198, 2, 1, "", "PytorchImagenetRaw"], [198, 2, 1, "", "TensorflowImagenetDataset"], [198, 2, 1, "", "TensorflowImagenetRaw"]], "neural_compressor.data.datasets.style_transfer_dataset": [[200, 2, 1, "", "StyleTransferDataset"]], "neural_compressor.data.filters": [[201, 0, 0, "-", "coco_filter"], [202, 0, 0, "-", "filter"]], "neural_compressor.data.filters.coco_filter": [[201, 2, 1, "", "LabelBalanceCOCORawFilter"], [201, 2, 1, "", "LabelBalanceCOCORecordFilter"]], "neural_compressor.data.filters.filter": [[202, 2, 1, "", "FILTERS"], [202, 2, 1, "", "Filter"], [202, 2, 1, "", "MXNetFilters"], [202, 2, 1, "", "ONNXRTITFilters"], [202, 2, 1, "", "ONNXRTQLFilters"], [202, 2, 1, "", "PyTorchFilters"], [202, 2, 1, "", "TensorflowFilters"], [202, 1, 1, "", "filter_registry"]], "neural_compressor.data.transforms": [[205, 0, 0, "-", "coco_transform"], [206, 0, 0, "-", "imagenet_transform"], [208, 0, 0, "-", "postprocess"], [209, 0, 0, "-", "tokenization"], [210, 0, 0, "-", "transform"]], "neural_compressor.data.transforms.coco_transform": [[205, 2, 1, "", "ParseDecodeCocoTransform"]], "neural_compressor.data.transforms.imagenet_transform": [[206, 2, 1, "", "BilinearImagenetTransform"], [206, 2, 1, "", "LabelShift"], [206, 2, 1, "", "ONNXResizeCropImagenetTransform"], [206, 2, 1, "", "OnnxBilinearImagenetTransform"], [206, 2, 1, "", "ParseDecodeImagenet"], [206, 2, 1, "", "ParseDecodeImagenetTransform"], [206, 2, 1, "", "QuantizedInput"], [206, 2, 1, "", "ResizeWithAspectRatio"], [206, 2, 1, "", "TensorflowResizeCropImagenetTransform"]], "neural_compressor.data.transforms.postprocess": [[208, 2, 1, "", "Postprocess"]], "neural_compressor.data.transforms.tokenization": [[209, 2, 1, "", "BasicTokenizer"], [209, 2, 1, "", "FullTokenizer"], [209, 2, 1, "", "WordpieceTokenizer"], [209, 1, 1, "", "convert_by_vocab"], [209, 1, 1, "", "convert_to_unicode"], [209, 1, 1, "", "load_vocab"], [209, 1, 1, "", "whitespace_tokenize"]], "neural_compressor.data.transforms.transform": [[210, 2, 1, "", "AlignImageChannelTransform"], [210, 2, 1, "", "BaseTransform"], [210, 2, 1, "", "CastONNXTransform"], [210, 2, 1, "", "CastPyTorchTransform"], [210, 2, 1, "", "CastTFTransform"], [210, 2, 1, "", "CenterCropTFTransform"], [210, 2, 1, "", "CenterCropTransform"], [210, 2, 1, "", "CollectTransform"], [210, 2, 1, "", "ComposeTransform"], [210, 2, 1, "", "CropResizeTFTransform"], [210, 2, 1, "", "CropResizeTransform"], [210, 2, 1, "", "CropToBoundingBox"], [210, 2, 1, "", "InputFeatures"], [210, 2, 1, "", "MXNetCropResizeTransform"], [210, 2, 1, "", "MXNetCropToBoundingBox"], [210, 2, 1, "", "MXNetNormalizeTransform"], [210, 2, 1, "", "MXNetTransforms"], [210, 2, 1, "", "MXNetTranspose"], [210, 2, 1, "", "NormalizeTFTransform"], [210, 2, 1, "", "NormalizeTransform"], [210, 2, 1, "", "ONNXRTCropToBoundingBox"], [210, 2, 1, "", "ONNXRTITTransforms"], [210, 2, 1, "", "ONNXRTQLTransforms"], [210, 2, 1, "", "PaddedCenterCropTransform"], [210, 2, 1, "", "ParseDecodeVocTransform"], [210, 2, 1, "", "PyTorchAlignImageChannel"], [210, 2, 1, "", "PyTorchCropResizeTransform"], [210, 2, 1, "", "PyTorchNormalizeTransform"], [210, 2, 1, "", "PyTorchTransforms"], [210, 2, 1, "", "PyTorchTranspose"], [210, 2, 1, "", "PytorchMxnetTransform"], [210, 2, 1, "", "PytorchMxnetWrapFunction"], [210, 2, 1, "", "RandomCropTFTransform"], [210, 2, 1, "", "RandomCropTransform"], [210, 2, 1, "", "RandomHorizontalFlip"], [210, 2, 1, "", "RandomResizedCropMXNetTransform"], [210, 2, 1, "", "RandomResizedCropPytorchTransform"], [210, 2, 1, "", "RandomResizedCropTFTransform"], [210, 2, 1, "", "RandomResizedCropTransform"], [210, 2, 1, "", "RandomVerticalFlip"], [210, 2, 1, "", "RescaleKerasPretrainTransform"], [210, 2, 1, "", "RescaleTFTransform"], [210, 2, 1, "", "RescaleTransform"], [210, 2, 1, "", "ResizeMXNetTransform"], [210, 2, 1, "", "ResizePytorchTransform"], [210, 2, 1, "", "ResizeTFTransform"], [210, 2, 1, "", "ResizeTransform"], [210, 2, 1, "", "ResizeWithRatio"], [210, 2, 1, "", "SquadExample"], [210, 2, 1, "", "TFModelZooCollectTransform"], [210, 2, 1, "", "TFSquadV1ModelZooPostTransform"], [210, 2, 1, "", "TFSquadV1PostTransform"], [210, 2, 1, "", "TRANSFORMS"], [210, 2, 1, "", "TensorflowCropToBoundingBox"], [210, 2, 1, "", "TensorflowRandomHorizontalFlip"], [210, 2, 1, "", "TensorflowRandomVerticalFlip"], [210, 2, 1, "", "TensorflowResizeWithRatio"], [210, 2, 1, "", "TensorflowTransform"], [210, 2, 1, "", "TensorflowTransforms"], [210, 2, 1, "", "TensorflowTranspose"], [210, 2, 1, "", "TensorflowWrapFunction"], [210, 2, 1, "", "ToArray"], [210, 2, 1, "", "ToNDArrayTransform"], [210, 2, 1, "", "Transforms"], [210, 2, 1, "", "Transpose"], [210, 1, 1, "", "convert_examples_to_features"], [210, 1, 1, "", "get_final_text"], [210, 1, 1, "", "get_torchvision_map"], [210, 1, 1, "", "read_squad_examples"], [210, 1, 1, "", "transform_registry"]], "neural_compressor.experimental": [[211, 0, 0, "-", "benchmark"], [214, 0, 0, "-", "common"], [220, 0, 0, "-", "component"], [221, 0, 0, "-", "compression"], [244, 0, 0, "-", "data"], [249, 0, 0, "-", "distillation"], [250, 0, 0, "-", "export"], [255, 0, 0, "-", "graph_optimization"], [263, 0, 0, "-", "metric"], [265, 0, 0, "-", "mixed_precision"], [266, 0, 0, "-", "model_conversion"], [269, 0, 0, "-", "nas"], [275, 0, 0, "-", "pruner_legacy"], [279, 0, 0, "-", "pruning"], [280, 0, 0, "-", "pruning_recipes"], [284, 0, 0, "-", "pruning_v2"], [285, 0, 0, "-", "pytorch_pruner"], [292, 0, 0, "-", "quantization"], [293, 0, 0, "-", "scheduler"]], "neural_compressor.experimental.benchmark": [[211, 2, 1, "", "Benchmark"], [211, 1, 1, "", "get_architecture"], [211, 1, 1, "", "get_bounded_threads"], [211, 1, 1, "", "get_core_ids"], [211, 1, 1, "", "get_physical_ids"], [211, 1, 1, "", "get_threads"], [211, 1, 1, "", "get_threads_per_core"], [211, 1, 1, "", "set_all_env_var"], [211, 1, 1, "", "set_env_var"]], "neural_compressor.experimental.common": [[212, 0, 0, "-", "criterion"], [213, 0, 0, "-", "dataloader"], [215, 0, 0, "-", "metric"], [216, 0, 0, "-", "model"], [217, 0, 0, "-", "optimizer"], [218, 0, 0, "-", "postprocess"], [219, 0, 0, "-", "torch_utils"]], "neural_compressor.experimental.common.criterion": [[212, 2, 1, "", "Criterions"], [212, 2, 1, "", "IntermediateLayersKnowledgeDistillationLoss"], [212, 2, 1, "", "KnowledgeDistillationFramework"], [212, 2, 1, "", "KnowledgeDistillationLoss"], [212, 2, 1, "", "PyTorchCriterions"], [212, 2, 1, "", "PyTorchCrossEntropyLoss"], [212, 2, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLoss"], [212, 2, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"], [212, 2, 1, "", "PyTorchKnowledgeDistillationLoss"], [212, 2, 1, "", "PyTorchKnowledgeDistillationLossWrapper"], [212, 2, 1, "", "PyTorchSelfKnowledgeDistillationLoss"], [212, 2, 1, "", "PyTorchSelfKnowledgeDistillationLossWrapper"], [212, 2, 1, "", "SelfKnowledgeDistillationLoss"], [212, 2, 1, "", "TensorFlowCrossEntropyLoss"], [212, 2, 1, "", "TensorFlowSparseCategoricalCrossentropy"], [212, 2, 1, "", "TensorflowCriterions"], [212, 2, 1, "", "TensorflowKnowledgeDistillationLoss"], [212, 2, 1, "", "TensorflowKnowledgeDistillationLossExternal"], [212, 2, 1, "", "TensorflowKnowledgeDistillationLossWrapper"], [212, 1, 1, "", "criterion_registry"]], "neural_compressor.experimental.common.dataloader": [[213, 2, 1, "", "DataLoader"]], "neural_compressor.experimental.common.metric": [[215, 2, 1, "", "Metric"]], "neural_compressor.experimental.common.model": [[216, 2, 1, "", "Model"], [216, 1, 1, "", "set_backend"]], "neural_compressor.experimental.common.optimizer": [[217, 2, 1, "", "Optimizers"], [217, 2, 1, "", "PyTorchOptimizers"], [217, 2, 1, "", "PyTorchSGD"], [217, 2, 1, "", "TensorFlowAdam"], [217, 2, 1, "", "TensorFlowAdamW"], [217, 2, 1, "", "TensorFlowSGD"], [217, 2, 1, "", "TensorflowOptimizers"], [217, 1, 1, "", "optimizer_registry"]], "neural_compressor.experimental.common.postprocess": [[218, 2, 1, "", "Postprocess"]], "neural_compressor.experimental.common.torch_utils": [[219, 1, 1, "", "get_activation"], [219, 1, 1, "", "record_output"]], "neural_compressor.experimental.component": [[220, 2, 1, "", "Component"]], "neural_compressor.experimental.compression": [[222, 0, 0, "-", "pruning"]], "neural_compressor.experimental.compression.pruning": [[222, 1, 1, "", "prepare_pruning"], [222, 1, 1, "", "save"]], "neural_compressor.experimental.data": [[227, 0, 0, "-", "dataloaders"], [239, 0, 0, "-", "datasets"], [243, 0, 0, "-", "filters"], [246, 0, 0, "-", "transforms"]], "neural_compressor.experimental.data.dataloaders": [[223, 0, 0, "-", "base_dataloader"], [224, 0, 0, "-", "dataloader"], [225, 0, 0, "-", "default_dataloader"], [226, 0, 0, "-", "fetcher"], [228, 0, 0, "-", "mxnet_dataloader"], [229, 0, 0, "-", "onnxrt_dataloader"], [230, 0, 0, "-", "pytorch_dataloader"], [231, 0, 0, "-", "sampler"], [232, 0, 0, "-", "tensorflow_dataloader"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[223, 2, 1, "", "BaseDataLoader"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[225, 2, 1, "", "DefaultDataLoader"], [225, 1, 1, "", "default_collate"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[226, 2, 1, "", "Fetcher"], [226, 2, 1, "", "IndexFetcher"], [226, 2, 1, "", "IterableFetcher"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[228, 2, 1, "", "MXNetDataLoader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[229, 2, 1, "", "ONNXRTBertDataLoader"], [229, 2, 1, "", "ONNXRTDataLoader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[230, 2, 1, "", "PyTorchDataLoader"]], "neural_compressor.experimental.data.dataloaders.sampler": [[231, 2, 1, "", "BatchSampler"], [231, 2, 1, "", "IterableSampler"], [231, 2, 1, "", "Sampler"], [231, 2, 1, "", "SequentialSampler"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[232, 2, 1, "", "TFDataDataLoader"], [232, 2, 1, "", "TensorflowBertDataLoader"], [232, 2, 1, "", "TensorflowDataLoader"], [232, 2, 1, "", "TensorflowModelZooBertDataLoader"]], "neural_compressor.experimental.data.datasets": [[233, 0, 0, "-", "bert_dataset"], [234, 0, 0, "-", "coco_dataset"], [235, 0, 0, "-", "dataset"], [236, 0, 0, "-", "dummy_dataset"], [237, 0, 0, "-", "dummy_dataset_v2"], [238, 0, 0, "-", "imagenet_dataset"], [240, 0, 0, "-", "style_transfer_dataset"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[233, 2, 1, "", "InputFeatures"], [233, 2, 1, "", "ONNXRTBertDataset"], [233, 2, 1, "", "ParseDecodeBert"], [233, 2, 1, "", "PytorchBertDataset"], [233, 2, 1, "", "TensorflowBertDataset"], [233, 2, 1, "", "TensorflowModelZooBertDataset"], [233, 1, 1, "", "convert_examples_to_features"], [233, 1, 1, "", "load_and_cache_examples"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[234, 2, 1, "", "COCONpy"], [234, 2, 1, "", "COCORaw"], [234, 2, 1, "", "COCORecordDataset"], [234, 2, 1, "", "ParseDecodeCoco"]], "neural_compressor.experimental.data.datasets.dataset": [[235, 2, 1, "", "CIFAR10"], [235, 2, 1, "", "CIFAR100"], [235, 2, 1, "", "Dataset"], [235, 2, 1, "", "Datasets"], [235, 2, 1, "", "FashionMNIST"], [235, 2, 1, "", "ImageFolder"], [235, 2, 1, "", "IterableDataset"], [235, 2, 1, "", "MNIST"], [235, 2, 1, "", "MXNetCIFAR10"], [235, 2, 1, "", "MXNetCIFAR100"], [235, 2, 1, "", "MXNetDatasets"], [235, 2, 1, "", "MXNetFashionMNIST"], [235, 2, 1, "", "MXNetImageFolder"], [235, 2, 1, "", "MXNetMNIST"], [235, 2, 1, "", "ONNXRTITDatasets"], [235, 2, 1, "", "ONNXRTQLDatasets"], [235, 2, 1, "", "PyTorchDatasets"], [235, 2, 1, "", "PytorchCIFAR10"], [235, 2, 1, "", "PytorchCIFAR100"], [235, 2, 1, "", "PytorchFashionMNIST"], [235, 2, 1, "", "PytorchMNIST"], [235, 2, 1, "", "PytorchMxnetWrapDataset"], [235, 2, 1, "", "PytorchMxnetWrapFunction"], [235, 2, 1, "", "TensorflowCIFAR10"], [235, 2, 1, "", "TensorflowCIFAR100"], [235, 2, 1, "", "TensorflowDatasets"], [235, 2, 1, "", "TensorflowFashionMNIST"], [235, 2, 1, "", "TensorflowImageFolder"], [235, 2, 1, "", "TensorflowImageRecord"], [235, 2, 1, "", "TensorflowMNIST"], [235, 2, 1, "", "TensorflowTFRecordDataset"], [235, 2, 1, "", "TensorflowVOCRecord"], [235, 1, 1, "", "calculate_md5"], [235, 1, 1, "", "check_integrity"], [235, 1, 1, "", "dataset_registry"], [235, 1, 1, "", "download_url"], [235, 4, 1, "", "framework_datasets"], [235, 1, 1, "", "gen_bar_updater"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[236, 2, 1, "", "DummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[237, 2, 1, "", "DummyDataset"], [237, 2, 1, "", "SparseDummyDataset"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[238, 2, 1, "", "ImagenetRaw"], [238, 2, 1, "", "MXNetImagenetRaw"], [238, 2, 1, "", "ONNXRTImagenetDataset"], [238, 2, 1, "", "PytorchImagenetRaw"], [238, 2, 1, "", "TensorflowImagenetDataset"], [238, 2, 1, "", "TensorflowImagenetRaw"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[240, 2, 1, "", "StyleTransferDataset"]], "neural_compressor.experimental.data.filters": [[241, 0, 0, "-", "coco_filter"], [242, 0, 0, "-", "filter"]], "neural_compressor.experimental.data.filters.coco_filter": [[241, 2, 1, "", "LabelBalanceCOCORawFilter"], [241, 2, 1, "", "LabelBalanceCOCORecordFilter"]], "neural_compressor.experimental.data.filters.filter": [[242, 2, 1, "", "FILTERS"], [242, 2, 1, "", "Filter"], [242, 2, 1, "", "MXNetFilters"], [242, 2, 1, "", "ONNXRTITFilters"], [242, 2, 1, "", "ONNXRTQLFilters"], [242, 2, 1, "", "PyTorchFilters"], [242, 2, 1, "", "TensorflowFilters"], [242, 1, 1, "", "filter_registry"]], "neural_compressor.experimental.data.transforms": [[245, 0, 0, "-", "imagenet_transform"], [247, 0, 0, "-", "tokenization"], [248, 0, 0, "-", "transform"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[245, 2, 1, "", "BilinearImagenetTransform"], [245, 2, 1, "", "LabelShift"], [245, 2, 1, "", "ONNXResizeCropImagenetTransform"], [245, 2, 1, "", "OnnxBilinearImagenetTransform"], [245, 2, 1, "", "ParseDecodeImagenet"], [245, 2, 1, "", "ParseDecodeImagenetTransform"], [245, 2, 1, "", "QuantizedInput"], [245, 2, 1, "", "ResizeWithAspectRatio"], [245, 2, 1, "", "TensorflowResizeCropImagenetTransform"]], "neural_compressor.experimental.data.transforms.tokenization": [[247, 2, 1, "", "BasicTokenizer"], [247, 2, 1, "", "FullTokenizer"], [247, 2, 1, "", "WordpieceTokenizer"], [247, 1, 1, "", "convert_by_vocab"], [247, 1, 1, "", "convert_to_unicode"], [247, 1, 1, "", "load_vocab"], [247, 1, 1, "", "whitespace_tokenize"]], "neural_compressor.experimental.data.transforms.transform": [[248, 2, 1, "", "AlignImageChannelTransform"], [248, 2, 1, "", "BaseTransform"], [248, 2, 1, "", "CastONNXTransform"], [248, 2, 1, "", "CastPyTorchTransform"], [248, 2, 1, "", "CastTFTransform"], [248, 2, 1, "", "CenterCropTFTransform"], [248, 2, 1, "", "CenterCropTransform"], [248, 2, 1, "", "CollectTransform"], [248, 2, 1, "", "ComposeTransform"], [248, 2, 1, "", "CropResizeTFTransform"], [248, 2, 1, "", "CropResizeTransform"], [248, 2, 1, "", "CropToBoundingBox"], [248, 2, 1, "", "InputFeatures"], [248, 2, 1, "", "MXNetCropResizeTransform"], [248, 2, 1, "", "MXNetCropToBoundingBox"], [248, 2, 1, "", "MXNetNormalizeTransform"], [248, 2, 1, "", "MXNetTransforms"], [248, 2, 1, "", "MXNetTranspose"], [248, 2, 1, "", "NormalizeTFTransform"], [248, 2, 1, "", "NormalizeTransform"], [248, 2, 1, "", "ONNXRTCropToBoundingBox"], [248, 2, 1, "", "ONNXRTITTransforms"], [248, 2, 1, "", "ONNXRTQLTransforms"], [248, 2, 1, "", "PaddedCenterCropTransform"], [248, 2, 1, "", "ParseDecodeVocTransform"], [248, 2, 1, "", "PyTorchAlignImageChannel"], [248, 2, 1, "", "PyTorchCropResizeTransform"], [248, 2, 1, "", "PyTorchNormalizeTransform"], [248, 2, 1, "", "PyTorchTransforms"], [248, 2, 1, "", "PyTorchTranspose"], [248, 2, 1, "", "PytorchMxnetTransform"], [248, 2, 1, "", "PytorchMxnetWrapFunction"], [248, 2, 1, "", "RandomCropTFTransform"], [248, 2, 1, "", "RandomCropTransform"], [248, 2, 1, "", "RandomHorizontalFlip"], [248, 2, 1, "", "RandomResizedCropMXNetTransform"], [248, 2, 1, "", "RandomResizedCropPytorchTransform"], [248, 2, 1, "", "RandomResizedCropTFTransform"], [248, 2, 1, "", "RandomResizedCropTransform"], [248, 2, 1, "", "RandomVerticalFlip"], [248, 2, 1, "", "RescaleKerasPretrainTransform"], [248, 2, 1, "", "RescaleTFTransform"], [248, 2, 1, "", "RescaleTransform"], [248, 2, 1, "", "ResizeMXNetTransform"], [248, 2, 1, "", "ResizePytorchTransform"], [248, 2, 1, "", "ResizeTFTransform"], [248, 2, 1, "", "ResizeTransform"], [248, 2, 1, "", "ResizeWithRatio"], [248, 2, 1, "", "SquadExample"], [248, 2, 1, "", "TFModelZooCollectTransform"], [248, 2, 1, "", "TFSquadV1ModelZooPostTransform"], [248, 2, 1, "", "TFSquadV1PostTransform"], [248, 2, 1, "", "TRANSFORMS"], [248, 2, 1, "", "TensorflowCropToBoundingBox"], [248, 2, 1, "", "TensorflowRandomHorizontalFlip"], [248, 2, 1, "", "TensorflowRandomVerticalFlip"], [248, 2, 1, "", "TensorflowResizeWithRatio"], [248, 2, 1, "", "TensorflowTransform"], [248, 2, 1, "", "TensorflowTransforms"], [248, 2, 1, "", "TensorflowTranspose"], [248, 2, 1, "", "TensorflowWrapFunction"], [248, 2, 1, "", "ToArray"], [248, 2, 1, "", "ToNDArrayTransform"], [248, 2, 1, "", "Transforms"], [248, 2, 1, "", "Transpose"], [248, 1, 1, "", "convert_examples_to_features"], [248, 1, 1, "", "get_final_text"], [248, 1, 1, "", "get_torchvision_map"], [248, 1, 1, "", "read_squad_examples"], [248, 1, 1, "", "transform_registry"]], "neural_compressor.experimental.distillation": [[249, 2, 1, "", "Distillation"]], "neural_compressor.experimental.distillation.Distillation": [[249, 3, 1, "", "_epoch_ran"], [249, 3, 1, "", "best_model"], [249, 3, 1, "", "best_score"], [249, 3, 1, "", "eval_frequency"]], "neural_compressor.experimental.export": [[251, 0, 0, "-", "qlinear2qdq"], [252, 0, 0, "-", "tf2onnx"], [253, 0, 0, "-", "torch2onnx"], [254, 0, 0, "-", "utils"]], "neural_compressor.experimental.export.qlinear2qdq": [[251, 1, 1, "", "check_model"], [251, 1, 1, "", "onnx_qlinear_to_qdq"]], "neural_compressor.experimental.export.tf2onnx": [[252, 1, 1, "", "tf_to_fp32_onnx"], [252, 1, 1, "", "tf_to_int8_onnx"]], "neural_compressor.experimental.export.torch2onnx": [[253, 1, 1, "", "build_scale_mapping"], [253, 1, 1, "", "get_node_mapping"], [253, 1, 1, "", "get_quantizable_onnx_ops"], [253, 1, 1, "", "qdq_fp32_bias"], [253, 1, 1, "", "qdq_fp32_bias_qdq"], [253, 1, 1, "", "qdq_int32_bias"], [253, 1, 1, "", "recalculate_bias"], [253, 1, 1, "", "remove_nodes_by_name"], [253, 1, 1, "", "set_data_type"], [253, 1, 1, "", "set_scale_info"], [253, 1, 1, "", "sub_graph_with_int32_bias"], [253, 1, 1, "", "torch_to_fp32_onnx"], [253, 1, 1, "", "torch_to_int8_onnx"], [253, 1, 1, "", "update_weight_bias"]], "neural_compressor.experimental.export.utils": [[254, 2, 1, "", "DummyDataReader"], [254, 1, 1, "", "ONNX2Numpy_dtype"]], "neural_compressor.experimental.graph_optimization": [[255, 2, 1, "", "Graph_Optimization"]], "neural_compressor.experimental.metric": [[257, 0, 0, "-", "bleu"], [258, 0, 0, "-", "bleu_util"], [259, 0, 0, "-", "coco_label_map"], [260, 0, 0, "-", "coco_tools"], [261, 0, 0, "-", "evaluate_squad"], [262, 0, 0, "-", "f1"], [264, 0, 0, "-", "metric"]], "neural_compressor.experimental.metric.bleu": [[257, 2, 1, "", "BLEU"], [257, 2, 1, "", "UnicodeRegex"], [257, 1, 1, "", "bleu_tokenize"]], "neural_compressor.experimental.metric.bleu.BLEU": [[257, 3, 1, "", "labels"], [257, 3, 1, "", "predictions"]], "neural_compressor.experimental.metric.bleu.UnicodeRegex": [[257, 3, 1, "", "nondigit_punct_re"], [257, 3, 1, "", "punct_nondigit_re"], [257, 3, 1, "", "symbol_re"]], "neural_compressor.experimental.metric.bleu_util": [[258, 1, 1, "", "compute_bleu"]], "neural_compressor.experimental.metric.coco_tools": [[260, 2, 1, "", "COCOEvalWrapper"], [260, 2, 1, "", "COCOWrapper"], [260, 1, 1, "", "ExportSingleImageDetectionBoxesToCoco"], [260, 1, 1, "", "ExportSingleImageDetectionMasksToCoco"], [260, 1, 1, "", "ExportSingleImageGroundtruthToCoco"]], "neural_compressor.experimental.metric.coco_tools.COCOWrapper": [[260, 3, 1, "", "dataset"], [260, 3, 1, "", "detection_type"]], "neural_compressor.experimental.metric.evaluate_squad": [[261, 1, 1, "", "evaluate"], [261, 1, 1, "", "exact_match_score"], [261, 1, 1, "", "f1_score"], [261, 1, 1, "", "metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.f1": [[262, 1, 1, "", "evaluate"], [262, 1, 1, "", "f1_score"], [262, 1, 1, "", "metric_max_over_ground_truths"], [262, 1, 1, "", "normalize_answer"]], "neural_compressor.experimental.metric.metric": [[264, 2, 1, "", "Accuracy"], [264, 2, 1, "", "BaseMetric"], [264, 2, 1, "", "COCOmAPv2"], [264, 2, 1, "", "F1"], [264, 2, 1, "", "GeneralTopK"], [264, 2, 1, "", "Loss"], [264, 2, 1, "", "MAE"], [264, 2, 1, "", "METRICS"], [264, 2, 1, "", "MSE"], [264, 2, 1, "", "MXNetMetrics"], [264, 2, 1, "", "ONNXRTGLUE"], [264, 2, 1, "", "ONNXRTITMetrics"], [264, 2, 1, "", "ONNXRTQLMetrics"], [264, 2, 1, "", "PyTorchLoss"], [264, 2, 1, "", "PyTorchMetrics"], [264, 2, 1, "", "RMSE"], [264, 2, 1, "", "ROC"], [264, 2, 1, "", "SquadF1"], [264, 2, 1, "", "TensorflowCOCOMAP"], [264, 2, 1, "", "TensorflowMAP"], [264, 2, 1, "", "TensorflowMetrics"], [264, 2, 1, "", "TensorflowTopK"], [264, 2, 1, "", "TensorflowVOCMAP"], [264, 2, 1, "", "WrapMXNetMetric"], [264, 2, 1, "", "WrapONNXRTMetric"], [264, 2, 1, "", "WrapPyTorchMetric"], [264, 2, 1, "", "mIOU"], [264, 1, 1, "", "metric_registry"]], "neural_compressor.experimental.metric.metric.Accuracy": [[264, 3, 1, "", "label_list"], [264, 3, 1, "", "pred_list"], [264, 3, 1, "", "sample"]], "neural_compressor.experimental.metric.metric.GeneralTopK": [[264, 3, 1, "", "k"], [264, 3, 1, "", "num_correct"], [264, 3, 1, "", "num_sample"]], "neural_compressor.experimental.metric.metric.Loss": [[264, 3, 1, "", "sample"], [264, 3, 1, "", "sum"]], "neural_compressor.experimental.metric.metric.MAE": [[264, 3, 1, "", "compare_label"], [264, 3, 1, "", "label_list"], [264, 3, 1, "", "pred_list"]], "neural_compressor.experimental.metric.metric.METRICS": [[264, 3, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.MSE": [[264, 3, 1, "", "compare_label"], [264, 3, 1, "", "label_list"], [264, 3, 1, "", "pred_list"]], "neural_compressor.experimental.metric.metric.MXNetMetrics": [[264, 3, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.ONNXRTITMetrics": [[264, 3, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics": [[264, 3, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.PyTorchMetrics": [[264, 3, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.RMSE": [[264, 3, 1, "", "mse"]], "neural_compressor.experimental.metric.metric.TensorflowMetrics": [[264, 3, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.TensorflowTopK": [[264, 3, 1, "", "k"], [264, 3, 1, "", "num_correct"], [264, 3, 1, "", "num_sample"]], "neural_compressor.experimental.mixed_precision": [[265, 2, 1, "", "MixedPrecision"]], "neural_compressor.experimental.model_conversion": [[266, 2, 1, "", "ModelConversion"]], "neural_compressor.experimental.nas": [[267, 0, 0, "-", "basic_nas"], [268, 0, 0, "-", "dynas"], [270, 0, 0, "-", "nas"], [271, 0, 0, "-", "nas_utils"], [272, 0, 0, "-", "search_algorithms"]], "neural_compressor.experimental.nas.basic_nas": [[267, 2, 1, "", "BasicNAS"]], "neural_compressor.experimental.nas.dynas": [[268, 2, 1, "", "DyNAS"]], "neural_compressor.experimental.nas.nas": [[270, 2, 1, "", "NAS"], [270, 2, 1, "", "NASBase"]], "neural_compressor.experimental.nas.nas_utils": [[271, 1, 1, "", "create_search_space_pool"], [271, 1, 1, "", "find_pareto_front"], [271, 1, 1, "", "nas_registry"]], "neural_compressor.experimental.nas.search_algorithms": [[272, 2, 1, "", "BayesianOptimizationSearcher"], [272, 2, 1, "", "GridSearcher"], [272, 2, 1, "", "RandomSearcher"], [272, 2, 1, "", "Searcher"]], "neural_compressor.experimental.pruner_legacy": [[273, 0, 0, "-", "gradient_sensitivity"], [274, 0, 0, "-", "group_lasso"], [276, 0, 0, "-", "magnitude"], [277, 0, 0, "-", "pattern_lock"], [278, 0, 0, "-", "pruner"]], "neural_compressor.experimental.pruner_legacy.gradient_sensitivity": [[273, 2, 1, "", "GradientSensitivityPruner"]], "neural_compressor.experimental.pruner_legacy.group_lasso": [[274, 2, 1, "", "GroupLassoPruner"]], "neural_compressor.experimental.pruner_legacy.magnitude": [[276, 2, 1, "", "BasicMagnitudePruner"]], "neural_compressor.experimental.pruner_legacy.pattern_lock": [[277, 2, 1, "", "PatternLockPruner"]], "neural_compressor.experimental.pruner_legacy.pruner": [[278, 2, 1, "", "Pruner"], [278, 1, 1, "", "pruner_registry"]], "neural_compressor.experimental.pruning": [[279, 2, 1, "", "Pruning"], [279, 2, 1, "", "TfPruningCallback"]], "neural_compressor.experimental.pruning.Pruning": [[279, 3, 1, "", "conf"], [279, 3, 1, "", "pruners"]], "neural_compressor.experimental.pruning_recipes": [[281, 0, 0, "-", "patterns"]], "neural_compressor.experimental.pruning_recipes.patterns": [[282, 0, 0, "-", "pattern"], [283, 0, 0, "-", "tile_pattern"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[282, 2, 1, "", "PATTERNS"], [282, 2, 1, "", "PatternBase"], [282, 1, 1, "", "pattern_registry"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS": [[282, 3, 1, "", "patterns"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[283, 2, 1, "", "TilePatternBase"], [283, 2, 1, "", "TilePattern_1x1"], [283, 2, 1, "", "TilePattern_1x16"], [283, 2, 1, "", "TilePattern_1x2"], [283, 2, 1, "", "TilePattern_2x2"], [283, 2, 1, "", "TilePattern_4x1"]], "neural_compressor.experimental.pruning_v2": [[284, 2, 1, "", "Pruning"], [284, 2, 1, "", "TfPruningCallback"]], "neural_compressor.experimental.pruning_v2.Pruning": [[284, 3, 1, "", "conf"], [284, 3, 1, "", "pruners"]], "neural_compressor.experimental.pytorch_pruner": [[286, 0, 0, "-", "logger"], [287, 0, 0, "-", "patterns"], [288, 0, 0, "-", "prune_utils"], [289, 0, 0, "-", "pruner"], [290, 0, 0, "-", "pruning"], [291, 0, 0, "-", "scheduler"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[287, 2, 1, "", "Pattern"], [287, 2, 1, "", "PatternNInM"], [287, 2, 1, "", "PatternNxM"], [287, 1, 1, "", "get_pattern"], [287, 1, 1, "", "register_pattern"]], "neural_compressor.experimental.pytorch_pruner.patterns.Pattern": [[287, 3, 1, "", "is_global"], [287, 3, 1, "", "pattern"]], "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM": [[287, 3, 1, "", "M"], [287, 3, 1, "", "N"]], "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM": [[287, 3, 1, "", "block_size"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[288, 1, 1, "", "check_config"], [288, 1, 1, "", "parse_not_to_prune"], [288, 1, 1, "", "parse_to_prune"], [288, 1, 1, "", "process_and_check_config"], [288, 1, 1, "", "process_config"], [288, 1, 1, "", "reset_non_value_to_default"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[289, 2, 1, "", "MagnitudePruner"], [289, 2, 1, "", "PatternLockPruner"], [289, 2, 1, "", "Pruner"], [289, 2, 1, "", "SnipMomentumPruner"], [289, 2, 1, "", "SnipPruner"], [289, 1, 1, "", "get_pruner"], [289, 1, 1, "", "register_pruners"]], "neural_compressor.experimental.pytorch_pruner.pruner.Pruner": [[289, 3, 1, "", "config"], [289, 3, 1, "", "current_sparsity_ratio"], [289, 3, 1, "", "end_step"], [289, 3, 1, "", "global_step"], [289, 3, 1, "", "masks"], [289, 3, 1, "", "max_sparsity_ratio_per_layer"], [289, 3, 1, "", "modules"], [289, 3, 1, "", "pattern"], [289, 3, 1, "", "scheduler"], [289, 3, 1, "", "scores"], [289, 3, 1, "", "start_step"], [289, 3, 1, "", "target_sparsity_ratio"], [289, 3, 1, "", "update_frequency_on_step"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[290, 2, 1, "", "Pruning"]], "neural_compressor.experimental.pytorch_pruner.pruning.Pruning": [[290, 3, 1, "", "config_file_path"], [290, 3, 1, "", "model"], [290, 3, 1, "", "pruner_info"], [290, 3, 1, "", "pruners"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[291, 2, 1, "", "IterativeScheduler"], [291, 2, 1, "", "OneshotScheduler"], [291, 2, 1, "", "Scheduler"], [291, 1, 1, "", "get_scheduler"], [291, 1, 1, "", "register_scheduler"]], "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler": [[291, 3, 1, "", "config"]], "neural_compressor.experimental.quantization": [[292, 2, 1, "", "Quantization"]], "neural_compressor.experimental.scheduler": [[293, 2, 1, "", "Scheduler"]], "neural_compressor.metric": [[295, 0, 0, "-", "bleu"], [296, 0, 0, "-", "bleu_util"], [297, 0, 0, "-", "coco_label_map"], [298, 0, 0, "-", "coco_tools"], [299, 0, 0, "-", "evaluate_squad"], [300, 0, 0, "-", "f1"], [302, 0, 0, "-", "metric"]], "neural_compressor.metric.bleu": [[295, 2, 1, "", "BLEU"], [295, 2, 1, "", "UnicodeRegex"], [295, 1, 1, "", "bleu_tokenize"]], "neural_compressor.metric.bleu.BLEU": [[295, 3, 1, "", "labels"], [295, 3, 1, "", "predictions"]], "neural_compressor.metric.bleu.UnicodeRegex": [[295, 3, 1, "", "nondigit_punct_re"], [295, 3, 1, "", "punct_nondigit_re"], [295, 3, 1, "", "symbol_re"]], "neural_compressor.metric.bleu_util": [[296, 1, 1, "", "compute_bleu"]], "neural_compressor.metric.coco_tools": [[298, 2, 1, "", "COCOEvalWrapper"], [298, 2, 1, "", "COCOWrapper"], [298, 1, 1, "", "ExportSingleImageDetectionBoxesToCoco"], [298, 1, 1, "", "ExportSingleImageDetectionMasksToCoco"], [298, 1, 1, "", "ExportSingleImageGroundtruthToCoco"]], "neural_compressor.metric.coco_tools.COCOWrapper": [[298, 3, 1, "", "dataset"], [298, 3, 1, "", "detection_type"]], "neural_compressor.metric.evaluate_squad": [[299, 1, 1, "", "evaluate"], [299, 1, 1, "", "exact_match_score"], [299, 1, 1, "", "f1_score"], [299, 1, 1, "", "metric_max_over_ground_truths"]], "neural_compressor.metric.f1": [[300, 1, 1, "", "evaluate"], [300, 1, 1, "", "f1_score"], [300, 1, 1, "", "metric_max_over_ground_truths"], [300, 1, 1, "", "normalize_answer"]], "neural_compressor.metric.metric": [[302, 2, 1, "", "Accuracy"], [302, 2, 1, "", "BaseMetric"], [302, 2, 1, "", "COCOmAPv2"], [302, 2, 1, "", "F1"], [302, 2, 1, "", "GeneralTopK"], [302, 2, 1, "", "Loss"], [302, 2, 1, "", "MAE"], [302, 2, 1, "", "METRICS"], [302, 2, 1, "", "MSE"], [302, 2, 1, "", "MXNetMetrics"], [302, 2, 1, "", "Metric"], [302, 2, 1, "", "ONNXRTGLUE"], [302, 2, 1, "", "ONNXRTITMetrics"], [302, 2, 1, "", "ONNXRTQLMetrics"], [302, 2, 1, "", "PyTorchLoss"], [302, 2, 1, "", "PyTorchMetrics"], [302, 2, 1, "", "RMSE"], [302, 2, 1, "", "ROC"], [302, 2, 1, "", "SquadF1"], [302, 2, 1, "", "TensorflowCOCOMAP"], [302, 2, 1, "", "TensorflowMAP"], [302, 2, 1, "", "TensorflowMetrics"], [302, 2, 1, "", "TensorflowTopK"], [302, 2, 1, "", "TensorflowVOCMAP"], [302, 2, 1, "", "WrapMXNetMetric"], [302, 2, 1, "", "WrapONNXRTMetric"], [302, 2, 1, "", "WrapPyTorchMetric"], [302, 2, 1, "", "mIOU"], [302, 1, 1, "", "metric_registry"]], "neural_compressor.metric.metric.Accuracy": [[302, 3, 1, "", "label_list"], [302, 3, 1, "", "pred_list"], [302, 3, 1, "", "sample"]], "neural_compressor.metric.metric.GeneralTopK": [[302, 3, 1, "", "k"], [302, 3, 1, "", "num_correct"], [302, 3, 1, "", "num_sample"]], "neural_compressor.metric.metric.Loss": [[302, 3, 1, "", "sample"], [302, 3, 1, "", "sum"]], "neural_compressor.metric.metric.MAE": [[302, 3, 1, "", "compare_label"], [302, 3, 1, "", "label_list"], [302, 3, 1, "", "pred_list"]], "neural_compressor.metric.metric.METRICS": [[302, 3, 1, "", "metrics"]], "neural_compressor.metric.metric.MSE": [[302, 3, 1, "", "compare_label"], [302, 3, 1, "", "label_list"], [302, 3, 1, "", "pred_list"]], "neural_compressor.metric.metric.MXNetMetrics": [[302, 3, 1, "", "metrics"]], "neural_compressor.metric.metric.ONNXRTITMetrics": [[302, 3, 1, "", "metrics"]], "neural_compressor.metric.metric.ONNXRTQLMetrics": [[302, 3, 1, "", "metrics"]], "neural_compressor.metric.metric.PyTorchMetrics": [[302, 3, 1, "", "metrics"]], "neural_compressor.metric.metric.RMSE": [[302, 3, 1, "", "mse"]], "neural_compressor.metric.metric.TensorflowMetrics": [[302, 3, 1, "", "metrics"]], "neural_compressor.metric.metric.TensorflowTopK": [[302, 3, 1, "", "k"], [302, 3, 1, "", "num_correct"], [302, 3, 1, "", "num_sample"]], "neural_compressor.mix_precision": [[303, 1, 1, "", "fit"]], "neural_compressor.model": [[304, 0, 0, "-", "base_model"], [306, 0, 0, "-", "keras_model"], [307, 0, 0, "-", "model"], [308, 0, 0, "-", "mxnet_model"], [309, 0, 0, "-", "nets_factory"], [310, 0, 0, "-", "onnx_model"], [311, 0, 0, "-", "tensorflow_model"], [312, 0, 0, "-", "torch_model"]], "neural_compressor.model.base_model": [[304, 2, 1, "", "BaseModel"]], "neural_compressor.model.keras_model": [[306, 2, 1, "", "KerasModel"]], "neural_compressor.model.model": [[307, 2, 1, "", "Model"], [307, 1, 1, "", "get_model_fwk_name"]], "neural_compressor.model.mxnet_model": [[308, 2, 1, "", "MXNetModel"]], "neural_compressor.model.nets_factory": [[309, 2, 1, "", "TFSlimNetsFactory"]], "neural_compressor.model.onnx_model": [[310, 2, 1, "", "ONNXModel"]], "neural_compressor.model.tensorflow_model": [[311, 2, 1, "", "TensorflowBaseModel"], [311, 2, 1, "", "TensorflowCheckpointModel"], [311, 2, 1, "", "TensorflowModel"], [311, 2, 1, "", "TensorflowQATModel"], [311, 2, 1, "", "TensorflowSavedModelModel"], [311, 1, 1, "", "checkpoint_session"], [311, 1, 1, "", "estimator_session"], [311, 1, 1, "", "frozen_pb_session"], [311, 1, 1, "", "get_model_type"], [311, 1, 1, "", "graph_def_session"], [311, 1, 1, "", "graph_session"], [311, 1, 1, "", "keras_session"], [311, 1, 1, "", "load_saved_model"], [311, 1, 1, "", "saved_model_session"], [311, 1, 1, "", "slim_session"], [311, 1, 1, "", "validate_and_inference_input_output"], [311, 1, 1, "", "validate_graph_node"]], "neural_compressor.model.torch_model": [[312, 2, 1, "", "IPEXModel"], [312, 2, 1, "", "PyTorchBaseModel"], [312, 2, 1, "", "PyTorchFXModel"], [312, 2, 1, "", "PyTorchModel"]], "neural_compressor.objective": [[313, 2, 1, "", "Accuracy"], [313, 2, 1, "", "Footprint"], [313, 2, 1, "", "ModelSize"], [313, 2, 1, "", "MultiObjective"], [313, 2, 1, "", "Objective"], [313, 2, 1, "", "Performance"], [313, 1, 1, "", "objective_custom_registry"], [313, 1, 1, "", "objective_registry"]], "neural_compressor.quantization": [[314, 1, 1, "", "fit"]], "neural_compressor.strategy": [[315, 0, 0, "-", "auto"], [316, 0, 0, "-", "auto_mixed_precision"], [317, 0, 0, "-", "basic"], [318, 0, 0, "-", "bayesian"], [319, 0, 0, "-", "conservative"], [320, 0, 0, "-", "exhaustive"], [321, 0, 0, "-", "hawq_v2"], [323, 0, 0, "-", "mse"], [324, 0, 0, "-", "mse_v2"], [325, 0, 0, "-", "random"], [326, 0, 0, "-", "strategy"], [328, 0, 0, "-", "utils"]], "neural_compressor.strategy.auto": [[315, 2, 1, "", "AutoTuneStrategy"]], "neural_compressor.strategy.auto_mixed_precision": [[316, 2, 1, "", "AutoMixedPrecisionTuneStrategy"]], "neural_compressor.strategy.basic": [[317, 2, 1, "", "BasicTuneStrategy"]], "neural_compressor.strategy.bayesian": [[318, 2, 1, "", "BayesianOptimization"], [318, 2, 1, "", "BayesianTuneStrategy"], [318, 2, 1, "", "TargetSpace"], [318, 1, 1, "", "acq_max"]], "neural_compressor.strategy.conservative": [[319, 2, 1, "", "ConservativeTuneStrategy"]], "neural_compressor.strategy.exhaustive": [[320, 2, 1, "", "ExhaustiveTuneStrategy"]], "neural_compressor.strategy.hawq_v2": [[321, 2, 1, "", "HAWQ_V2TuneStrategy"]], "neural_compressor.strategy.mse": [[323, 2, 1, "", "MSETuneStrategy"]], "neural_compressor.strategy.mse_v2": [[324, 2, 1, "", "MSE_V2TuneStrategy"]], "neural_compressor.strategy.random": [[325, 2, 1, "", "RandomTuneStrategy"]], "neural_compressor.strategy.strategy": [[326, 2, 1, "", "TuneStrategy"], [326, 1, 1, "", "strategy_registry"]], "neural_compressor.strategy.utils": [[327, 0, 0, "-", "constant"], [329, 0, 0, "-", "tuning_sampler"], [330, 0, 0, "-", "tuning_space"], [331, 0, 0, "-", "tuning_structs"], [332, 0, 0, "-", "utility"]], "neural_compressor.strategy.utils.tuning_sampler": [[329, 2, 1, "", "BlockFallbackTuningSampler"], [329, 2, 1, "", "FallbackTuningSampler"], [329, 2, 1, "", "ModelWiseTuningSampler"], [329, 2, 1, "", "OpTypeWiseTuningSampler"], [329, 2, 1, "", "OpWiseTuningSampler"], [329, 2, 1, "", "TuningOrder"], [329, 2, 1, "", "TuningSampler"], [329, 2, 1, "", "TuningSamplerRegistry"]], "neural_compressor.strategy.utils.tuning_space": [[330, 2, 1, "", "TuningItem"], [330, 2, 1, "", "TuningSpace"], [330, 1, 1, "", "get_op_mode_by_query_order"], [330, 1, 1, "", "initial_tuning_cfg_with_quant_mode"], [330, 1, 1, "", "pattern_to_internal"], [330, 1, 1, "", "pattern_to_path"], [330, 1, 1, "", "quant_mode_from_pattern"]], "neural_compressor.strategy.utils.tuning_structs": [[331, 2, 1, "", "OpTuningConfig"]], "neural_compressor.strategy.utils.utility": [[332, 2, 1, "", "OrderedDefaultDict"], [332, 1, 1, "", "extract_data_type"], [332, 1, 1, "", "get_adaptor_name"], [332, 1, 1, "", "reverted_data_type"]], "neural_compressor.template": [[333, 0, 0, "-", "api_doc_example"]], "neural_compressor.template.api_doc_example": [[333, 2, 1, "", "ExampleClass"], [333, 3, 1, "", "attribute1"], [333, 1, 1, "", "function1"], [333, 1, 1, "", "function2"], [333, 1, 1, "", "function3"], [333, 1, 1, "", "generator1"], [333, 4, 1, "", "module_debug_level1"]], "neural_compressor.template.api_doc_example.ExampleClass": [[333, 3, 1, "", "attr1"], [333, 3, 1, "", "attr2"], [333, 3, 1, "", "attr5"]], "neural_compressor.training": [[335, 2, 1, "", "CallBacks"], [335, 2, 1, "", "CompressionManager"], [335, 1, 1, "", "fit"], [335, 1, 1, "", "prepare_compression"]], "neural_compressor.utils": [[336, 0, 0, "-", "collect_layer_histogram"], [337, 0, 0, "-", "constant"], [338, 0, 0, "-", "create_obj_from_config"], [340, 0, 0, "-", "kl_divergence"], [341, 0, 0, "-", "load_huggingface"], [342, 0, 0, "-", "logger"], [343, 0, 0, "-", "options"], [344, 0, 0, "-", "pytorch"], [345, 0, 0, "-", "utility"]], "neural_compressor.utils.collect_layer_histogram": [[336, 2, 1, "", "LayerHistogramCollector"]], "neural_compressor.utils.create_obj_from_config": [[338, 1, 1, "", "create_dataloader"], [338, 1, 1, "", "create_dataset"], [338, 1, 1, "", "create_eval_func"], [338, 1, 1, "", "create_train_func"], [338, 1, 1, "", "get_algorithm"], [338, 1, 1, "", "get_func_from_config"], [338, 1, 1, "", "get_metrics"], [338, 1, 1, "", "get_postprocess"], [338, 1, 1, "", "get_preprocess"]], "neural_compressor.utils.kl_divergence": [[340, 2, 1, "", "KL_Divergence"]], "neural_compressor.utils.load_huggingface": [[341, 2, 1, "", "OptimizedModel"], [341, 1, 1, "", "save_for_huggingface_upstream"]], "neural_compressor.utils.logger": [[342, 2, 1, "", "Logger"], [342, 1, 1, "", "debug"], [342, 1, 1, "", "error"], [342, 1, 1, "", "fatal"], [342, 1, 1, "", "info"], [342, 1, 1, "", "log"], [342, 1, 1, "", "warn"], [342, 1, 1, "", "warning"]], "neural_compressor.utils.options": [[343, 2, 1, "", "onnxrt"]], "neural_compressor.utils.pytorch": [[344, 1, 1, "", "is_int8_model"], [344, 1, 1, "", "load"]], "neural_compressor.utils.utility": [[345, 2, 1, "", "CaptureOutputToFile"], [345, 2, 1, "", "CpuInfo"], [345, 1, 1, "", "Dequantize"], [345, 1, 1, "", "DequantizeWeight"], [345, 2, 1, "", "GLOBAL_STATE"], [345, 2, 1, "", "LazyImport"], [345, 2, 1, "", "MODE"], [345, 2, 1, "", "Statistics"], [345, 1, 1, "", "combine_histogram"], [345, 1, 1, "", "compute_sparsity"], [345, 1, 1, "", "dump_data_to_local"], [345, 1, 1, "", "dump_elapsed_time"], [345, 1, 1, "", "equal_dicts"], [345, 1, 1, "", "fault_tolerant_file"], [345, 1, 1, "", "get_all_fp32_data"], [345, 1, 1, "", "get_size"], [345, 1, 1, "", "get_tensor_histogram"], [345, 1, 1, "", "get_tuning_history"], [345, 1, 1, "", "load_data_from_pkl"], [345, 1, 1, "", "recover"], [345, 1, 1, "", "set_random_seed"], [345, 1, 1, "", "set_resume_from"], [345, 1, 1, "", "set_tensorboard"], [345, 1, 1, "", "set_workspace"], [345, 1, 1, "", "show_memory_info"], [345, 1, 1, "", "singleton"], [345, 1, 1, "", "str2array"], [345, 1, 1, "", "time_limit"], [345, 1, 1, "", "version1_eq_version2"], [345, 1, 1, "", "version1_gt_version2"], [345, 1, 1, "", "version1_gte_version2"], [345, 1, 1, "", "version1_lt_version2"], [345, 1, 1, "", "version1_lte_version2"]], "neural_compressor.ux": [[421, 0, 0, "-", "components"], [480, 0, 0, "-", "inc_bench"], [489, 0, 0, "-", "utils"], [515, 0, 0, "-", "web"]], "neural_compressor.ux.components": [[349, 0, 0, "-", "benchmark"], [353, 0, 0, "-", "config_generator"], [361, 0, 0, "-", "configuration_wizard"], [397, 0, 0, "-", "db_manager"], [402, 0, 0, "-", "diagnosis"], [410, 0, 0, "-", "file_browser"], [416, 0, 0, "-", "graph"], [422, 0, 0, "-", "jobs_management"], [426, 0, 0, "-", "manage_workspace"], [428, 0, 0, "-", "model"], [447, 0, 0, "-", "model_zoo"], [449, 0, 0, "-", "names_mapper"], [456, 0, 0, "-", "optimization"], [472, 0, 0, "-", "profiling"]], "neural_compressor.ux.components.benchmark": [[349, 2, 1, "", "Benchmarks"], [346, 0, 0, "-", "benchmark"], [347, 0, 0, "-", "benchmark_model"], [348, 0, 0, "-", "execute_benchmark"]], "neural_compressor.ux.components.benchmark.benchmark": [[346, 2, 1, "", "Benchmark"], [346, 2, 1, "", "DataloaderInterface"]], "neural_compressor.ux.components.benchmark.benchmark_model": [[347, 1, 1, "", "benchmark_model"], [347, 1, 1, "", "parse_args"], [347, 1, 1, "", "set_eager_execution"]], "neural_compressor.ux.components.benchmark.execute_benchmark": [[348, 1, 1, "", "benchmark_result_update"], [348, 1, 1, "", "benchmark_result_update_pytorch_script"], [348, 1, 1, "", "execute_benchmark"], [348, 1, 1, "", "execute_real_benchmark"], [348, 1, 1, "", "pytorch_script_bench_optimizations"], [348, 1, 1, "", "pytorch_script_bench_original_model"]], "neural_compressor.ux.components.config_generator": [[350, 0, 0, "-", "benchmark_config_generator"], [351, 0, 0, "-", "config_generator"], [352, 0, 0, "-", "graph_optimization_config_generator"], [354, 0, 0, "-", "mixed_precision_config_generator"], [355, 0, 0, "-", "profiling_config_generator"], [356, 0, 0, "-", "pruning_config_generator"], [357, 0, 0, "-", "quantization_config_generator"]], "neural_compressor.ux.components.config_generator.benchmark_config_generator": [[350, 2, 1, "", "BenchmarkConfigGenerator"]], "neural_compressor.ux.components.config_generator.config_generator": [[351, 2, 1, "", "ConfigGenerator"]], "neural_compressor.ux.components.config_generator.graph_optimization_config_generator": [[352, 2, 1, "", "GraphOptimizationConfigGenerator"]], "neural_compressor.ux.components.config_generator.mixed_precision_config_generator": [[354, 2, 1, "", "MixedPrecisionConfigGenerator"]], "neural_compressor.ux.components.config_generator.profiling_config_generator": [[355, 2, 1, "", "ProfilingConfigGenerator"]], "neural_compressor.ux.components.config_generator.pruning_config_generator": [[356, 2, 1, "", "PruningConfigGenerator"]], "neural_compressor.ux.components.config_generator.quantization_config_generator": [[357, 2, 1, "", "QuantizationConfigGenerator"]], "neural_compressor.ux.components.configuration_wizard": [[358, 0, 0, "-", "configuration_parser"], [359, 0, 0, "-", "get_boundary_nodes"], [360, 0, 0, "-", "get_configuration"], [362, 0, 0, "-", "params_feeder"], [363, 0, 0, "-", "pruning_config_parser"]], "neural_compressor.ux.components.configuration_wizard.configuration_parser": [[358, 2, 1, "", "ConfigurationParser"], [358, 1, 1, "", "normalize_string_list"], [358, 1, 1, "", "parse_list_value"], [358, 1, 1, "", "parse_multidim_list"]], "neural_compressor.ux.components.configuration_wizard.get_boundary_nodes": [[359, 1, 1, "", "get_boundary_nodes"]], "neural_compressor.ux.components.configuration_wizard.get_configuration": [[360, 1, 1, "", "get_predefined_configuration"], [360, 1, 1, "", "update_config_to_machine_specification"]], "neural_compressor.ux.components.configuration_wizard.params_feeder": [[362, 2, 1, "", "Feeder"], [362, 1, 1, "", "get_possible_values"]], "neural_compressor.ux.components.configuration_wizard.pruning_config_parser": [[363, 2, 1, "", "PruningConfigParser"]], "neural_compressor.ux.components.db_manager": [[364, 0, 0, "-", "db_manager"], [373, 0, 0, "-", "db_models"], [392, 0, 0, "-", "db_operations"], [398, 0, 0, "-", "params_interfaces"], [399, 0, 0, "-", "utils"]], "neural_compressor.ux.components.db_manager.db_manager": [[364, 2, 1, "", "DBManager"]], "neural_compressor.ux.components.db_manager.db_models": [[365, 0, 0, "-", "benchmark"], [366, 0, 0, "-", "benchmark_result"], [367, 0, 0, "-", "dataloader"], [368, 0, 0, "-", "dataset"], [369, 0, 0, "-", "domain"], [370, 0, 0, "-", "domain_flavour"], [371, 0, 0, "-", "example"], [372, 0, 0, "-", "framework"], [374, 0, 0, "-", "metric"], [375, 0, 0, "-", "model"], [376, 0, 0, "-", "optimization"], [377, 0, 0, "-", "optimization_type"], [378, 0, 0, "-", "precision"], [379, 0, 0, "-", "profiling"], [380, 0, 0, "-", "profiling_result"], [381, 0, 0, "-", "project"], [382, 0, 0, "-", "pruning_details"], [383, 0, 0, "-", "transform"], [384, 0, 0, "-", "tuning_details"], [385, 0, 0, "-", "tuning_history"]], "neural_compressor.ux.components.db_manager.db_models.benchmark": [[365, 2, 1, "", "Benchmark"]], "neural_compressor.ux.components.db_manager.db_models.benchmark_result": [[366, 2, 1, "", "BenchmarkResult"]], "neural_compressor.ux.components.db_manager.db_models.dataloader": [[367, 2, 1, "", "Dataloader"], [367, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.dataset": [[368, 2, 1, "", "Dataset"]], "neural_compressor.ux.components.db_manager.db_models.domain": [[369, 2, 1, "", "Domain"], [369, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.domain_flavour": [[370, 2, 1, "", "DomainFlavour"], [370, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.example": [[371, 2, 1, "", "Example"]], "neural_compressor.ux.components.db_manager.db_models.framework": [[372, 2, 1, "", "Framework"], [372, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.metric": [[374, 2, 1, "", "Metric"], [374, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.model": [[375, 2, 1, "", "Model"]], "neural_compressor.ux.components.db_manager.db_models.optimization": [[376, 2, 1, "", "Optimization"]], "neural_compressor.ux.components.db_manager.db_models.optimization_type": [[377, 2, 1, "", "OptimizationType"], [377, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.precision": [[378, 2, 1, "", "Precision"], [378, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.profiling": [[379, 2, 1, "", "Profiling"]], "neural_compressor.ux.components.db_manager.db_models.profiling_result": [[380, 2, 1, "", "ProfilingResult"]], "neural_compressor.ux.components.db_manager.db_models.project": [[381, 2, 1, "", "Project"]], "neural_compressor.ux.components.db_manager.db_models.pruning_details": [[382, 2, 1, "", "PruningDetails"]], "neural_compressor.ux.components.db_manager.db_models.transform": [[383, 2, 1, "", "Transform"], [383, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.tuning_details": [[384, 2, 1, "", "TuningDetails"]], "neural_compressor.ux.components.db_manager.db_models.tuning_history": [[385, 2, 1, "", "TuningHistory"]], "neural_compressor.ux.components.db_manager.db_operations": [[386, 0, 0, "-", "benchmark_api_interface"], [387, 0, 0, "-", "dataset_api_interface"], [388, 0, 0, "-", "db_operations"], [389, 0, 0, "-", "diagnosis_api_interface"], [390, 0, 0, "-", "dictionaries_api_interface"], [391, 0, 0, "-", "examples_api_interface"], [393, 0, 0, "-", "model_api_interface"], [394, 0, 0, "-", "optimization_api_interface"], [395, 0, 0, "-", "profiling_api_interface"], [396, 0, 0, "-", "project_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface": [[386, 2, 1, "", "BenchmarkAPIInterface"], [386, 1, 1, "", "before_delete_benchmark_entry"]], "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface": [[387, 2, 1, "", "DatasetAPIInterface"], [387, 1, 1, "", "initialize_associations"], [387, 1, 1, "", "initialize_precision_optimization_types_association"], [387, 1, 1, "", "search_in_list_of_dict"], [387, 1, 1, "", "search_in_list_of_dict_for_unique_value"], [387, 1, 1, "", "set_database_version"]], "neural_compressor.ux.components.db_manager.db_operations.db_operations": [[388, 1, 1, "", "initialize_associations"], [388, 1, 1, "", "initialize_precision_optimization_types_association"], [388, 1, 1, "", "search_in_list_of_dict"], [388, 1, 1, "", "search_in_list_of_dict_for_unique_value"], [388, 1, 1, "", "set_database_version"]], "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface": [[389, 2, 1, "", "DiagnosisAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface": [[390, 2, 1, "", "DictionariesAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.examples_api_interface": [[391, 2, 1, "", "ExamplesAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.model_api_interface": [[393, 2, 1, "", "ModelAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface": [[394, 2, 1, "", "OptimizationAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface": [[395, 2, 1, "", "ProfilingAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.project_api_interface": [[396, 2, 1, "", "ProjectAPIInterface"]], "neural_compressor.ux.components.db_manager.params_interfaces": [[398, 2, 1, "", "BenchmarkAddParamsInterface"], [398, 2, 1, "", "BenchmarkEditParamsInterface"], [398, 2, 1, "", "DatasetAddParamsInterface"], [398, 2, 1, "", "DiagnosisOptimizationParamsInterface"], [398, 2, 1, "", "ModelAddParamsInterface"], [398, 2, 1, "", "OptimizationAddParamsInterface"], [398, 2, 1, "", "OptimizationEditParamsInterface"], [398, 2, 1, "", "ProfilingAddParamsInterface"], [398, 2, 1, "", "ProfilingEditParamsInterface"], [398, 2, 1, "", "ProfilingResultAddParamsInterface"], [398, 2, 1, "", "TuningHistoryInterface"], [398, 2, 1, "", "TuningHistoryItemInterface"]], "neural_compressor.ux.components.db_manager.utils": [[399, 1, 1, "", "get_framework_dataloaders_config"], [399, 1, 1, "", "get_framework_transforms_config"], [399, 1, 1, "", "update_dataloaders_params"]], "neural_compressor.ux.components.diagnosis": [[400, 0, 0, "-", "diagnosis"], [401, 0, 0, "-", "factory"], [403, 0, 0, "-", "onnx_diagnosis"], [405, 0, 0, "-", "op_details"], [406, 0, 0, "-", "op_entry"], [407, 0, 0, "-", "tensorflow_diagnosis"]], "neural_compressor.ux.components.diagnosis.diagnosis": [[400, 2, 1, "", "Diagnosis"]], "neural_compressor.ux.components.diagnosis.factory": [[401, 2, 1, "", "DiagnosisFactory"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis": [[404, 0, 0, "-", "onnxrt_diagnosis"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis": [[404, 2, 1, "", "OnnxRtDiagnosis"]], "neural_compressor.ux.components.diagnosis.op_details": [[405, 2, 1, "", "OpActivation"], [405, 2, 1, "", "OpDetails"], [405, 2, 1, "", "OpPattern"], [405, 2, 1, "", "OpWeights"]], "neural_compressor.ux.components.diagnosis.op_entry": [[406, 2, 1, "", "OpEntry"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis": [[408, 0, 0, "-", "tensorflow_diagnosis"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis": [[408, 2, 1, "", "TensorflowDiagnosis"]], "neural_compressor.ux.components.file_browser": [[409, 0, 0, "-", "file_browser"]], "neural_compressor.ux.components.file_browser.file_browser": [[409, 1, 1, "", "create_dir_entry"], [409, 1, 1, "", "create_entry"], [409, 1, 1, "", "create_file_entry"], [409, 1, 1, "", "filter_requested_entries"], [409, 1, 1, "", "get_directory_entries"], [409, 1, 1, "", "get_filter_value"], [409, 1, 1, "", "get_non_hidden_directory_entries"], [409, 1, 1, "", "get_requested_path"], [409, 1, 1, "", "get_setting_value"], [409, 1, 1, "", "is_dataset_or_directory_entry"], [409, 1, 1, "", "is_directory_entry"], [409, 1, 1, "", "is_model_or_directory_entry"], [409, 1, 1, "", "should_show_files"], [409, 1, 1, "", "should_show_only_model_files"], [409, 1, 1, "", "sort_entries"]], "neural_compressor.ux.components.graph": [[411, 0, 0, "-", "attribute"], [412, 0, 0, "-", "collapser"], [413, 0, 0, "-", "edge"], [414, 0, 0, "-", "graph"], [415, 0, 0, "-", "graph_reader"], [417, 0, 0, "-", "node"], [418, 0, 0, "-", "reader"]], "neural_compressor.ux.components.graph.attribute": [[411, 2, 1, "", "Attribute"]], "neural_compressor.ux.components.graph.collapser": [[412, 2, 1, "", "Collapser"]], "neural_compressor.ux.components.graph.edge": [[413, 2, 1, "", "Edge"]], "neural_compressor.ux.components.graph.graph": [[414, 2, 1, "", "Graph"]], "neural_compressor.ux.components.graph.graph_reader": [[415, 2, 1, "", "GraphReader"]], "neural_compressor.ux.components.graph.node": [[417, 2, 1, "", "GroupNode"], [417, 2, 1, "", "Node"]], "neural_compressor.ux.components.graph.reader": [[419, 0, 0, "-", "onnxrt_reader"], [420, 0, 0, "-", "tensorflow_reader"]], "neural_compressor.ux.components.graph.reader.onnxrt_reader": [[419, 2, 1, "", "OnnxrtReader"]], "neural_compressor.ux.components.graph.reader.tensorflow_reader": [[420, 2, 1, "", "TensorflowReader"]], "neural_compressor.ux.components.jobs_management": [[423, 0, 0, "-", "jobs_control_queue"], [424, 0, 0, "-", "jobs_manager"], [425, 0, 0, "-", "request"]], "neural_compressor.ux.components.manage_workspace": [[426, 1, 1, "", "get_default_path"]], "neural_compressor.ux.components.model": [[427, 0, 0, "-", "domain"], [429, 0, 0, "-", "model"], [430, 0, 0, "-", "model_type_getter"], [431, 0, 0, "-", "onnxrt"], [433, 0, 0, "-", "pytorch"], [435, 0, 0, "-", "repository"], [436, 0, 0, "-", "shape"], [438, 0, 0, "-", "tensorflow"]], "neural_compressor.ux.components.model.domain": [[427, 2, 1, "", "Domain"]], "neural_compressor.ux.components.model.model": [[429, 2, 1, "", "Model"]], "neural_compressor.ux.components.model.model_type_getter": [[430, 1, 1, "", "get_model_type"]], "neural_compressor.ux.components.model.onnxrt": [[432, 0, 0, "-", "model"]], "neural_compressor.ux.components.model.onnxrt.model": [[432, 2, 1, "", "OnnxrtModel"], [432, 1, 1, "", "remove_number_of_samples_from_shape"]], "neural_compressor.ux.components.model.pytorch": [[434, 0, 0, "-", "model"]], "neural_compressor.ux.components.model.pytorch.model": [[434, 2, 1, "", "PyTorchScriptModel"]], "neural_compressor.ux.components.model.repository": [[435, 2, 1, "", "ModelRepository"]], "neural_compressor.ux.components.model.shape": [[436, 2, 1, "", "Shape"]], "neural_compressor.ux.components.model.tensorflow": [[437, 0, 0, "-", "frozen_pb"], [439, 0, 0, "-", "keras"], [440, 0, 0, "-", "meta_graph"], [441, 0, 0, "-", "model"], [442, 0, 0, "-", "saved_model"], [443, 0, 0, "-", "utils"]], "neural_compressor.ux.components.model.tensorflow.frozen_pb": [[437, 2, 1, "", "FrozenPbModel"]], "neural_compressor.ux.components.model.tensorflow.keras": [[439, 2, 1, "", "KerasModel"]], "neural_compressor.ux.components.model.tensorflow.meta_graph": [[440, 2, 1, "", "MetaGraphModel"]], "neural_compressor.ux.components.model.tensorflow.model": [[441, 2, 1, "", "TensorflowModel"]], "neural_compressor.ux.components.model.tensorflow.saved_model": [[442, 2, 1, "", "SavedModelModel"]], "neural_compressor.ux.components.model.tensorflow.utils": [[443, 1, 1, "", "get_input_shape"]], "neural_compressor.ux.components.model_zoo": [[444, 0, 0, "-", "download_config"], [445, 0, 0, "-", "download_model"], [446, 0, 0, "-", "downloader"], [448, 0, 0, "-", "list_models"]], "neural_compressor.ux.components.model_zoo.download_config": [[444, 1, 1, "", "download_config"]], "neural_compressor.ux.components.model_zoo.download_model": [[445, 1, 1, "", "download_model"]], "neural_compressor.ux.components.model_zoo.downloader": [[446, 2, 1, "", "Downloader"]], "neural_compressor.ux.components.model_zoo.list_models": [[448, 1, 1, "", "check_version"], [448, 1, 1, "", "get_available_models"], [448, 1, 1, "", "get_framework_module_name"], [448, 1, 1, "", "get_installed_frameworks"], [448, 1, 1, "", "list_models"], [448, 1, 1, "", "validate_model_list"]], "neural_compressor.ux.components.names_mapper": [[450, 0, 0, "-", "names_mapper"]], "neural_compressor.ux.components.names_mapper.names_mapper": [[450, 2, 1, "", "MappingDirection"], [450, 2, 1, "", "NamesMapper"]], "neural_compressor.ux.components.optimization": [[456, 2, 1, "", "Optimizations"], [451, 0, 0, "-", "execute_optimization"], [452, 0, 0, "-", "factory"], [454, 0, 0, "-", "graph_optimizer"], [457, 0, 0, "-", "mixed_precision"], [460, 0, 0, "-", "neural_coder_optimization"], [462, 0, 0, "-", "optimization"], [463, 0, 0, "-", "pruning"], [466, 0, 0, "-", "tune"], [469, 0, 0, "-", "tuning_history"]], "neural_compressor.ux.components.optimization.execute_optimization": [[451, 1, 1, "", "check_if_collect_tuning_history"], [451, 1, 1, "", "execute_optimization"], [451, 1, 1, "", "execute_optimization_pytorch_script"], [451, 1, 1, "", "execute_optimization_regular"], [451, 1, 1, "", "parse_logs"], [451, 1, 1, "", "parse_model_data_to_bench_names"]], "neural_compressor.ux.components.optimization.factory": [[452, 2, 1, "", "OptimizationFactory"]], "neural_compressor.ux.components.optimization.graph_optimizer": [[453, 0, 0, "-", "graph_optimization"], [455, 0, 0, "-", "optimize_model"]], "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization": [[453, 2, 1, "", "GraphOptimization"]], "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model": [[455, 1, 1, "", "optimize_graph"], [455, 1, 1, "", "optimize_graph_config"], [455, 1, 1, "", "parse_args"], [455, 1, 1, "", "set_eager_execution"]], "neural_compressor.ux.components.optimization.mixed_precision": [[458, 0, 0, "-", "mixed_precision"], [459, 0, 0, "-", "optimize_model"]], "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision": [[458, 2, 1, "", "MixedPrecision"]], "neural_compressor.ux.components.optimization.mixed_precision.optimize_model": [[459, 1, 1, "", "optimize_graph"], [459, 1, 1, "", "optimize_graph_config"], [459, 1, 1, "", "parse_args"], [459, 1, 1, "", "set_eager_execution"]], "neural_compressor.ux.components.optimization.neural_coder_optimization": [[461, 0, 0, "-", "optimize_model"]], "neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model": [[461, 1, 1, "", "optimize_pt_script"]], "neural_compressor.ux.components.optimization.optimization": [[462, 2, 1, "", "DataloaderInterface"], [462, 2, 1, "", "Optimization"], [462, 2, 1, "", "OptimizationInterface"]], "neural_compressor.ux.components.optimization.pruning": [[464, 0, 0, "-", "optimize_model"], [465, 0, 0, "-", "pruning"]], "neural_compressor.ux.components.optimization.pruning.optimize_model": [[464, 1, 1, "", "optimize_model"], [464, 1, 1, "", "parse_args"]], "neural_compressor.ux.components.optimization.pruning.pruning": [[465, 2, 1, "", "Pruning"]], "neural_compressor.ux.components.optimization.tune": [[467, 0, 0, "-", "tune_model"], [468, 0, 0, "-", "tuning"]], "neural_compressor.ux.components.optimization.tune.tune_model": [[467, 1, 1, "", "parse_args"], [467, 1, 1, "", "set_eager_execution"], [467, 1, 1, "", "tune_model"]], "neural_compressor.ux.components.optimization.tune.tuning": [[468, 2, 1, "", "AccuracyCriterion"], [468, 2, 1, "", "Tuning"], [468, 2, 1, "", "TuningDetails"]], "neural_compressor.ux.components.optimization.tuning_history": [[469, 2, 1, "", "TuningHistory"], [469, 2, 1, "", "Watcher"], [469, 1, 1, "", "tuning_history"], [469, 1, 1, "", "tuning_history_path"]], "neural_compressor.ux.components.profiling": [[470, 0, 0, "-", "execute_profiling"], [471, 0, 0, "-", "factory"], [473, 0, 0, "-", "profile_model"], [474, 0, 0, "-", "profiler"], [475, 0, 0, "-", "profiling"], [477, 0, 0, "-", "tensorflow_profiler"]], "neural_compressor.ux.components.profiling.execute_profiling": [[470, 1, 1, "", "execute_profiling"], [470, 1, 1, "", "execute_real_profiling"]], "neural_compressor.ux.components.profiling.factory": [[471, 2, 1, "", "ProfilerFactory"]], "neural_compressor.ux.components.profiling.profile_model": [[473, 1, 1, "", "load_profiling_details"], [473, 1, 1, "", "parse_args"]], "neural_compressor.ux.components.profiling.profiler": [[474, 2, 1, "", "Profiler"]], "neural_compressor.ux.components.profiling.profiling": [[475, 2, 1, "", "DataloaderInterface"], [475, 2, 1, "", "Profiling"]], "neural_compressor.ux.components.profiling.tensorflow_profiler": [[476, 0, 0, "-", "factory"], [478, 0, 0, "-", "profiler"], [479, 0, 0, "-", "utils"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.factory": [[476, 2, 1, "", "ProfilerFactory"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler": [[478, 2, 1, "", "Profiler"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.utils": [[479, 1, 1, "", "delete_assign"]], "neural_compressor.ux.inc_bench": [[480, 1, 1, "", "main"], [480, 1, 1, "", "prepare_environment"]], "neural_compressor.ux.utils": [[482, 0, 0, "-", "consts"], [483, 0, 0, "-", "environment"], [484, 0, 0, "-", "exceptions"], [485, 0, 0, "-", "executor"], [486, 0, 0, "-", "expiring_dict"], [487, 0, 0, "-", "github_info"], [488, 0, 0, "-", "hw_info"], [490, 0, 0, "-", "json_serializer"], [491, 0, 0, "-", "logger"], [492, 0, 0, "-", "parser"], [493, 0, 0, "-", "proc"], [494, 0, 0, "-", "processes"], [495, 0, 0, "-", "singleton"], [496, 0, 0, "-", "status_updates"], [497, 0, 0, "-", "templates"], [500, 0, 0, "-", "utils"], [505, 0, 0, "-", "workload"], [511, 0, 0, "-", "yaml_utils"]], "neural_compressor.ux.utils.consts": [[482, 2, 1, "", "DomainFlavours"], [482, 2, 1, "", "Domains"], [482, 2, 1, "", "ExecutionStatus"], [482, 2, 1, "", "Frameworks"], [482, 2, 1, "", "OptimizationTypes"], [482, 2, 1, "", "Precisions"], [482, 2, 1, "", "Strategies"]], "neural_compressor.ux.utils.environment": [[483, 2, 1, "", "Environment"]], "neural_compressor.ux.utils.exceptions": [[484, 5, 1, "", "AccessDeniedException"], [484, 5, 1, "", "ClientErrorException"], [484, 5, 1, "", "InternalException"], [484, 5, 1, "", "NotFoundException"]], "neural_compressor.ux.utils.executor": [[485, 2, 1, "", "Executor"]], "neural_compressor.ux.utils.expiring_dict": [[486, 2, 1, "", "ExpiringDict"], [486, 2, 1, "", "ExpiringDictItem"]], "neural_compressor.ux.utils.github_info": [[487, 2, 1, "", "GithubInfo"]], "neural_compressor.ux.utils.hw_info": [[488, 2, 1, "", "HWInfo"], [488, 1, 1, "", "get_bios_version"], [488, 1, 1, "", "get_distribution"], [488, 1, 1, "", "get_framework_dependency_info"], [488, 1, 1, "", "get_framework_info"], [488, 1, 1, "", "get_kernel_version"], [488, 1, 1, "", "get_number_of_sockets"], [488, 1, 1, "", "is_turbo_boost_enabled"]], "neural_compressor.ux.utils.json_serializer": [[490, 2, 1, "", "JsonSerializer"]], "neural_compressor.ux.utils.logger": [[491, 1, 1, "", "change_log_level"]], "neural_compressor.ux.utils.parser": [[492, 2, 1, "", "AccuracyParser"], [492, 2, 1, "", "BenchmarkParserFactory"], [492, 2, 1, "", "OptimizationParser"], [492, 2, 1, "", "Parser"], [492, 2, 1, "", "PerformanceParser"], [492, 2, 1, "", "ProfilingParser"]], "neural_compressor.ux.utils.proc": [[493, 2, 1, "", "Proc"]], "neural_compressor.ux.utils.processes": [[494, 2, 1, "", "NCProcesses"]], "neural_compressor.ux.utils.singleton": [[495, 2, 1, "", "Singleton"]], "neural_compressor.ux.utils.status_updates": [[496, 1, 1, "", "get_status_update_function"]], "neural_compressor.ux.utils.templates": [[498, 0, 0, "-", "metric"], [499, 0, 0, "-", "workdir"]], "neural_compressor.ux.utils.templates.metric": [[498, 2, 1, "", "Metric"]], "neural_compressor.ux.utils.templates.workdir": [[499, 2, 1, "", "Workdir"]], "neural_compressor.ux.utils.utils": [[500, 1, 1, "", "are_archive_filenames_valid"], [500, 1, 1, "", "check_module"], [500, 1, 1, "", "deprecated"], [500, 1, 1, "", "determine_ip"], [500, 1, 1, "", "export_to_csv"], [500, 1, 1, "", "filter_transforms"], [500, 1, 1, "", "get_dataset_path"], [500, 1, 1, "", "get_default_pruning_config_path"], [500, 1, 1, "", "get_file_extension"], [500, 1, 1, "", "get_framework_from_path"], [500, 1, 1, "", "get_height_width_from_size"], [500, 1, 1, "", "get_metrics_dict"], [500, 1, 1, "", "get_model_zoo_config_path"], [500, 1, 1, "", "get_model_zoo_model_path"], [500, 1, 1, "", "get_module_version"], [500, 1, 1, "", "get_predefined_config_path"], [500, 1, 1, "", "get_shape_from_transforms"], [500, 1, 1, "", "get_size"], [500, 1, 1, "", "is_dataset_file"], [500, 1, 1, "", "is_development_env"], [500, 1, 1, "", "is_hidden"], [500, 1, 1, "", "load_dataloader_config"], [500, 1, 1, "", "load_help_nc_params"], [500, 1, 1, "", "load_metrics_config"], [500, 1, 1, "", "load_model_config"], [500, 1, 1, "", "load_model_wise_params"], [500, 1, 1, "", "load_precisions_config"], [500, 1, 1, "", "load_pruning_details_config"], [500, 1, 1, "", "load_transforms_config"], [500, 1, 1, "", "load_transforms_filter_config"], [500, 1, 1, "", "normalize_domain"], [500, 1, 1, "", "normalize_framework"], [500, 1, 1, "", "normalize_string"], [500, 1, 1, "", "parse_bool_value"], [500, 1, 1, "", "parse_to_float_list"], [500, 1, 1, "", "parse_to_string_list"], [500, 1, 1, "", "parse_version"], [500, 1, 1, "", "release_tag"], [500, 1, 1, "", "replace_with_values"], [500, 1, 1, "", "safe_extract_archive"], [500, 1, 1, "", "verify_file_path"]], "neural_compressor.ux.utils.workload": [[501, 0, 0, "-", "config"], [502, 0, 0, "-", "dataloader"], [503, 0, 0, "-", "evaluation"], [504, 0, 0, "-", "graph_optimization"], [506, 0, 0, "-", "mixed_precision"], [507, 0, 0, "-", "model"], [508, 0, 0, "-", "pruning"], [509, 0, 0, "-", "quantization"], [510, 0, 0, "-", "tuning"]], "neural_compressor.ux.utils.workload.config": [[501, 2, 1, "", "Config"]], "neural_compressor.ux.utils.workload.dataloader": [[502, 2, 1, "", "Dataloader"], [502, 2, 1, "", "Dataset"], [502, 2, 1, "", "Filter"], [502, 2, 1, "", "LabelBalance"], [502, 2, 1, "", "Transform"]], "neural_compressor.ux.utils.workload.evaluation": [[503, 2, 1, "", "Accuracy"], [503, 2, 1, "", "Configs"], [503, 2, 1, "", "Evaluation"], [503, 2, 1, "", "Metric"], [503, 2, 1, "", "Performance"], [503, 2, 1, "", "Postprocess"], [503, 2, 1, "", "PostprocessSchema"]], "neural_compressor.ux.utils.workload.graph_optimization": [[504, 2, 1, "", "GraphOptimization"]], "neural_compressor.ux.utils.workload.mixed_precision": [[506, 2, 1, "", "MixedPrecision"]], "neural_compressor.ux.utils.workload.model": [[507, 2, 1, "", "Model"]], "neural_compressor.ux.utils.workload.pruning": [[508, 2, 1, "", "AdamOptimizer"], [508, 2, 1, "", "AdamWOptimizer"], [508, 2, 1, "", "Approach"], [508, 2, 1, "", "Criterion"], [508, 2, 1, "", "CrossEntropyLossCriterion"], [508, 2, 1, "", "IntermediateLayersKnowledgeDistillationLoss"], [508, 2, 1, "", "KnowledgeDistillationLossCriterion"], [508, 2, 1, "", "Optimizer"], [508, 2, 1, "", "Pruning"], [508, 2, 1, "", "SGDOptimizer"], [508, 2, 1, "", "SelfKnowledgeDistillationLoss"], [508, 2, 1, "", "SparseCategoricalCrossentropyCriterion"], [508, 2, 1, "", "Train"], [508, 2, 1, "", "WeightCompressionApproach"], [508, 1, 1, "", "parse_dict_value_to_float"], [508, 1, 1, "", "parse_dict_value_to_int"]], "neural_compressor.ux.utils.workload.quantization": [[509, 2, 1, "", "Advance"], [509, 2, 1, "", "Calibration"], [509, 2, 1, "", "Quantization"], [509, 2, 1, "", "WiseConfig"], [509, 2, 1, "", "WiseConfigDetails"]], "neural_compressor.ux.utils.workload.tuning": [[510, 2, 1, "", "AccCriterion"], [510, 2, 1, "", "Diagnosis"], [510, 2, 1, "", "ExitPolicy"], [510, 2, 1, "", "MultiObjectives"], [510, 2, 1, "", "Strategy"], [510, 2, 1, "", "Tuning"], [510, 2, 1, "", "Workspace"]], "neural_compressor.ux.utils.yaml_utils": [[511, 1, 1, "", "float_representer"], [511, 1, 1, "", "pruner_representer"]], "neural_compressor.ux.web": [[512, 0, 0, "-", "communication"], [513, 0, 0, "-", "configuration"], [514, 0, 0, "-", "exceptions"], [516, 0, 0, "-", "router"], [517, 0, 0, "-", "server"], [520, 0, 0, "-", "service"]], "neural_compressor.ux.web.communication": [[512, 2, 1, "", "Message"], [512, 2, 1, "", "MessageQueue"], [512, 2, 1, "", "Request"], [512, 2, 1, "", "Response"], [512, 1, 1, "", "create_simple_response"]], "neural_compressor.ux.web.configuration": [[513, 2, 1, "", "Configuration"]], "neural_compressor.ux.web.exceptions": [[514, 5, 1, "", "ServiceNotFoundException"]], "neural_compressor.ux.web.router": [[516, 2, 1, "", "DeferredRoutingDefinition"], [516, 2, 1, "", "DeferredSubprocessRoutingDefinition"], [516, 2, 1, "", "RealtimeRoutingDefinition"], [516, 2, 1, "", "Router"], [516, 2, 1, "", "RoutingDefinition"], [516, 1, 1, "", "find_pattern_in_graph"], [516, 1, 1, "", "get_model_graph"], [516, 1, 1, "", "get_system_info"]], "neural_compressor.ux.web.server": [[517, 1, 1, "", "allow_api_call"], [517, 1, 1, "", "block_iframe"], [517, 1, 1, "", "block_sniffing"], [517, 1, 1, "", "build_parameters"], [517, 1, 1, "", "disable_cache"], [517, 1, 1, "", "get_tls_args"], [517, 1, 1, "", "handle_api_call"], [517, 1, 1, "", "page_not_found"], [517, 1, 1, "", "require_api_token"], [517, 1, 1, "", "root"], [517, 1, 1, "", "run_server"], [517, 1, 1, "", "web_socket_publisher"]], "neural_compressor.ux.web.service": [[518, 0, 0, "-", "benchmark"], [519, 0, 0, "-", "history_snapshot_parser"], [521, 0, 0, "-", "model"], [522, 0, 0, "-", "optimization"], [523, 0, 0, "-", "profiling"], [524, 0, 0, "-", "request_data_processor"], [525, 0, 0, "-", "response_generator"], [526, 0, 0, "-", "workload"]], "neural_compressor.ux.web.service.benchmark": [[518, 2, 1, "", "BenchmarkService"]], "neural_compressor.ux.web.service.history_snapshot_parser": [[519, 2, 1, "", "HistorySnapshotParser"]], "neural_compressor.ux.web.service.model": [[521, 2, 1, "", "ModelService"]], "neural_compressor.ux.web.service.optimization": [[522, 2, 1, "", "OptimizationService"]], "neural_compressor.ux.web.service.profiling": [[523, 2, 1, "", "ProfilingService"]], "neural_compressor.ux.web.service.request_data_processor": [[524, 2, 1, "", "RequestDataProcessor"]], "neural_compressor.ux.web.service.response_generator": [[525, 2, 1, "", "ResponseGenerator"]], "neural_compressor.ux.web.service.workload": [[526, 2, 1, "", "WorkloadService"]]}, "objtypes": {"0": "py:module", "1": "py:function", "2": "py:class", "3": "py:attribute", "4": "py:data", "5": "py:exception"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "function", "Python function"], "2": ["py", "class", "Python class"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "data", "Python data"], "5": ["py", "exception", "Python exception"]}, "titleterms": {"644ec953a7dc_pruning_support": 0, "6ece06672ed3_v1_14": 1, "modul": [1, 5, 6, 8, 15, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 101, 102, 103, 104, 106, 107, 108, 109, 112, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 163, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 177, 178, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 205, 206, 208, 209, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 222, 223, 225, 226, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 245, 247, 248, 249, 251, 252, 253, 254, 255, 257, 258, 260, 261, 262, 264, 265, 266, 267, 268, 270, 271, 272, 273, 274, 276, 277, 278, 279, 282, 283, 284, 287, 288, 289, 290, 291, 292, 293, 295, 296, 298, 299, 300, 302, 303, 304, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 323, 324, 325, 326, 329, 330, 331, 332, 333, 335, 336, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 354, 355, 356, 357, 358, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 393, 394, 395, 396, 398, 399, 400, 401, 404, 405, 406, 408, 409, 411, 412, 413, 414, 415, 417, 419, 420, 426, 427, 429, 430, 432, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 446, 448, 450, 451, 452, 453, 455, 458, 459, 461, 462, 464, 465, 467, 468, 469, 470, 471, 473, 474, 475, 476, 478, 479, 480, 482, 483, 484, 485, 486, 487, 488, 490, 491, 492, 493, 494, 495, 496, 498, 499, 500, 501, 502, 503, 504, 506, 507, 508, 509, 510, 511, 512, 513, 514, 516, 517, 518, 519, 521, 522, 523, 524, 525, 526], "content": [1, 5, 6, 7, 8, 15, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 101, 102, 103, 104, 106, 107, 108, 109, 112, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 163, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 177, 178, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 287, 288, 289, 290, 291, 292, 293, 295, 296, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 329, 330, 331, 332, 333, 335, 336, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 393, 394, 395, 396, 398, 399, 400, 401, 404, 405, 406, 408, 409, 411, 412, 413, 414, 415, 417, 419, 420, 426, 427, 429, 430, 432, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 446, 448, 450, 451, 452, 453, 455, 456, 458, 459, 461, 462, 464, 465, 467, 468, 469, 470, 471, 473, 474, 475, 476, 478, 479, 480, 482, 483, 484, 485, 486, 487, 488, 490, 491, 492, 493, 494, 495, 496, 498, 499, 500, 501, 502, 503, 504, 506, 507, 508, 509, 510, 511, 512, 513, 514, 516, 517, 518, 519, 521, 522, 523, 524, 525, 526, 534, 550], "function": [1, 5, 6, 17, 20, 37, 43, 44, 66, 67, 69, 103, 104, 115, 117, 145, 146, 147, 150, 151, 152, 153, 155, 158, 160, 163, 165, 167, 169, 170, 171, 172, 173, 175, 185, 193, 195, 199, 202, 203, 204, 207, 209, 210, 211, 212, 214, 216, 217, 219, 222, 225, 233, 235, 239, 242, 243, 244, 246, 247, 248, 251, 252, 253, 254, 257, 258, 260, 261, 262, 263, 264, 271, 278, 282, 287, 288, 289, 291, 295, 296, 298, 299, 300, 301, 302, 303, 307, 311, 313, 314, 318, 326, 330, 332, 333, 335, 338, 339, 341, 342, 344, 345, 347, 348, 358, 359, 360, 362, 367, 369, 370, 372, 374, 377, 378, 383, 386, 387, 388, 399, 409, 426, 430, 432, 443, 444, 445, 448, 451, 455, 459, 461, 464, 467, 469, 470, 473, 479, 480, 488, 491, 496, 500, 508, 511, 512, 516, 517, 557], "6f0d0f71d92e_v1_13": 2, "9e89549a08c8_v1_11": 3, "block_mask": 4, "env": 5, "neural_compressor": [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527], "adaptor": [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 535, 536], "class": [6, 8, 15, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 101, 102, 103, 104, 106, 107, 108, 109, 112, 114, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 146, 147, 150, 153, 154, 155, 156, 157, 159, 160, 163, 167, 168, 169, 170, 171, 172, 174, 175, 177, 178, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 220, 223, 225, 226, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 254, 255, 256, 257, 260, 263, 264, 265, 266, 267, 268, 270, 272, 273, 274, 276, 277, 278, 279, 280, 281, 282, 283, 284, 287, 289, 290, 291, 292, 293, 295, 298, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 315, 316, 317, 318, 319, 320, 321, 323, 324, 325, 326, 329, 330, 331, 332, 333, 335, 336, 339, 340, 341, 342, 343, 345, 346, 349, 350, 351, 352, 354, 355, 356, 357, 358, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 389, 390, 391, 393, 394, 395, 396, 398, 400, 401, 404, 405, 406, 408, 411, 412, 413, 414, 415, 417, 419, 420, 427, 429, 432, 434, 435, 436, 437, 439, 440, 441, 442, 446, 450, 452, 453, 456, 458, 462, 465, 468, 469, 471, 474, 475, 476, 478, 482, 483, 485, 486, 487, 488, 490, 492, 493, 494, 495, 498, 499, 501, 502, 503, 504, 506, 507, 508, 509, 510, 512, 513, 516, 518, 519, 521, 522, 523, 524, 525, 526, 535], "subpackag": [7, 21, 86, 110, 111, 113, 162, 164, 179, 204, 244, 256, 280, 294, 322, 397, 402, 416, 421, 428, 456, 472, 481, 489, 515], "submodul": [7, 16, 21, 33, 50, 75, 86, 94, 100, 105, 110, 111, 113, 116, 129, 142, 148, 155, 161, 162, 164, 166, 180, 187, 199, 203, 207, 214, 221, 227, 239, 243, 246, 250, 256, 263, 269, 275, 281, 285, 294, 301, 305, 322, 328, 334, 339, 349, 353, 361, 373, 392, 397, 402, 403, 407, 410, 416, 418, 421, 422, 428, 431, 433, 438, 447, 449, 454, 456, 457, 460, 463, 466, 472, 477, 481, 489, 497, 505, 515, 520], "packag": [7, 33, 155, 187, 199, 203, 204, 207, 214, 227, 239, 243, 244, 246, 256, 263, 275, 280, 281, 301, 305, 322, 339, 349, 456, 581, 583, 585, 586], "kera": [8, 439], "keras_util": [9, 10, 11, 12, 13, 14], "conv2d": 9, "dens": 10, "depthwise_conv2d": 11, "quantiz": [13, 42, 292, 314, 509, 531, 534, 547, 556, 562, 565, 568, 577, 588, 595, 596, 597, 600, 606], "separable_conv2d": 14, "mxnet": [15, 553, 567, 596, 602, 606], "mxnet_util": [16, 17], "util": [17, 43, 145, 152, 173, 254, 327, 328, 329, 330, 331, 332, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 399, 443, 479, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 538], "onnxrt": [18, 431, 432, 553, 567, 602], "ox_util": [19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43], "calibr": [19, 20], "oper": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41], "activ": 22, "argmax": 23, "attent": 24, "binary_op": 25, "concat": 26, "conv": 27, "direct_q8": 28, "embed_layernorm": 29, "gather": 30, "gavgpool": 31, "gemm": 32, "lstm": 34, "matmul": [35, 600], "maxpool": 36, "op": 37, "pad": 38, "pool": 39, "resiz": 40, "split": 41, "pytorch": [44, 344, 433, 434, 553, 557, 567, 569, 596, 597, 601, 602, 606], "queri": [45, 535], "tensorflow": [46, 437, 438, 439, 440, 441, 442, 443, 553, 557, 567, 569, 596, 597, 601, 602, 606], "tf_util": [47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145], "graph_convert": 47, "graph_converter_without_calib": 48, "graph_rewrit": [49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108], "bf16": [49, 50], "bf16_convert": [49, 146], "gener": [51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "convert_add_to_biasadd": 51, "convert_layout": 52, "convert_leakyrelu": 53, "convert_nan_to_random": 54, "convert_placeholder_to_const": 55, "dequantize_cast_optim": 56, "dilated_contract": 57, "dummy_biasadd": 58, "expanddims_optim": 59, "fetch_weight_from_reshap": 60, "fold_batch_norm": 61, "fold_const": 62, "fuse_biasadd_add": 63, "fuse_column_wise_mul": 64, "fuse_conv_with_math": 65, "fuse_decomposed_bn": 66, "fuse_decomposed_in": 67, "fuse_gelu": 68, "fuse_layer_norm": 69, "fuse_pad_with_conv": 70, "fuse_pad_with_fp32_conv": 71, "fuse_reshape_transpos": 72, "graph_cse_optim": 73, "grappler_pass": 74, "insert_print_nod": 76, "move_squeeze_after_relu": 77, "pre_optim": 78, "remove_training_nod": 79, "rename_batch_norm": 80, "split_shared_input": 81, "strip_equivalent_nod": 82, "strip_unused_nod": 83, "switch_optim": 84, "graph_bas": 85, "int8": [87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 559, 606], "freeze_fake_qu": 87, "freeze_valu": 88, "freeze_value_without_calib": 89, "fuse_conv_redundant_dequant": 90, "fuse_conv_requant": 91, "fuse_matmul_redundant_dequant": 92, "fuse_matmul_requant": 93, "meta_op_optim": 95, "post_hostconst_convert": 96, "post_quantized_op_cs": 97, "rnn_convert": 98, "scale_propag": 99, "onnx": [100, 101, 102, 103, 104, 537, 565, 569, 596, 606], "onnx_graph": 101, "onnx_nod": 102, "onnx_schema": 103, "tf2onnx_util": 104, "qdq": [105, 106, 107, 108, 122, 123, 124, 125, 126, 127, 128, 129, 130, 606], "insert_qdq_pattern": 106, "merge_duplicated_qdq": 107, "share_qdq_y_pattern": 108, "graph_util": 109, "quantize_graph": [111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137], "qat": [112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 606], "fake_quant": 112, "quantize_config": 114, "quantize_help": 115, "quantize_lay": [116, 117, 118, 119, 120], "optimize_lay": 117, "quantize_layer_add": 118, "quantize_layer_bas": 119, "quantize_layer_bn": 120, "quantize_wrapp": 121, "fuse_qdq_bn": 122, "fuse_qdq_concatv2": 123, "fuse_qdq_conv": 124, "fuse_qdq_deconv": 125, "fuse_qdq_in": 126, "fuse_qdq_matmul": 127, "fuse_qdq_pool": 128, "optimize_qdq": 130, "quantize_graph_bas": 131, "quantize_graph_bn": 132, "quantize_graph_concatv2": 133, "quantize_graph_conv": 134, "quantize_graph_for_intel_cpu": 135, "quantize_graph_matmul": 136, "quantize_graph_pool": 137, "quantize_graph_common": 138, "tf2onnx_convert": 139, "transform_graph": [140, 141, 142, 143, 144], "bias_correct": 140, "graph_transform_bas": 141, "insert_log": 143, "rerange_quantized_concat": 144, "torch_util": [146, 147, 148, 149, 150, 151, 152, 219], "hawq_metr": 147, "model_wrapp": 149, "smooth_quant": [150, 156], "symbolic_trac": 151, "algorithm": [153, 154, 155, 156, 157, 600, 603], "fast_bias_correct": 154, "weight_correct": 157, "benchmark": [158, 211, 346, 347, 348, 349, 365, 518, 541, 550, 551, 568, 595], "compress": [159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 221, 222, 542], "callback": 159, "distil": [160, 161, 249, 555, 556, 568, 595, 606], "criterion": [160, 212], "pruner": [163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 278, 289], "criteria": [163, 593, 603], "model_slim": [165, 166, 167, 168], "auto_slim": 165, "pattern_analyz": 167, "weight_slim": 168, "pattern": [169, 281, 282, 283, 287, 593], "reg": 171, "schedul": [172, 291, 293, 593], "conf": [174, 175, 176, 177], "config": [174, 178, 501, 543, 552, 553, 590], "dotdict": 175, "pythonic_config": 177, "contrib": [179, 180, 181, 182], "strategi": [180, 181, 182, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 548, 599, 603], "sigopt": [181, 599, 603], "tpe": [182, 603], "data": [183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 558], "dataload": [183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 213, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 367, 502, 552, 553], "base_dataload": [183, 223], "default_dataload": [185, 225], "fetcher": [186, 226], "attribut": [187, 195, 204, 235, 244, 256, 280, 305, 333, 339, 411, 529], "mxnet_dataload": [188, 228], "onnxrt_dataload": [189, 229], "pytorch_dataload": [190, 230], "sampler": [191, 231], "tensorflow_dataload": [192, 232], "dataset": [193, 194, 195, 196, 197, 198, 199, 200, 233, 234, 235, 236, 237, 238, 239, 240, 368, 550, 553, 563], "bert_dataset": [193, 233], "coco_dataset": [194, 234], "dummy_dataset": [196, 236], "dummy_dataset_v2": [197, 237], "imagenet_dataset": [198, 238], "style_transfer_dataset": [200, 240], "filter": [201, 202, 203, 241, 242, 243], "coco_filt": [201, 241], "transform": [205, 206, 207, 208, 209, 210, 245, 246, 247, 248, 383, 563, 602], "coco_transform": 205, "imagenet_transform": [206, 245], "postprocess": [208, 218], "token": [209, 247], "experiment": [211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293], "common": [212, 213, 214, 215, 216, 217, 218, 219, 531, 560], "metric": [215, 257, 258, 259, 260, 261, 262, 263, 264, 295, 296, 297, 298, 299, 300, 301, 302, 374, 498, 563, 567], "model": [216, 304, 305, 306, 307, 308, 309, 310, 311, 312, 375, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 507, 521, 545, 550, 559, 562, 565, 568, 570, 577, 593, 600, 606], "optim": [217, 376, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 522, 550, 578, 588, 591, 604], "compon": [220, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "prune": [222, 279, 290, 463, 464, 465, 508, 550, 568, 593, 595, 606], "export": [250, 251, 252, 253, 254, 559], "qlinear2qdq": 251, "tf2onnx": 252, "torch2onnx": 253, "graph_optim": [255, 453, 454, 455, 504], "bleu": [257, 295], "bleu_util": [258, 296], "coco_label_map": [259, 297], "coco_tool": [260, 298], "evaluate_squad": [261, 299], "f1": [262, 300], "mixed_precis": [265, 457, 458, 459, 506], "model_convers": 266, "na": [267, 268, 269, 270, 271, 272, 532, 550, 595], "basic_na": 267, "dyna": 268, "nas_util": 271, "search_algorithm": 272, "pruner_legaci": [273, 274, 275, 276, 277, 278], "gradient_sensit": 273, "group_lasso": 274, "magnitud": 276, "pattern_lock": 277, "pruning_recip": [280, 281, 282, 283], "tile_pattern": 283, "pruning_v2": 284, "pytorch_prun": [285, 286, 287, 288, 289, 290, 291], "logger": [286, 342, 491], "prune_util": 288, "mix_precis": 303, "base_model": 304, "keras_model": 306, "mxnet_model": 308, "nets_factori": 309, "onnx_model": 310, "tensorflow_model": 311, "torch_model": 312, "object": [313, 546, 590], "auto": [315, 582, 588, 597, 600, 603], "auto_mixed_precis": 316, "basic": [317, 532, 603], "bayesian": [318, 603], "conserv": [319, 603], "exhaust": [320, 603], "hawq_v2": [321, 603], "mse": [323, 603], "mse_v2": [324, 603], "random": [325, 603], "constant": [327, 337], "tuning_sampl": 329, "tuning_spac": 330, "tuning_struct": 331, "templat": [333, 334, 497, 498, 499, 530], "api_doc_exampl": 333, "train": [335, 531, 549, 557, 568, 596], "collect_layer_histogram": 336, "create_obj_from_config": 338, "kl_diverg": 340, "load_huggingfac": 341, "option": [343, 550, 557, 576], "ux": [346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526], "benchmark_model": 347, "execute_benchmark": 348, "config_gener": [350, 351, 352, 353, 354, 355, 356, 357], "benchmark_config_gener": 350, "graph_optimization_config_gener": 352, "mixed_precision_config_gener": 354, "profiling_config_gener": 355, "pruning_config_gener": 356, "quantization_config_gener": 357, "configuration_wizard": [358, 359, 360, 361, 362, 363], "configuration_pars": 358, "get_boundary_nod": 359, "get_configur": 360, "params_feed": 362, "pruning_config_pars": 363, "db_manag": [364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399], "db_model": [365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385], "benchmark_result": 366, "domain": [369, 427], "domain_flavour": 370, "exampl": [371, 531, 532, 535, 539, 551, 552, 553, 555, 556, 557, 558, 559, 568, 569, 570, 573, 577, 590, 591, 593, 596, 600, 601, 606], "framework": [372, 552, 553, 559, 561, 570, 595], "optimization_typ": 377, "precis": [378, 544, 568, 569, 597], "profil": [379, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 523, 550], "profiling_result": 380, "project": [381, 550], "pruning_detail": 382, "tuning_detail": 384, "tuning_histori": [385, 469], "db_oper": [386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396], "benchmark_api_interfac": 386, "dataset_api_interfac": 387, "diagnosis_api_interfac": 389, "dictionaries_api_interfac": 390, "examples_api_interfac": 391, "model_api_interfac": 393, "optimization_api_interfac": 394, "profiling_api_interfac": 395, "project_api_interfac": 396, "params_interfac": 398, "diagnosi": [400, 401, 402, 403, 404, 405, 406, 407, 408, 550], "factori": [401, 452, 471, 476], "onnx_diagnosi": [403, 404], "onnxrt_diagnosi": 404, "op_detail": 405, "op_entri": 406, "tensorflow_diagnosi": [407, 408], "file_brows": [409, 410], "graph": [411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 550], "collaps": 412, "edg": 413, "graph_read": 415, "node": 417, "reader": [418, 419, 420], "onnxrt_read": 419, "tensorflow_read": 420, "jobs_manag": [422, 423, 424, 425], "jobs_control_queu": 423, "request": [425, 530], "manage_workspac": 426, "model_type_gett": 430, "repositori": 435, "shape": 436, "frozen_pb": 437, "meta_graph": 440, "saved_model": 442, "model_zoo": [444, 445, 446, 447, 448], "download_config": 444, "download_model": 445, "download": 446, "list_model": 448, "names_mapp": [449, 450], "execute_optim": 451, "optimize_model": [455, 459, 461, 464], "neural_coder_optim": [460, 461], "tune": [466, 467, 468, 510, 596, 600, 603], "tune_model": 467, "execute_profil": 470, "profile_model": 473, "tensorflow_profil": [476, 477, 478, 479], "inc_bench": 480, "const": 482, "environ": [483, 565, 574], "except": [484, 514], "executor": 485, "expiring_dict": 486, "github_info": 487, "hw_info": 488, "json_seri": 490, "parser": 492, "proc": 493, "process": [494, 603], "singleton": 495, "status_upd": 496, "workdir": 499, "workload": [501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 526], "evalu": [503, 557], "yaml_util": 511, "web": [512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526], "commun": 512, "configur": [513, 557, 561, 592, 595, 599, 605], "router": 516, "server": 517, "servic": [518, 519, 520, 521, 522, 523, 524, 525, 526], "history_snapshot_pars": 519, "request_data_processor": 524, "response_gener": 525, "version": 527, "intel": [528, 534, 550, 564, 565, 568, 574, 582, 588, 606, 607], "neural": [528, 531, 532, 534, 550, 564, 565, 568, 571, 575, 577, 582, 588, 593, 599, 604, 607], "compressor": [528, 531, 534, 550, 564, 565, 568, 582, 588, 599, 607], "document": [528, 534, 539, 607], "section": [528, 607], "contributor": [529, 530], "coven": [529, 530], "code": [529, 530, 532, 568, 589, 604], "conduct": [529, 530], "our": [529, 600], "pledg": 529, "standard": 529, "respons": 529, "scope": [529, 593], "enforc": 529, "contribut": [530, 581, 585], "guidelin": 530, "pull": 530, "checklist": 530, "support": [530, 531, 532, 535, 551, 552, 553, 555, 556, 557, 559, 561, 564, 565, 567, 569, 570, 572, 573, 577, 578, 590, 591, 593, 595, 596, 601, 602, 605], "fx": 531, "introduct": [531, 532, 535, 550, 551, 552, 553, 555, 556, 557, 559, 561, 564, 567, 569, 570, 588, 590, 591, 593, 595, 596, 599, 600, 601, 602, 603, 605], "mode": [531, 606], "matrix": [531, 532, 535, 551, 552, 553, 555, 556, 557, 559, 561, 564, 567, 569, 570, 573, 590, 591, 593, 595, 596, 601, 605], "get": [531, 532, 534, 535, 551, 552, 553, 555, 556, 557, 561, 562, 567, 569, 571, 582, 589, 590, 591, 593, 595, 596, 601, 605], "start": [531, 532, 534, 535, 550, 551, 552, 553, 555, 556, 557, 561, 562, 567, 569, 571, 572, 576, 582, 590, 591, 593, 595, 596, 601, 605], "post": [531, 568, 596], "static": [531, 596], "dynam": [531, 532, 596], "awar": [531, 568, 596], "note": [531, 598], "detail": [531, 550], "problem": 531, "architectur": [532, 554, 564, 565], "search": [532, 588], "api": [532, 534, 535, 539, 540, 551, 552, 553, 555, 556, 557, 562, 563, 567, 569, 571, 575, 589, 590, 591, 593, 595, 604], "usag": [532, 577, 588, 601, 603], "1": [532, 550, 557, 560, 563, 568, 588, 606], "python": [532, 534, 562, 567, 571, 575, 576, 583, 586, 595, 604], "yaml": [532, 552, 553, 557, 561, 605], "2": [532, 550, 557, 560, 563, 568, 588, 606], "onli": 532, "advanc": [532, 604], "custom": [532, 550, 567, 603], "secur": [533, 550, 557], "polici": [533, 603], "report": 533, "vulner": 533, "instal": [534, 550, 565, 572, 574, 581, 582, 585], "from": [534, 550, 565, 568], "pypi": [534, 577], "select": [534, 582], "public": [534, 594], "event": [534, 594], "addit": 534, "research": 534, "collabor": 534, "work": [535, 596], "flow": [535, 596], "background": [535, 588], "ad": 535, "new": [535, 550, 583, 586, 603], "backend": [535, 596], "capabl": 535, "implement": 535, "onnxrtadaptor": 535, "runtim": [537, 565, 569, 596, 606], "torch": [538, 606], "mix": [544, 568, 569, 597], "bench": [550, 575], "tabl": 550, "binari": [550, 565], "sourc": [550, 565], "home": 550, "screen": 550, "creat": [550, 552], "predefin": 550, "displai": 550, "list": [550, 558, 602], "remov": 550, "develop": [550, 581, 585], "tab": 550, "wizard": 550, "edit": 550, "entri": 550, "inform": [550, 566], "demo": 550, "system": [550, 565, 592], "file": [552, 553, 561, 605], "user": [552, 553, 557, 563, 595, 604, 605], "specif": [552, 553], "design": [554, 603], "workflow": 554, "knowledg": [555, 606], "intermedi": 555, "layer": [555, 600], "self": 555, "distribut": [557, 577, 603], "infer": 557, "featur": [557, 561, 564, 577, 578, 582, 595, 596, 601, 605], "pure": 557, "defin": 557, "horovodrun": 557, "execut": 557, "releas": [558, 583, 586, 598], "fp32": 559, "appendix": 559, "frequent": 560, "ask": 560, "question": 560, "build": [560, 567], "issu": [560, 598], "3": [560, 572, 588], "4": [560, 579, 588, 594], "quick": [562, 576], "sampl": 562, "jupyterlab": [562, 582], "extens": [562, 571, 581, 582, 585, 588, 589, 606], "gui": 562, "valid": [562, 565, 600, 606], "incompat": [563, 598], "chang": [563, 587, 589, 598], "between": 563, "v1": 563, "face": 563, "built": [563, 565, 567], "infrastructur": 564, "linux": 565, "prerequisit": 565, "ai": 565, "kit": 565, "window": 565, "requir": [565, 581, 585], "hardwar": [565, 606], "cpu": [565, 574, 606], "base": [565, 604], "64": 565, "compat": 565, "processor": 565, "gpu": 565, "": [565, 589], "xe": 565, "multipl": [565, 590, 606], "vendor": 565, "through": [565, 606], "softwar": 565, "legal": 566, "licens": 566, "citat": 566, "trademark": 566, "singl": [567, 590], "multi": 567, "migrat": 568, "x": 568, "orchestr": [568, 591], "coder": [571, 575, 577, 588, 604], "what": [571, 589], "do": 571, "we": 571, "offer": 571, "jupyt": [571, 572, 583, 586], "lab": [571, 572], "launcher": [571, 576], "contact": 571, "aw": 572, "amazon": 572, "sagemak": 572, "For": 572, "studio": 572, "notebook": 572, "instanc": 572, "guid": [572, 604], "bigdl": 573, "nano": 573, "platform": [574, 599], "best": [574, 582], "perform": [574, 599], "set": [574, 588], "mkl": 574, "openmp": 574, "jemalloc": 574, "numa": 574, "control": 574, "variabl": 574, "frequenc": 574, "govern": 574, "enabl": [575, 582, 588], "superbench": 575, "argument": 576, "v0": 579, "highlight": 579, "other": 579, "changelog": [580, 584], "neural_compressor_ext_lab": [581, 583], "uninstal": [581, 585], "Or": 582, "let": 582, "u": 582, "help": 582, "you": 582, "pre": 582, "requisit": 582, "make": [583, 586, 589], "manual": [583, 586], "npm": [583, 586], "autom": [583, 586], "publish": [583, 586], "conda": [583, 586], "forg": [583, 586], "neural_compressor_ext_lab_alibaba": [585, 586], "log": 587, "unreleas": 587, "vscode": 588, "open": 588, "icon": 588, "5": 588, "welcom": 589, "your": 589, "v": 589, "folder": 589, "setup": 589, "up": 589, "run": 589, "straight": 589, "awai": 589, "explor": 589, "test": 589, "go": 589, "further": 589, "One": 591, "shot": 591, "network": 593, "type": 593, "sparsiti": 593, "decai": 593, "regular": 593, "spars": 593, "deploy": 593, "refer": [593, 596, 600], "full": 594, "59": 594, "2023": 594, "6": 594, "2022": 594, "34": 594, "2021": 594, "15": 594, "2018": 594, "2020": 594, "style": 595, "access": 595, "fundament": [596, 600], "scheme": 596, "ipex": 596, "approach": 596, "With": 596, "without": 596, "accuraci": [596, 603], "specifi": 596, "rule": 596, "recip": 596, "turn": 597, "off": 597, "dure": 597, "known": 598, "prepar": 599, "benefit": 599, "comparison": 599, "differ": 599, "smooth": 600, "quant": 600, "per": 600, "tensor": 600, "channel": 600, "limit": 600, "smoothquant": 600, "enhanc": 600, "wise": 600, "alpha": 600, "engin": 600, "tensorboard": 601, "space": 603, "exit": 603, "overview": 604, "zero": 604, "topic": 604, "11": 606, "0": 606, "13": 606, "ptq": 606, "9": 606}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 57}, "alltitles": {"644ec953a7dc_pruning_support": [[0, "module-644ec953a7dc_pruning_support"]], "6ece06672ed3_v1_14": [[1, "module-6ece06672ed3_v1_14"]], "Module Contents": [[1, "module-contents"], [5, "module-contents"], [6, "module-contents"], [8, "module-contents"], [15, "module-contents"], [17, "module-contents"], [18, "module-contents"], [19, "module-contents"], [20, "module-contents"], [22, "module-contents"], [23, "module-contents"], [24, "module-contents"], [25, "module-contents"], [26, "module-contents"], [27, "module-contents"], [28, "module-contents"], [29, "module-contents"], [30, "module-contents"], [31, "module-contents"], [32, "module-contents"], [34, "module-contents"], [35, "module-contents"], [36, "module-contents"], [37, "module-contents"], [38, "module-contents"], [39, "module-contents"], [40, "module-contents"], [41, "module-contents"], [42, "module-contents"], [43, "module-contents"], [44, "module-contents"], [45, "module-contents"], [46, "module-contents"], [47, "module-contents"], [48, "module-contents"], [49, "module-contents"], [51, "module-contents"], [52, "module-contents"], [53, "module-contents"], [54, "module-contents"], [55, "module-contents"], [56, "module-contents"], [57, "module-contents"], [58, "module-contents"], [59, "module-contents"], [60, "module-contents"], [61, "module-contents"], [62, "module-contents"], [63, "module-contents"], [64, "module-contents"], [65, "module-contents"], [66, "module-contents"], [67, "module-contents"], [68, "module-contents"], [69, "module-contents"], [70, "module-contents"], [71, "module-contents"], [72, "module-contents"], [73, "module-contents"], [74, "module-contents"], [76, "module-contents"], [77, "module-contents"], [78, "module-contents"], [79, "module-contents"], [80, "module-contents"], [81, "module-contents"], [82, "module-contents"], [83, "module-contents"], [84, "module-contents"], [85, "module-contents"], [87, "module-contents"], [88, "module-contents"], [89, "module-contents"], [90, "module-contents"], [91, "module-contents"], [92, "module-contents"], [93, "module-contents"], [95, "module-contents"], [96, "module-contents"], [97, "module-contents"], [98, "module-contents"], [99, "module-contents"], [101, "module-contents"], [102, "module-contents"], [103, "module-contents"], [104, "module-contents"], [106, "module-contents"], [107, "module-contents"], [108, "module-contents"], [109, "module-contents"], [112, "module-contents"], [114, "module-contents"], [115, "module-contents"], [117, "module-contents"], [118, "module-contents"], [119, "module-contents"], [120, "module-contents"], [121, "module-contents"], [122, "module-contents"], [123, "module-contents"], [124, "module-contents"], [125, "module-contents"], [126, "module-contents"], [127, "module-contents"], [128, "module-contents"], [130, "module-contents"], [131, "module-contents"], [132, "module-contents"], [133, "module-contents"], [134, "module-contents"], [135, "module-contents"], [136, "module-contents"], [137, "module-contents"], [138, "module-contents"], [139, "module-contents"], [140, "module-contents"], [141, "module-contents"], [143, "module-contents"], [144, "module-contents"], [145, "module-contents"], [146, "module-contents"], [147, "module-contents"], [150, "module-contents"], [151, "module-contents"], [152, "module-contents"], [153, "module-contents"], [154, "module-contents"], [156, "module-contents"], [157, "module-contents"], [158, "module-contents"], [159, "module-contents"], [160, "module-contents"], [163, "module-contents"], [165, "module-contents"], [167, "module-contents"], [168, "module-contents"], [169, "module-contents"], [170, "module-contents"], [171, "module-contents"], [172, "module-contents"], [173, "module-contents"], [174, "module-contents"], [175, "module-contents"], [177, "module-contents"], [178, "module-contents"], [181, "module-contents"], [182, "module-contents"], [183, "module-contents"], [184, "module-contents"], [185, "module-contents"], [186, "module-contents"], [188, "module-contents"], [189, "module-contents"], [190, "module-contents"], [191, "module-contents"], [192, "module-contents"], [193, "module-contents"], [194, "module-contents"], [195, "module-contents"], [196, "module-contents"], [197, "module-contents"], [198, "module-contents"], [200, "module-contents"], [201, "module-contents"], [202, "module-contents"], [205, "module-contents"], [206, "module-contents"], [208, "module-contents"], [209, "module-contents"], [210, "module-contents"], [211, "module-contents"], [212, "module-contents"], [213, "module-contents"], [215, "module-contents"], [216, "module-contents"], [217, "module-contents"], [218, "module-contents"], [219, "module-contents"], [220, "module-contents"], [222, "module-contents"], [223, "module-contents"], [225, "module-contents"], [226, "module-contents"], [228, "module-contents"], [229, "module-contents"], [230, "module-contents"], [231, "module-contents"], [232, "module-contents"], [233, "module-contents"], [234, "module-contents"], [235, "module-contents"], [236, "module-contents"], [237, "module-contents"], [238, "module-contents"], [240, "module-contents"], [241, "module-contents"], [242, "module-contents"], [245, "module-contents"], [247, "module-contents"], [248, "module-contents"], [249, "module-contents"], [251, "module-contents"], [252, "module-contents"], [253, "module-contents"], [254, "module-contents"], [255, "module-contents"], [257, "module-contents"], [258, "module-contents"], [260, "module-contents"], [261, "module-contents"], [262, "module-contents"], [264, "module-contents"], [265, "module-contents"], [266, "module-contents"], [267, "module-contents"], [268, "module-contents"], [270, "module-contents"], [271, "module-contents"], [272, "module-contents"], [273, "module-contents"], [274, "module-contents"], [276, "module-contents"], [277, "module-contents"], [278, "module-contents"], [279, "module-contents"], [282, "module-contents"], [283, "module-contents"], [284, "module-contents"], [287, "module-contents"], [288, "module-contents"], [289, "module-contents"], [290, "module-contents"], [291, "module-contents"], [292, "module-contents"], [293, "module-contents"], [295, "module-contents"], [296, "module-contents"], [298, "module-contents"], [299, "module-contents"], [300, "module-contents"], [302, "module-contents"], [303, "module-contents"], [304, "module-contents"], [306, "module-contents"], [307, "module-contents"], [308, "module-contents"], [309, "module-contents"], [310, "module-contents"], [311, "module-contents"], [312, "module-contents"], [313, "module-contents"], [314, "module-contents"], [315, "module-contents"], [316, "module-contents"], [317, "module-contents"], [318, "module-contents"], [319, "module-contents"], [320, "module-contents"], [321, "module-contents"], [323, "module-contents"], [324, "module-contents"], [325, "module-contents"], [326, "module-contents"], [329, "module-contents"], [330, "module-contents"], [331, "module-contents"], [332, "module-contents"], [333, "module-contents"], [335, "module-contents"], [336, "module-contents"], [338, "module-contents"], [340, "module-contents"], [341, "module-contents"], [342, "module-contents"], [343, "module-contents"], [344, "module-contents"], [345, "module-contents"], [346, "module-contents"], [347, "module-contents"], [348, "module-contents"], [350, "module-contents"], [351, "module-contents"], [352, "module-contents"], [354, "module-contents"], [355, "module-contents"], [356, "module-contents"], [357, "module-contents"], [358, "module-contents"], [359, "module-contents"], [360, "module-contents"], [362, "module-contents"], [363, "module-contents"], [364, "module-contents"], [365, "module-contents"], [366, "module-contents"], [367, "module-contents"], [368, "module-contents"], [369, "module-contents"], [370, "module-contents"], [371, "module-contents"], [372, "module-contents"], [374, "module-contents"], [375, "module-contents"], [376, "module-contents"], [377, "module-contents"], [378, "module-contents"], [379, "module-contents"], [380, "module-contents"], [381, "module-contents"], [382, "module-contents"], [383, "module-contents"], [384, "module-contents"], [385, "module-contents"], [386, "module-contents"], [387, "module-contents"], [388, "module-contents"], [389, "module-contents"], [390, "module-contents"], [391, "module-contents"], [393, "module-contents"], [394, "module-contents"], [395, "module-contents"], [396, "module-contents"], [398, "module-contents"], [399, "module-contents"], [400, "module-contents"], [401, "module-contents"], [404, "module-contents"], [405, "module-contents"], [406, "module-contents"], [408, "module-contents"], [409, "module-contents"], [411, "module-contents"], [412, "module-contents"], [413, "module-contents"], [414, "module-contents"], [415, "module-contents"], [417, "module-contents"], [419, "module-contents"], [420, "module-contents"], [426, "module-contents"], [427, "module-contents"], [429, "module-contents"], [430, "module-contents"], [432, "module-contents"], [434, "module-contents"], [435, "module-contents"], [436, "module-contents"], [437, "module-contents"], [439, "module-contents"], [440, "module-contents"], [441, "module-contents"], [442, "module-contents"], [443, "module-contents"], [444, "module-contents"], [445, "module-contents"], [446, "module-contents"], [448, "module-contents"], [450, "module-contents"], [451, "module-contents"], [452, "module-contents"], [453, "module-contents"], [455, "module-contents"], [458, "module-contents"], [459, "module-contents"], [461, "module-contents"], [462, "module-contents"], [464, "module-contents"], [465, "module-contents"], [467, "module-contents"], [468, "module-contents"], [469, "module-contents"], [470, "module-contents"], [471, "module-contents"], [473, "module-contents"], [474, "module-contents"], [475, "module-contents"], [476, "module-contents"], [478, "module-contents"], [479, "module-contents"], [480, "module-contents"], [482, "module-contents"], [483, "module-contents"], [484, "module-contents"], [485, "module-contents"], [486, "module-contents"], [487, "module-contents"], [488, "module-contents"], [490, "module-contents"], [491, "module-contents"], [492, "module-contents"], [493, "module-contents"], [494, "module-contents"], [495, "module-contents"], [496, "module-contents"], [498, "module-contents"], [499, "module-contents"], [500, "module-contents"], [501, "module-contents"], [502, "module-contents"], [503, "module-contents"], [504, "module-contents"], [506, "module-contents"], [507, "module-contents"], [508, "module-contents"], [509, "module-contents"], [510, "module-contents"], [511, "module-contents"], [512, "module-contents"], [513, "module-contents"], [514, "module-contents"], [516, "module-contents"], [517, "module-contents"], [518, "module-contents"], [519, "module-contents"], [521, "module-contents"], [522, "module-contents"], [523, "module-contents"], [524, "module-contents"], [525, "module-contents"], [526, "module-contents"]], "Functions": [[1, "functions"], [5, "functions"], [6, "functions"], [17, "functions"], [20, "functions"], [37, "functions"], [43, "functions"], [44, "functions"], [66, "functions"], [67, "functions"], [69, "functions"], [103, "functions"], [104, "functions"], [115, "functions"], [117, "functions"], [145, "functions"], [146, "functions"], [147, "functions"], [150, "functions"], [151, "functions"], [152, "functions"], [153, "functions"], [155, "functions"], [158, "functions"], [160, "functions"], [163, "functions"], [165, "functions"], [167, "functions"], [169, "functions"], [170, "functions"], [171, "functions"], [172, "functions"], [173, "functions"], [175, "functions"], [185, "functions"], [193, "functions"], [195, "functions"], [199, "functions"], [202, "functions"], [203, "functions"], [204, "functions"], [207, "functions"], [209, "functions"], [210, "functions"], [211, "functions"], [212, "functions"], [214, "functions"], [216, "functions"], [217, "functions"], [219, "functions"], [222, "functions"], [225, "functions"], [233, "functions"], [235, "functions"], [239, "functions"], [242, "functions"], [243, "functions"], [244, "functions"], [246, "functions"], [247, "functions"], [248, "functions"], [251, "functions"], [252, "functions"], [253, "functions"], [254, "functions"], [257, "functions"], [258, "functions"], [260, "functions"], [261, "functions"], [262, "functions"], [263, "functions"], [264, "functions"], [271, "functions"], [278, "functions"], [282, "functions"], [287, "functions"], [288, "functions"], [289, "functions"], [291, "functions"], [295, "functions"], [296, "functions"], [298, "functions"], [299, "functions"], [300, "functions"], [301, "functions"], [302, "functions"], [303, "functions"], [307, "functions"], [311, "functions"], [313, "functions"], [314, "functions"], [318, "functions"], [326, "functions"], [330, "functions"], [332, "functions"], [333, "functions"], [335, "functions"], [338, "functions"], [339, "functions"], [341, "functions"], [342, "functions"], [344, "functions"], [345, "functions"], [347, "functions"], [348, "functions"], [358, "functions"], [359, "functions"], [360, "functions"], [362, "functions"], [367, "functions"], [369, "functions"], [370, "functions"], [372, "functions"], [374, "functions"], [377, "functions"], [378, "functions"], [383, "functions"], [386, "functions"], [387, "functions"], [388, "functions"], [399, "functions"], [409, "functions"], [426, "functions"], [430, "functions"], [432, "functions"], [443, "functions"], [444, "functions"], [445, "functions"], [448, "functions"], [451, "functions"], [455, "functions"], [459, "functions"], [461, "functions"], [464, "functions"], [467, "functions"], [469, "functions"], [470, "functions"], [473, "functions"], [479, "functions"], [480, "functions"], [488, "functions"], [491, "functions"], [496, "functions"], [500, "functions"], [508, "functions"], [511, "functions"], [512, "functions"], [516, "functions"], [517, "functions"]], "6f0d0f71d92e_v1_13": [[2, "module-6f0d0f71d92e_v1_13"]], "9e89549a08c8_v1_11": [[3, "module-9e89549a08c8_v1_11"]], "block_mask": [[4, "module-block_mask"]], "env": [[5, "module-env"]], "neural_compressor.adaptor.adaptor": [[6, "module-neural_compressor.adaptor.adaptor"]], "Classes": [[6, "classes"], [8, "classes"], [15, "classes"], [17, "classes"], [18, "classes"], [19, "classes"], [20, "classes"], [22, "classes"], [23, "classes"], [24, "classes"], [25, "classes"], [26, "classes"], [27, "classes"], [28, "classes"], [29, "classes"], [30, "classes"], [31, "classes"], [32, "classes"], [34, "classes"], [35, "classes"], [36, "classes"], [37, "classes"], [38, "classes"], [39, "classes"], [40, "classes"], [41, "classes"], [42, "classes"], [43, "classes"], [44, "classes"], [45, "classes"], [46, "classes"], [47, "classes"], [48, "classes"], [49, "classes"], [51, "classes"], [52, "classes"], [53, "classes"], [54, "classes"], [55, "classes"], [56, "classes"], [57, "classes"], [58, "classes"], [59, "classes"], [60, "classes"], [61, "classes"], [62, "classes"], [63, "classes"], [64, "classes"], [65, "classes"], [66, "classes"], [67, "classes"], [68, "classes"], [69, "classes"], [70, "classes"], [71, "classes"], [72, "classes"], [73, "classes"], [74, "classes"], [76, "classes"], [77, "classes"], [78, "classes"], [79, "classes"], [80, "classes"], [81, "classes"], [82, "classes"], [83, "classes"], [84, "classes"], [85, "classes"], [87, "classes"], [88, "classes"], [89, "classes"], [90, "classes"], [91, "classes"], [92, "classes"], [93, "classes"], [95, "classes"], [96, "classes"], [97, "classes"], [98, "classes"], [99, "classes"], [101, "classes"], [102, "classes"], [103, "classes"], [104, "classes"], [106, "classes"], [107, "classes"], [108, "classes"], [109, "classes"], [112, "classes"], [114, "classes"], [118, "classes"], [119, "classes"], [120, "classes"], [121, "classes"], [122, "classes"], [123, "classes"], [124, "classes"], [125, "classes"], [126, "classes"], [127, "classes"], [128, "classes"], [130, "classes"], [131, "classes"], [132, "classes"], [133, "classes"], [134, "classes"], [135, "classes"], [136, "classes"], [137, "classes"], [138, "classes"], [139, "classes"], [140, "classes"], [141, "classes"], [143, "classes"], [144, "classes"], [146, "classes"], [147, "classes"], [150, "classes"], [153, "classes"], [154, "classes"], [155, "classes"], [156, "classes"], [157, "classes"], [159, "classes"], [160, "classes"], [163, "classes"], [167, "classes"], [168, "classes"], [169, "classes"], [170, "classes"], [171, "classes"], [172, "classes"], [174, "classes"], [175, "classes"], [177, "classes"], [178, "classes"], [181, "classes"], [182, "classes"], [183, "classes"], [184, "classes"], [185, "classes"], [186, "classes"], [187, "classes"], [188, "classes"], [189, "classes"], [190, "classes"], [191, "classes"], [192, "classes"], [193, "classes"], [194, "classes"], [195, "classes"], [196, "classes"], [197, "classes"], [198, "classes"], [199, "classes"], [200, "classes"], [201, "classes"], [202, "classes"], [203, "classes"], [204, "classes"], [205, "classes"], [206, "classes"], [207, "classes"], [208, "classes"], [209, "classes"], [210, "classes"], [211, "classes"], [212, "classes"], [213, "classes"], [214, "classes"], [215, "classes"], [216, "classes"], [217, "classes"], [218, "classes"], [220, "classes"], [223, "classes"], [225, "classes"], [226, "classes"], [228, "classes"], [229, "classes"], [230, "classes"], [231, "classes"], [232, "classes"], [233, "classes"], [234, "classes"], [235, "classes"], [236, "classes"], [237, "classes"], [238, "classes"], [239, "classes"], [240, "classes"], [241, "classes"], [242, "classes"], [243, "classes"], [244, "classes"], [245, "classes"], [246, "classes"], [247, "classes"], [248, "classes"], [249, "classes"], [254, "classes"], [255, "classes"], [256, "classes"], [257, "classes"], [260, "classes"], [263, "classes"], [264, "classes"], [265, "classes"], [266, "classes"], [267, "classes"], [268, "classes"], [270, "classes"], [272, "classes"], [273, "classes"], [274, "classes"], [276, "classes"], [277, "classes"], [278, "classes"], [279, "classes"], [280, "classes"], [281, "classes"], [282, "classes"], [283, "classes"], [284, "classes"], [287, "classes"], [289, "classes"], [290, "classes"], [291, "classes"], [292, "classes"], [293, "classes"], [295, "classes"], [298, "classes"], [301, "classes"], [302, "classes"], [304, "classes"], [305, "classes"], [306, "classes"], [307, "classes"], [308, "classes"], [309, "classes"], [310, "classes"], [311, "classes"], [312, "classes"], [313, "classes"], [315, "classes"], [316, "classes"], [317, "classes"], [318, "classes"], [319, "classes"], [320, "classes"], [321, "classes"], [323, "classes"], [324, "classes"], [325, "classes"], [326, "classes"], [329, "classes"], [330, "classes"], [331, "classes"], [332, "classes"], [333, "classes"], [335, "classes"], [336, "classes"], [339, "classes"], [340, "classes"], [341, "classes"], [342, "classes"], [343, "classes"], [345, "classes"], [346, "classes"], [349, "classes"], [350, "classes"], [351, "classes"], [352, "classes"], [354, "classes"], [355, "classes"], [356, "classes"], [357, "classes"], [358, "classes"], [362, "classes"], [363, "classes"], [364, "classes"], [365, "classes"], [366, "classes"], [367, "classes"], [368, "classes"], [369, "classes"], [370, "classes"], [371, "classes"], [372, "classes"], [374, "classes"], [375, "classes"], [376, "classes"], [377, "classes"], [378, "classes"], [379, "classes"], [380, "classes"], [381, "classes"], [382, "classes"], [383, "classes"], [384, "classes"], [385, "classes"], [386, "classes"], [387, "classes"], [389, "classes"], [390, "classes"], [391, "classes"], [393, "classes"], [394, "classes"], [395, "classes"], [396, "classes"], [398, "classes"], [400, "classes"], [401, "classes"], [404, "classes"], [405, "classes"], [406, "classes"], [408, "classes"], [411, "classes"], [412, "classes"], [413, "classes"], [414, "classes"], [415, "classes"], [417, "classes"], [419, "classes"], [420, "classes"], [427, "classes"], [429, "classes"], [432, "classes"], [434, "classes"], [435, "classes"], [436, "classes"], [437, "classes"], [439, "classes"], [440, "classes"], [441, "classes"], [442, "classes"], [446, "classes"], [450, "classes"], [452, "classes"], [453, "classes"], [456, "classes"], [458, "classes"], [462, "classes"], [465, "classes"], [468, "classes"], [469, "classes"], [471, "classes"], [474, "classes"], [475, "classes"], [476, "classes"], [478, "classes"], [482, "classes"], [483, "classes"], [485, "classes"], [486, "classes"], [487, "classes"], [488, "classes"], [490, "classes"], [492, "classes"], [493, "classes"], [494, "classes"], [495, "classes"], [498, "classes"], [499, "classes"], [501, "classes"], [502, "classes"], [503, "classes"], [504, "classes"], [506, "classes"], [507, "classes"], [508, "classes"], [509, "classes"], [510, "classes"], [512, "classes"], [513, "classes"], [516, "classes"], [518, "classes"], [519, "classes"], [521, "classes"], [522, "classes"], [523, "classes"], [524, "classes"], [525, "classes"], [526, "classes"]], "neural_compressor.adaptor": [[7, "module-neural_compressor.adaptor"]], "Subpackages": [[7, "subpackages"], [21, "subpackages"], [86, "subpackages"], [110, "subpackages"], [111, "subpackages"], [113, "subpackages"], [162, "subpackages"], [164, "subpackages"], [179, "subpackages"], [204, "subpackages"], [244, "subpackages"], [256, "subpackages"], [280, "subpackages"], [294, "subpackages"], [322, "subpackages"], [397, "subpackages"], [402, "subpackages"], [416, "subpackages"], [421, "subpackages"], [428, "subpackages"], [456, "subpackages"], [472, "subpackages"], [481, "subpackages"], [489, "subpackages"], [515, "subpackages"]], "Submodules": [[7, "submodules"], [16, "submodules"], [21, "submodules"], [33, "submodules"], [50, "submodules"], [75, "submodules"], [86, "submodules"], [94, "submodules"], [100, "submodules"], [105, "submodules"], [110, "submodules"], [111, "submodules"], [113, "submodules"], [116, "submodules"], [129, "submodules"], [142, "submodules"], [148, "submodules"], [155, "submodules"], [161, "submodules"], [162, "submodules"], [164, "submodules"], [166, "submodules"], [180, "submodules"], [187, "submodules"], [199, "submodules"], [203, "submodules"], [207, "submodules"], [214, "submodules"], [221, "submodules"], [227, "submodules"], [239, "submodules"], [243, "submodules"], [246, "submodules"], [250, "submodules"], [256, "submodules"], [263, "submodules"], [269, "submodules"], [275, "submodules"], [281, "submodules"], [285, "submodules"], [294, "submodules"], [301, "submodules"], [305, "submodules"], [322, "submodules"], [328, "submodules"], [334, "submodules"], [339, "submodules"], [349, "submodules"], [353, "submodules"], [361, "submodules"], [373, "submodules"], [392, "submodules"], [397, "submodules"], [402, "submodules"], [403, "submodules"], [407, "submodules"], [410, "submodules"], [416, "submodules"], [418, "submodules"], [421, "submodules"], [422, "submodules"], [428, "submodules"], [431, "submodules"], [433, "submodules"], [438, "submodules"], [447, "submodules"], [449, "submodules"], [454, "submodules"], [456, "submodules"], [457, "submodules"], [460, "submodules"], [463, "submodules"], [466, "submodules"], [472, "submodules"], [477, "submodules"], [481, "submodules"], [489, "submodules"], [497, "submodules"], [505, "submodules"], [515, "submodules"], [520, "submodules"]], "Package Contents": [[7, "package-contents"], [33, "package-contents"], [155, "package-contents"], [187, "package-contents"], [199, "package-contents"], [203, "package-contents"], [204, "package-contents"], [207, "package-contents"], [214, "package-contents"], [227, "package-contents"], [239, "package-contents"], [243, "package-contents"], [244, "package-contents"], [246, "package-contents"], [256, "package-contents"], [263, "package-contents"], [275, "package-contents"], [280, "package-contents"], [281, "package-contents"], [301, "package-contents"], [305, "package-contents"], [322, "package-contents"], [339, "package-contents"], [349, "package-contents"], [456, "package-contents"]], "neural_compressor.adaptor.keras": [[8, "module-neural_compressor.adaptor.keras"]], "neural_compressor.adaptor.keras_utils.conv2d": [[9, "module-neural_compressor.adaptor.keras_utils.conv2d"]], "neural_compressor.adaptor.keras_utils.dense": [[10, "module-neural_compressor.adaptor.keras_utils.dense"]], "neural_compressor.adaptor.keras_utils.depthwise_conv2d": [[11, "module-neural_compressor.adaptor.keras_utils.depthwise_conv2d"]], "neural_compressor.adaptor.keras_utils": [[12, "module-neural_compressor.adaptor.keras_utils"]], "neural_compressor.adaptor.keras_utils.quantizer": [[13, "module-neural_compressor.adaptor.keras_utils.quantizer"]], "neural_compressor.adaptor.keras_utils.separable_conv2d": [[14, "module-neural_compressor.adaptor.keras_utils.separable_conv2d"]], "neural_compressor.adaptor.mxnet": [[15, "module-neural_compressor.adaptor.mxnet"]], "neural_compressor.adaptor.mxnet_utils": [[16, "module-neural_compressor.adaptor.mxnet_utils"]], "neural_compressor.adaptor.mxnet_utils.util": [[17, "module-neural_compressor.adaptor.mxnet_utils.util"]], "neural_compressor.adaptor.onnxrt": [[18, "module-neural_compressor.adaptor.onnxrt"]], "neural_compressor.adaptor.ox_utils.calibration": [[19, "module-neural_compressor.adaptor.ox_utils.calibration"]], "neural_compressor.adaptor.ox_utils.calibrator": [[20, "module-neural_compressor.adaptor.ox_utils.calibrator"]], "neural_compressor.adaptor.ox_utils": [[21, "module-neural_compressor.adaptor.ox_utils"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[22, "module-neural_compressor.adaptor.ox_utils.operators.activation"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[23, "module-neural_compressor.adaptor.ox_utils.operators.argmax"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[24, "module-neural_compressor.adaptor.ox_utils.operators.attention"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[25, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[26, "module-neural_compressor.adaptor.ox_utils.operators.concat"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[27, "module-neural_compressor.adaptor.ox_utils.operators.conv"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[28, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[29, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[30, "module-neural_compressor.adaptor.ox_utils.operators.gather"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[31, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[32, "module-neural_compressor.adaptor.ox_utils.operators.gemm"]], "neural_compressor.adaptor.ox_utils.operators": [[33, "module-neural_compressor.adaptor.ox_utils.operators"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[34, "module-neural_compressor.adaptor.ox_utils.operators.lstm"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[35, "module-neural_compressor.adaptor.ox_utils.operators.matmul"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[36, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[37, "module-neural_compressor.adaptor.ox_utils.operators.ops"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[38, "module-neural_compressor.adaptor.ox_utils.operators.pad"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[39, "module-neural_compressor.adaptor.ox_utils.operators.pooling"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[40, "module-neural_compressor.adaptor.ox_utils.operators.resize"]], "neural_compressor.adaptor.ox_utils.operators.split": [[41, "module-neural_compressor.adaptor.ox_utils.operators.split"]], "neural_compressor.adaptor.ox_utils.quantizer": [[42, "module-neural_compressor.adaptor.ox_utils.quantizer"]], "neural_compressor.adaptor.ox_utils.util": [[43, "module-neural_compressor.adaptor.ox_utils.util"]], "neural_compressor.adaptor.pytorch": [[44, "module-neural_compressor.adaptor.pytorch"]], "neural_compressor.adaptor.query": [[45, "module-neural_compressor.adaptor.query"]], "neural_compressor.adaptor.tensorflow": [[46, "module-neural_compressor.adaptor.tensorflow"]], "neural_compressor.adaptor.tf_utils.graph_converter": [[47, "module-neural_compressor.adaptor.tf_utils.graph_converter"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[48, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[49, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[50, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[51, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[52, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[53, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[54, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[55, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer": [[56, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[57, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[58, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[59, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[60, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[61, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[62, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[63, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[64, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[65, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[66, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[67, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[68, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[69, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[70, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[71, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[72, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[73, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[74, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[75, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[76, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[96, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[97, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[98, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[99, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx": [[100, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph": [[101, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node": [[102, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema": [[103, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils": [[104, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[105, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[106, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[107, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[108, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"]], "neural_compressor.adaptor.tf_utils.graph_util": [[109, "module-neural_compressor.adaptor.tf_utils.graph_util"]], "neural_compressor.adaptor.tf_utils": [[110, "module-neural_compressor.adaptor.tf_utils"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[111, "module-neural_compressor.adaptor.tf_utils.quantize_graph"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[112, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[113, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[114, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[115, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[116, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer": [[117, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[118, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[119, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[120, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[121, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[122, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[123, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[124, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[125, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[126, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[127, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[128, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[129, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[130, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[131, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[132, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[133, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[134, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[135, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[136, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[137, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[138, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"]], "neural_compressor.adaptor.tf_utils.tf2onnx_converter": [[139, "module-neural_compressor.adaptor.tf_utils.tf2onnx_converter"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[140, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[141, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[142, "module-neural_compressor.adaptor.tf_utils.transform_graph"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[143, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[144, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"]], "neural_compressor.adaptor.tf_utils.util": [[145, "module-neural_compressor.adaptor.tf_utils.util"]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[146, "module-neural_compressor.adaptor.torch_utils.bf16_convert"]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[147, "module-neural_compressor.adaptor.torch_utils.hawq_metric"]], "neural_compressor.adaptor.torch_utils": [[148, "module-neural_compressor.adaptor.torch_utils"]], "neural_compressor.adaptor.torch_utils.model_wrapper": [[149, "module-neural_compressor.adaptor.torch_utils.model_wrapper"]], "neural_compressor.adaptor.torch_utils.smooth_quant": [[150, "module-neural_compressor.adaptor.torch_utils.smooth_quant"]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[151, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"]], "neural_compressor.adaptor.torch_utils.util": [[152, "module-neural_compressor.adaptor.torch_utils.util"]], "neural_compressor.algorithm.algorithm": [[153, "module-neural_compressor.algorithm.algorithm"]], "neural_compressor.algorithm.fast_bias_correction": [[154, "module-neural_compressor.algorithm.fast_bias_correction"]], "neural_compressor.algorithm": [[155, "module-neural_compressor.algorithm"]], "neural_compressor.algorithm.smooth_quant": [[156, "module-neural_compressor.algorithm.smooth_quant"]], "neural_compressor.algorithm.weight_correction": [[157, "module-neural_compressor.algorithm.weight_correction"]], "neural_compressor.benchmark": [[158, "module-neural_compressor.benchmark"]], "neural_compressor.compression.callbacks": [[159, "module-neural_compressor.compression.callbacks"]], "neural_compressor.compression.distillation.criterions": [[160, "module-neural_compressor.compression.distillation.criterions"]], "neural_compressor.compression.distillation": [[161, "module-neural_compressor.compression.distillation"]], "neural_compressor.compression": [[162, "module-neural_compressor.compression"]], "neural_compressor.compression.pruner.criteria": [[163, "module-neural_compressor.compression.pruner.criteria"]], "neural_compressor.compression.pruner": [[164, "module-neural_compressor.compression.pruner"]], "neural_compressor.compression.pruner.model_slim.auto_slim": [[165, "module-neural_compressor.compression.pruner.model_slim.auto_slim"]], "neural_compressor.compression.pruner.model_slim": [[166, "module-neural_compressor.compression.pruner.model_slim"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer": [[167, "module-neural_compressor.compression.pruner.model_slim.pattern_analyzer"]], "neural_compressor.compression.pruner.model_slim.weight_slim": [[168, "module-neural_compressor.compression.pruner.model_slim.weight_slim"]], "neural_compressor.compression.pruner.patterns": [[169, "module-neural_compressor.compression.pruner.patterns"]], "neural_compressor.compression.pruner.pruners": [[170, "module-neural_compressor.compression.pruner.pruners"]], "neural_compressor.compression.pruner.regs": [[171, "module-neural_compressor.compression.pruner.regs"]], "neural_compressor.compression.pruner.schedulers": [[172, "module-neural_compressor.compression.pruner.schedulers"]], "neural_compressor.compression.pruner.utils": [[173, "module-neural_compressor.compression.pruner.utils"]], "neural_compressor.conf.config": [[174, "module-neural_compressor.conf.config"]], "neural_compressor.conf.dotdict": [[175, "module-neural_compressor.conf.dotdict"]], "neural_compressor.conf": [[176, "module-neural_compressor.conf"]], "neural_compressor.conf.pythonic_config": [[177, "module-neural_compressor.conf.pythonic_config"]], "neural_compressor.config": [[178, "module-neural_compressor.config"]], "neural_compressor.contrib": [[179, "module-neural_compressor.contrib"]], "neural_compressor.contrib.strategy": [[180, "module-neural_compressor.contrib.strategy"]], "neural_compressor.contrib.strategy.sigopt": [[181, "module-neural_compressor.contrib.strategy.sigopt"]], "neural_compressor.contrib.strategy.tpe": [[182, "module-neural_compressor.contrib.strategy.tpe"]], "neural_compressor.data.dataloaders.base_dataloader": [[183, "module-neural_compressor.data.dataloaders.base_dataloader"]], "neural_compressor.data.dataloaders.dataloader": [[184, "module-neural_compressor.data.dataloaders.dataloader"]], "neural_compressor.data.dataloaders.default_dataloader": [[185, "module-neural_compressor.data.dataloaders.default_dataloader"]], "neural_compressor.data.dataloaders.fetcher": [[186, "module-neural_compressor.data.dataloaders.fetcher"]], "neural_compressor.data.dataloaders": [[187, "module-neural_compressor.data.dataloaders"]], "Attributes": [[187, "attributes"], [195, "attributes"], [204, "attributes"], [235, "attributes"], [244, "attributes"], [256, "attributes"], [280, "attributes"], [305, "attributes"], [333, "attributes"], [339, "attributes"]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[188, "module-neural_compressor.data.dataloaders.mxnet_dataloader"]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[189, "module-neural_compressor.data.dataloaders.onnxrt_dataloader"]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[190, "module-neural_compressor.data.dataloaders.pytorch_dataloader"]], "neural_compressor.data.dataloaders.sampler": [[191, "module-neural_compressor.data.dataloaders.sampler"]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[192, "module-neural_compressor.data.dataloaders.tensorflow_dataloader"]], "neural_compressor.data.datasets.bert_dataset": [[193, "module-neural_compressor.data.datasets.bert_dataset"]], "neural_compressor.data.datasets.coco_dataset": [[194, "module-neural_compressor.data.datasets.coco_dataset"]], "neural_compressor.data.datasets.dataset": [[195, "module-neural_compressor.data.datasets.dataset"]], "neural_compressor.data.datasets.dummy_dataset": [[196, "module-neural_compressor.data.datasets.dummy_dataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[197, "module-neural_compressor.data.datasets.dummy_dataset_v2"]], "neural_compressor.data.datasets.imagenet_dataset": [[198, "module-neural_compressor.data.datasets.imagenet_dataset"]], "neural_compressor.data.datasets": [[199, "module-neural_compressor.data.datasets"]], "neural_compressor.data.datasets.style_transfer_dataset": [[200, "module-neural_compressor.data.datasets.style_transfer_dataset"]], "neural_compressor.data.filters.coco_filter": [[201, "module-neural_compressor.data.filters.coco_filter"]], "neural_compressor.data.filters.filter": [[202, "module-neural_compressor.data.filters.filter"]], "neural_compressor.data.filters": [[203, "module-neural_compressor.data.filters"]], "neural_compressor.data": [[204, "module-neural_compressor.data"]], "neural_compressor.data.transforms.coco_transform": [[205, "module-neural_compressor.data.transforms.coco_transform"]], "neural_compressor.data.transforms.imagenet_transform": [[206, "module-neural_compressor.data.transforms.imagenet_transform"]], "neural_compressor.data.transforms": [[207, "module-neural_compressor.data.transforms"]], "neural_compressor.data.transforms.postprocess": [[208, "module-neural_compressor.data.transforms.postprocess"]], "neural_compressor.data.transforms.tokenization": [[209, "module-neural_compressor.data.transforms.tokenization"]], "neural_compressor.data.transforms.transform": [[210, "module-neural_compressor.data.transforms.transform"]], "neural_compressor.experimental.benchmark": [[211, "module-neural_compressor.experimental.benchmark"]], "neural_compressor.experimental.common.criterion": [[212, "module-neural_compressor.experimental.common.criterion"]], "neural_compressor.experimental.common.dataloader": [[213, "module-neural_compressor.experimental.common.dataloader"]], "neural_compressor.experimental.common": [[214, "module-neural_compressor.experimental.common"]], "neural_compressor.experimental.common.metric": [[215, "module-neural_compressor.experimental.common.metric"]], "neural_compressor.experimental.common.model": [[216, "module-neural_compressor.experimental.common.model"]], "neural_compressor.experimental.common.optimizer": [[217, "module-neural_compressor.experimental.common.optimizer"]], "neural_compressor.experimental.common.postprocess": [[218, "module-neural_compressor.experimental.common.postprocess"]], "neural_compressor.experimental.common.torch_utils": [[219, "module-neural_compressor.experimental.common.torch_utils"]], "neural_compressor.experimental.component": [[220, "module-neural_compressor.experimental.component"]], "neural_compressor.experimental.compression": [[221, "module-neural_compressor.experimental.compression"]], "neural_compressor.experimental.compression.pruning": [[222, "module-neural_compressor.experimental.compression.pruning"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[223, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"]], "neural_compressor.experimental.data.dataloaders.dataloader": [[224, "module-neural_compressor.experimental.data.dataloaders.dataloader"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[225, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[226, "module-neural_compressor.experimental.data.dataloaders.fetcher"]], "neural_compressor.experimental.data.dataloaders": [[227, "module-neural_compressor.experimental.data.dataloaders"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[228, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[229, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[230, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"]], "neural_compressor.experimental.data.dataloaders.sampler": [[231, "module-neural_compressor.experimental.data.dataloaders.sampler"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[232, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[233, "module-neural_compressor.experimental.data.datasets.bert_dataset"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[234, "module-neural_compressor.experimental.data.datasets.coco_dataset"]], "neural_compressor.experimental.data.datasets.dataset": [[235, "module-neural_compressor.experimental.data.datasets.dataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[236, "module-neural_compressor.experimental.data.datasets.dummy_dataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[237, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[238, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"]], "neural_compressor.experimental.data.datasets": [[239, "module-neural_compressor.experimental.data.datasets"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[240, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"]], "neural_compressor.experimental.data.filters.coco_filter": [[241, "module-neural_compressor.experimental.data.filters.coco_filter"]], "neural_compressor.experimental.data.filters.filter": [[242, "module-neural_compressor.experimental.data.filters.filter"]], "neural_compressor.experimental.data.filters": [[243, "module-neural_compressor.experimental.data.filters"]], "neural_compressor.experimental.data": [[244, "module-neural_compressor.experimental.data"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[245, "module-neural_compressor.experimental.data.transforms.imagenet_transform"]], "neural_compressor.experimental.data.transforms": [[246, "module-neural_compressor.experimental.data.transforms"]], "neural_compressor.experimental.data.transforms.tokenization": [[247, "module-neural_compressor.experimental.data.transforms.tokenization"]], "neural_compressor.experimental.data.transforms.transform": [[248, "module-neural_compressor.experimental.data.transforms.transform"]], "neural_compressor.experimental.distillation": [[249, "module-neural_compressor.experimental.distillation"]], "neural_compressor.experimental.export": [[250, "module-neural_compressor.experimental.export"]], "neural_compressor.experimental.export.qlinear2qdq": [[251, "module-neural_compressor.experimental.export.qlinear2qdq"]], "neural_compressor.experimental.export.tf2onnx": [[252, "module-neural_compressor.experimental.export.tf2onnx"]], "neural_compressor.experimental.export.torch2onnx": [[253, "module-neural_compressor.experimental.export.torch2onnx"]], "neural_compressor.experimental.export.utils": [[254, "module-neural_compressor.experimental.export.utils"]], "neural_compressor.experimental.graph_optimization": [[255, "module-neural_compressor.experimental.graph_optimization"]], "neural_compressor.experimental": [[256, "module-neural_compressor.experimental"]], "neural_compressor.experimental.metric.bleu": [[257, "module-neural_compressor.experimental.metric.bleu"]], "neural_compressor.experimental.metric.bleu_util": [[258, "module-neural_compressor.experimental.metric.bleu_util"]], "neural_compressor.experimental.metric.coco_label_map": [[259, "module-neural_compressor.experimental.metric.coco_label_map"]], "neural_compressor.experimental.metric.coco_tools": [[260, "module-neural_compressor.experimental.metric.coco_tools"]], "neural_compressor.experimental.metric.evaluate_squad": [[261, "module-neural_compressor.experimental.metric.evaluate_squad"]], "neural_compressor.experimental.metric.f1": [[262, "module-neural_compressor.experimental.metric.f1"]], "neural_compressor.experimental.metric": [[263, "module-neural_compressor.experimental.metric"]], "neural_compressor.experimental.metric.metric": [[264, "module-neural_compressor.experimental.metric.metric"]], "neural_compressor.experimental.mixed_precision": [[265, "module-neural_compressor.experimental.mixed_precision"]], "neural_compressor.experimental.model_conversion": [[266, "module-neural_compressor.experimental.model_conversion"]], "neural_compressor.experimental.nas.basic_nas": [[267, "module-neural_compressor.experimental.nas.basic_nas"]], "neural_compressor.experimental.nas.dynas": [[268, "module-neural_compressor.experimental.nas.dynas"]], "neural_compressor.experimental.nas": [[269, "module-neural_compressor.experimental.nas"]], "neural_compressor.experimental.nas.nas": [[270, "module-neural_compressor.experimental.nas.nas"]], "neural_compressor.experimental.nas.nas_utils": [[271, "module-neural_compressor.experimental.nas.nas_utils"]], "neural_compressor.experimental.nas.search_algorithms": [[272, "module-neural_compressor.experimental.nas.search_algorithms"]], "neural_compressor.experimental.pruner_legacy.gradient_sensitivity": [[273, "module-neural_compressor.experimental.pruner_legacy.gradient_sensitivity"]], "neural_compressor.experimental.pruner_legacy.group_lasso": [[274, "module-neural_compressor.experimental.pruner_legacy.group_lasso"]], "neural_compressor.experimental.pruner_legacy": [[275, "module-neural_compressor.experimental.pruner_legacy"]], "neural_compressor.experimental.pruner_legacy.magnitude": [[276, "module-neural_compressor.experimental.pruner_legacy.magnitude"]], "neural_compressor.experimental.pruner_legacy.pattern_lock": [[277, "module-neural_compressor.experimental.pruner_legacy.pattern_lock"]], "neural_compressor.experimental.pruner_legacy.pruner": [[278, "module-neural_compressor.experimental.pruner_legacy.pruner"]], "neural_compressor.experimental.pruning": [[279, "module-neural_compressor.experimental.pruning"]], "neural_compressor.experimental.pruning_recipes": [[280, "module-neural_compressor.experimental.pruning_recipes"]], "neural_compressor.experimental.pruning_recipes.patterns": [[281, "module-neural_compressor.experimental.pruning_recipes.patterns"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[282, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[283, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"]], "neural_compressor.experimental.pruning_v2": [[284, "module-neural_compressor.experimental.pruning_v2"]], "neural_compressor.experimental.pytorch_pruner": [[285, "module-neural_compressor.experimental.pytorch_pruner"]], "neural_compressor.experimental.pytorch_pruner.logger": [[286, "module-neural_compressor.experimental.pytorch_pruner.logger"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[287, "module-neural_compressor.experimental.pytorch_pruner.patterns"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[288, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[289, "module-neural_compressor.experimental.pytorch_pruner.pruner"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[290, "module-neural_compressor.experimental.pytorch_pruner.pruning"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[291, "module-neural_compressor.experimental.pytorch_pruner.scheduler"]], "neural_compressor.experimental.quantization": [[292, "module-neural_compressor.experimental.quantization"]], "neural_compressor.experimental.scheduler": [[293, "module-neural_compressor.experimental.scheduler"]], "neural_compressor": [[294, "module-neural_compressor"]], "neural_compressor.metric.bleu": [[295, "module-neural_compressor.metric.bleu"]], "neural_compressor.metric.bleu_util": [[296, "module-neural_compressor.metric.bleu_util"]], "neural_compressor.metric.coco_label_map": [[297, "module-neural_compressor.metric.coco_label_map"]], "neural_compressor.metric.coco_tools": [[298, "module-neural_compressor.metric.coco_tools"]], "neural_compressor.metric.evaluate_squad": [[299, "module-neural_compressor.metric.evaluate_squad"]], "neural_compressor.metric.f1": [[300, "module-neural_compressor.metric.f1"]], "neural_compressor.metric": [[301, "module-neural_compressor.metric"]], "neural_compressor.metric.metric": [[302, "module-neural_compressor.metric.metric"]], "neural_compressor.mix_precision": [[303, "module-neural_compressor.mix_precision"]], "neural_compressor.model.base_model": [[304, "module-neural_compressor.model.base_model"]], "neural_compressor.model": [[305, "module-neural_compressor.model"]], "neural_compressor.model.keras_model": [[306, "module-neural_compressor.model.keras_model"]], "neural_compressor.model.model": [[307, "module-neural_compressor.model.model"]], "neural_compressor.model.mxnet_model": [[308, "module-neural_compressor.model.mxnet_model"]], "neural_compressor.model.nets_factory": [[309, "module-neural_compressor.model.nets_factory"]], "neural_compressor.model.onnx_model": [[310, "module-neural_compressor.model.onnx_model"]], "neural_compressor.model.tensorflow_model": [[311, "module-neural_compressor.model.tensorflow_model"]], "neural_compressor.model.torch_model": [[312, "module-neural_compressor.model.torch_model"]], "neural_compressor.objective": [[313, "module-neural_compressor.objective"]], "neural_compressor.quantization": [[314, "module-neural_compressor.quantization"]], "neural_compressor.strategy.auto": [[315, "module-neural_compressor.strategy.auto"]], "neural_compressor.strategy.auto_mixed_precision": [[316, "module-neural_compressor.strategy.auto_mixed_precision"]], "neural_compressor.strategy.basic": [[317, "module-neural_compressor.strategy.basic"]], "neural_compressor.strategy.bayesian": [[318, "module-neural_compressor.strategy.bayesian"]], "neural_compressor.strategy.conservative": [[319, "module-neural_compressor.strategy.conservative"]], "neural_compressor.strategy.exhaustive": [[320, "module-neural_compressor.strategy.exhaustive"]], "neural_compressor.strategy.hawq_v2": [[321, "module-neural_compressor.strategy.hawq_v2"]], "neural_compressor.strategy": [[322, "module-neural_compressor.strategy"]], "neural_compressor.strategy.mse": [[323, "module-neural_compressor.strategy.mse"]], "neural_compressor.strategy.mse_v2": [[324, "module-neural_compressor.strategy.mse_v2"]], "neural_compressor.strategy.random": [[325, "module-neural_compressor.strategy.random"]], "neural_compressor.strategy.strategy": [[326, "module-neural_compressor.strategy.strategy"]], "neural_compressor.strategy.utils.constant": [[327, "module-neural_compressor.strategy.utils.constant"]], "neural_compressor.strategy.utils": [[328, "module-neural_compressor.strategy.utils"]], "neural_compressor.strategy.utils.tuning_sampler": [[329, "module-neural_compressor.strategy.utils.tuning_sampler"]], "neural_compressor.strategy.utils.tuning_space": [[330, "module-neural_compressor.strategy.utils.tuning_space"]], "neural_compressor.strategy.utils.tuning_structs": [[331, "module-neural_compressor.strategy.utils.tuning_structs"]], "neural_compressor.strategy.utils.utility": [[332, "module-neural_compressor.strategy.utils.utility"]], "neural_compressor.template.api_doc_example": [[333, "module-neural_compressor.template.api_doc_example"]], "neural_compressor.template": [[334, "module-neural_compressor.template"]], "neural_compressor.training": [[335, "module-neural_compressor.training"]], "neural_compressor.utils.collect_layer_histogram": [[336, "module-neural_compressor.utils.collect_layer_histogram"]], "neural_compressor.utils.constant": [[337, "module-neural_compressor.utils.constant"]], "neural_compressor.utils.create_obj_from_config": [[338, "module-neural_compressor.utils.create_obj_from_config"]], "neural_compressor.utils": [[339, "module-neural_compressor.utils"]], "neural_compressor.utils.kl_divergence": [[340, "module-neural_compressor.utils.kl_divergence"]], "neural_compressor.utils.load_huggingface": [[341, "module-neural_compressor.utils.load_huggingface"]], "neural_compressor.utils.logger": [[342, "module-neural_compressor.utils.logger"]], "neural_compressor.utils.options": [[343, "module-neural_compressor.utils.options"]], "neural_compressor.utils.pytorch": [[344, "module-neural_compressor.utils.pytorch"]], "neural_compressor.utils.utility": [[345, "module-neural_compressor.utils.utility"]], "neural_compressor.ux.components.benchmark.benchmark": [[346, "module-neural_compressor.ux.components.benchmark.benchmark"]], "neural_compressor.ux.components.benchmark.benchmark_model": [[347, "module-neural_compressor.ux.components.benchmark.benchmark_model"]], "neural_compressor.ux.components.benchmark.execute_benchmark": [[348, "module-neural_compressor.ux.components.benchmark.execute_benchmark"]], "neural_compressor.ux.components.benchmark": [[349, "module-neural_compressor.ux.components.benchmark"]], "neural_compressor.ux.components.config_generator.benchmark_config_generator": [[350, "module-neural_compressor.ux.components.config_generator.benchmark_config_generator"]], "neural_compressor.ux.components.config_generator.config_generator": [[351, "module-neural_compressor.ux.components.config_generator.config_generator"]], "neural_compressor.ux.components.config_generator.graph_optimization_config_generator": [[352, "module-neural_compressor.ux.components.config_generator.graph_optimization_config_generator"]], "neural_compressor.ux.components.config_generator": [[353, "module-neural_compressor.ux.components.config_generator"]], "neural_compressor.ux.components.config_generator.mixed_precision_config_generator": [[354, "module-neural_compressor.ux.components.config_generator.mixed_precision_config_generator"]], "neural_compressor.ux.components.config_generator.profiling_config_generator": [[355, "module-neural_compressor.ux.components.config_generator.profiling_config_generator"]], "neural_compressor.ux.components.config_generator.pruning_config_generator": [[356, "module-neural_compressor.ux.components.config_generator.pruning_config_generator"]], "neural_compressor.ux.components.config_generator.quantization_config_generator": [[357, "module-neural_compressor.ux.components.config_generator.quantization_config_generator"]], "neural_compressor.ux.components.configuration_wizard.configuration_parser": [[358, "module-neural_compressor.ux.components.configuration_wizard.configuration_parser"]], "neural_compressor.ux.components.configuration_wizard.get_boundary_nodes": [[359, "module-neural_compressor.ux.components.configuration_wizard.get_boundary_nodes"]], "neural_compressor.ux.components.configuration_wizard.get_configuration": [[360, "module-neural_compressor.ux.components.configuration_wizard.get_configuration"]], "neural_compressor.ux.components.configuration_wizard": [[361, "module-neural_compressor.ux.components.configuration_wizard"]], "neural_compressor.ux.components.configuration_wizard.params_feeder": [[362, "module-neural_compressor.ux.components.configuration_wizard.params_feeder"]], "neural_compressor.ux.components.configuration_wizard.pruning_config_parser": [[363, "module-neural_compressor.ux.components.configuration_wizard.pruning_config_parser"]], "neural_compressor.ux.components.db_manager.db_manager": [[364, "module-neural_compressor.ux.components.db_manager.db_manager"]], "neural_compressor.ux.components.db_manager.db_models.benchmark": [[365, "module-neural_compressor.ux.components.db_manager.db_models.benchmark"]], "neural_compressor.ux.components.db_manager.db_models.benchmark_result": [[366, "module-neural_compressor.ux.components.db_manager.db_models.benchmark_result"]], "neural_compressor.ux.components.db_manager.db_models.dataloader": [[367, "module-neural_compressor.ux.components.db_manager.db_models.dataloader"]], "neural_compressor.ux.components.db_manager.db_models.dataset": [[368, "module-neural_compressor.ux.components.db_manager.db_models.dataset"]], "neural_compressor.ux.components.db_manager.db_models.domain": [[369, "module-neural_compressor.ux.components.db_manager.db_models.domain"]], "neural_compressor.ux.components.db_manager.db_models.domain_flavour": [[370, "module-neural_compressor.ux.components.db_manager.db_models.domain_flavour"]], "neural_compressor.ux.components.db_manager.db_models.example": [[371, "module-neural_compressor.ux.components.db_manager.db_models.example"]], "neural_compressor.ux.components.db_manager.db_models.framework": [[372, "module-neural_compressor.ux.components.db_manager.db_models.framework"]], "neural_compressor.ux.components.db_manager.db_models": [[373, "module-neural_compressor.ux.components.db_manager.db_models"]], "neural_compressor.ux.components.db_manager.db_models.metric": [[374, "module-neural_compressor.ux.components.db_manager.db_models.metric"]], "neural_compressor.ux.components.db_manager.db_models.model": [[375, "module-neural_compressor.ux.components.db_manager.db_models.model"]], "neural_compressor.ux.components.db_manager.db_models.optimization": [[376, "module-neural_compressor.ux.components.db_manager.db_models.optimization"]], "neural_compressor.ux.components.db_manager.db_models.optimization_type": [[377, "module-neural_compressor.ux.components.db_manager.db_models.optimization_type"]], "neural_compressor.ux.components.db_manager.db_models.precision": [[378, "module-neural_compressor.ux.components.db_manager.db_models.precision"]], "neural_compressor.ux.components.db_manager.db_models.profiling": [[379, "module-neural_compressor.ux.components.db_manager.db_models.profiling"]], "neural_compressor.ux.components.db_manager.db_models.profiling_result": [[380, "module-neural_compressor.ux.components.db_manager.db_models.profiling_result"]], "neural_compressor.ux.components.db_manager.db_models.project": [[381, "module-neural_compressor.ux.components.db_manager.db_models.project"]], "neural_compressor.ux.components.db_manager.db_models.pruning_details": [[382, "module-neural_compressor.ux.components.db_manager.db_models.pruning_details"]], "neural_compressor.ux.components.db_manager.db_models.transform": [[383, "module-neural_compressor.ux.components.db_manager.db_models.transform"]], "neural_compressor.ux.components.db_manager.db_models.tuning_details": [[384, "module-neural_compressor.ux.components.db_manager.db_models.tuning_details"]], "neural_compressor.ux.components.db_manager.db_models.tuning_history": [[385, "module-neural_compressor.ux.components.db_manager.db_models.tuning_history"]], "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface": [[386, "module-neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface": [[387, "module-neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.db_operations": [[388, "module-neural_compressor.ux.components.db_manager.db_operations.db_operations"]], "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface": [[389, "module-neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface": [[390, "module-neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.examples_api_interface": [[391, "module-neural_compressor.ux.components.db_manager.db_operations.examples_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations": [[392, "module-neural_compressor.ux.components.db_manager.db_operations"]], "neural_compressor.ux.components.db_manager.db_operations.model_api_interface": [[393, "module-neural_compressor.ux.components.db_manager.db_operations.model_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface": [[394, "module-neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface": [[395, "module-neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.project_api_interface": [[396, "module-neural_compressor.ux.components.db_manager.db_operations.project_api_interface"]], "neural_compressor.ux.components.db_manager": [[397, "module-neural_compressor.ux.components.db_manager"]], "neural_compressor.ux.components.db_manager.params_interfaces": [[398, "module-neural_compressor.ux.components.db_manager.params_interfaces"]], "neural_compressor.ux.components.db_manager.utils": [[399, "module-neural_compressor.ux.components.db_manager.utils"]], "neural_compressor.ux.components.diagnosis.diagnosis": [[400, "module-neural_compressor.ux.components.diagnosis.diagnosis"]], "neural_compressor.ux.components.diagnosis.factory": [[401, "module-neural_compressor.ux.components.diagnosis.factory"]], "neural_compressor.ux.components.diagnosis": [[402, "module-neural_compressor.ux.components.diagnosis"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis": [[403, "module-neural_compressor.ux.components.diagnosis.onnx_diagnosis"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis": [[404, "module-neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis"]], "neural_compressor.ux.components.diagnosis.op_details": [[405, "module-neural_compressor.ux.components.diagnosis.op_details"]], "neural_compressor.ux.components.diagnosis.op_entry": [[406, "module-neural_compressor.ux.components.diagnosis.op_entry"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis": [[407, "module-neural_compressor.ux.components.diagnosis.tensorflow_diagnosis"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis": [[408, "module-neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis"]], "neural_compressor.ux.components.file_browser.file_browser": [[409, "module-neural_compressor.ux.components.file_browser.file_browser"]], "neural_compressor.ux.components.file_browser": [[410, "module-neural_compressor.ux.components.file_browser"]], "neural_compressor.ux.components.graph.attribute": [[411, "module-neural_compressor.ux.components.graph.attribute"]], "neural_compressor.ux.components.graph.collapser": [[412, "module-neural_compressor.ux.components.graph.collapser"]], "neural_compressor.ux.components.graph.edge": [[413, "module-neural_compressor.ux.components.graph.edge"]], "neural_compressor.ux.components.graph.graph": [[414, "module-neural_compressor.ux.components.graph.graph"]], "neural_compressor.ux.components.graph.graph_reader": [[415, "module-neural_compressor.ux.components.graph.graph_reader"]], "neural_compressor.ux.components.graph": [[416, "module-neural_compressor.ux.components.graph"]], "neural_compressor.ux.components.graph.node": [[417, "module-neural_compressor.ux.components.graph.node"]], "neural_compressor.ux.components.graph.reader": [[418, "module-neural_compressor.ux.components.graph.reader"]], "neural_compressor.ux.components.graph.reader.onnxrt_reader": [[419, "module-neural_compressor.ux.components.graph.reader.onnxrt_reader"]], "neural_compressor.ux.components.graph.reader.tensorflow_reader": [[420, "module-neural_compressor.ux.components.graph.reader.tensorflow_reader"]], "neural_compressor.ux.components": [[421, "module-neural_compressor.ux.components"]], "neural_compressor.ux.components.jobs_management": [[422, "module-neural_compressor.ux.components.jobs_management"]], "neural_compressor.ux.components.jobs_management.jobs_control_queue": [[423, "module-neural_compressor.ux.components.jobs_management.jobs_control_queue"]], "neural_compressor.ux.components.jobs_management.jobs_manager": [[424, "module-neural_compressor.ux.components.jobs_management.jobs_manager"]], "neural_compressor.ux.components.jobs_management.request": [[425, "module-neural_compressor.ux.components.jobs_management.request"]], "neural_compressor.ux.components.manage_workspace": [[426, "module-neural_compressor.ux.components.manage_workspace"]], "neural_compressor.ux.components.model.domain": [[427, "module-neural_compressor.ux.components.model.domain"]], "neural_compressor.ux.components.model": [[428, "module-neural_compressor.ux.components.model"]], "neural_compressor.ux.components.model.model": [[429, "module-neural_compressor.ux.components.model.model"]], "neural_compressor.ux.components.model.model_type_getter": [[430, "module-neural_compressor.ux.components.model.model_type_getter"]], "neural_compressor.ux.components.model.onnxrt": [[431, "module-neural_compressor.ux.components.model.onnxrt"]], "neural_compressor.ux.components.model.onnxrt.model": [[432, "module-neural_compressor.ux.components.model.onnxrt.model"]], "neural_compressor.ux.components.model.pytorch": [[433, "module-neural_compressor.ux.components.model.pytorch"]], "neural_compressor.ux.components.model.pytorch.model": [[434, "module-neural_compressor.ux.components.model.pytorch.model"]], "neural_compressor.ux.components.model.repository": [[435, "module-neural_compressor.ux.components.model.repository"]], "neural_compressor.ux.components.model.shape": [[436, "module-neural_compressor.ux.components.model.shape"]], "neural_compressor.ux.components.model.tensorflow.frozen_pb": [[437, "module-neural_compressor.ux.components.model.tensorflow.frozen_pb"]], "neural_compressor.ux.components.model.tensorflow": [[438, "module-neural_compressor.ux.components.model.tensorflow"]], "neural_compressor.ux.components.model.tensorflow.keras": [[439, "module-neural_compressor.ux.components.model.tensorflow.keras"]], "neural_compressor.ux.components.model.tensorflow.meta_graph": [[440, "module-neural_compressor.ux.components.model.tensorflow.meta_graph"]], "neural_compressor.ux.components.model.tensorflow.model": [[441, "module-neural_compressor.ux.components.model.tensorflow.model"]], "neural_compressor.ux.components.model.tensorflow.saved_model": [[442, "module-neural_compressor.ux.components.model.tensorflow.saved_model"]], "neural_compressor.ux.components.model.tensorflow.utils": [[443, "module-neural_compressor.ux.components.model.tensorflow.utils"]], "neural_compressor.ux.components.model_zoo.download_config": [[444, "module-neural_compressor.ux.components.model_zoo.download_config"]], "neural_compressor.ux.components.model_zoo.download_model": [[445, "module-neural_compressor.ux.components.model_zoo.download_model"]], "neural_compressor.ux.components.model_zoo.downloader": [[446, "module-neural_compressor.ux.components.model_zoo.downloader"]], "neural_compressor.ux.components.model_zoo": [[447, "module-neural_compressor.ux.components.model_zoo"]], "neural_compressor.ux.components.model_zoo.list_models": [[448, "module-neural_compressor.ux.components.model_zoo.list_models"]], "neural_compressor.ux.components.names_mapper": [[449, "module-neural_compressor.ux.components.names_mapper"]], "neural_compressor.ux.components.names_mapper.names_mapper": [[450, "module-neural_compressor.ux.components.names_mapper.names_mapper"]], "neural_compressor.ux.components.optimization.execute_optimization": [[451, "module-neural_compressor.ux.components.optimization.execute_optimization"]], "neural_compressor.ux.components.optimization.factory": [[452, "module-neural_compressor.ux.components.optimization.factory"]], "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization": [[453, "module-neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization"]], "neural_compressor.ux.components.optimization.graph_optimizer": [[454, "module-neural_compressor.ux.components.optimization.graph_optimizer"]], "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model": [[455, "module-neural_compressor.ux.components.optimization.graph_optimizer.optimize_model"]], "neural_compressor.ux.components.optimization": [[456, "module-neural_compressor.ux.components.optimization"]], "neural_compressor.ux.components.optimization.mixed_precision": [[457, "module-neural_compressor.ux.components.optimization.mixed_precision"]], "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision": [[458, "module-neural_compressor.ux.components.optimization.mixed_precision.mixed_precision"]], "neural_compressor.ux.components.optimization.mixed_precision.optimize_model": [[459, "module-neural_compressor.ux.components.optimization.mixed_precision.optimize_model"]], "neural_compressor.ux.components.optimization.neural_coder_optimization": [[460, "module-neural_compressor.ux.components.optimization.neural_coder_optimization"]], "neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model": [[461, "module-neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model"]], "neural_compressor.ux.components.optimization.optimization": [[462, "module-neural_compressor.ux.components.optimization.optimization"]], "neural_compressor.ux.components.optimization.pruning": [[463, "module-neural_compressor.ux.components.optimization.pruning"]], "neural_compressor.ux.components.optimization.pruning.optimize_model": [[464, "module-neural_compressor.ux.components.optimization.pruning.optimize_model"]], "neural_compressor.ux.components.optimization.pruning.pruning": [[465, "module-neural_compressor.ux.components.optimization.pruning.pruning"]], "neural_compressor.ux.components.optimization.tune": [[466, "module-neural_compressor.ux.components.optimization.tune"]], "neural_compressor.ux.components.optimization.tune.tune_model": [[467, "module-neural_compressor.ux.components.optimization.tune.tune_model"]], "neural_compressor.ux.components.optimization.tune.tuning": [[468, "module-neural_compressor.ux.components.optimization.tune.tuning"]], "neural_compressor.ux.components.optimization.tuning_history": [[469, "module-neural_compressor.ux.components.optimization.tuning_history"]], "neural_compressor.ux.components.profiling.execute_profiling": [[470, "module-neural_compressor.ux.components.profiling.execute_profiling"]], "neural_compressor.ux.components.profiling.factory": [[471, "module-neural_compressor.ux.components.profiling.factory"]], "neural_compressor.ux.components.profiling": [[472, "module-neural_compressor.ux.components.profiling"]], "neural_compressor.ux.components.profiling.profile_model": [[473, "module-neural_compressor.ux.components.profiling.profile_model"]], "neural_compressor.ux.components.profiling.profiler": [[474, "module-neural_compressor.ux.components.profiling.profiler"]], "neural_compressor.ux.components.profiling.profiling": [[475, "module-neural_compressor.ux.components.profiling.profiling"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.factory": [[476, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.factory"]], "neural_compressor.ux.components.profiling.tensorflow_profiler": [[477, "module-neural_compressor.ux.components.profiling.tensorflow_profiler"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler": [[478, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.profiler"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.utils": [[479, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.utils"]], "neural_compressor.ux.inc_bench": [[480, "module-neural_compressor.ux.inc_bench"]], "neural_compressor.ux": [[481, "module-neural_compressor.ux"]], "neural_compressor.ux.utils.consts": [[482, "module-neural_compressor.ux.utils.consts"]], "neural_compressor.ux.utils.environment": [[483, "module-neural_compressor.ux.utils.environment"]], "neural_compressor.ux.utils.exceptions": [[484, "module-neural_compressor.ux.utils.exceptions"]], "neural_compressor.ux.utils.executor": [[485, "module-neural_compressor.ux.utils.executor"]], "neural_compressor.ux.utils.expiring_dict": [[486, "module-neural_compressor.ux.utils.expiring_dict"]], "neural_compressor.ux.utils.github_info": [[487, "module-neural_compressor.ux.utils.github_info"]], "neural_compressor.ux.utils.hw_info": [[488, "module-neural_compressor.ux.utils.hw_info"]], "neural_compressor.ux.utils": [[489, "module-neural_compressor.ux.utils"]], "neural_compressor.ux.utils.json_serializer": [[490, "module-neural_compressor.ux.utils.json_serializer"]], "neural_compressor.ux.utils.logger": [[491, "module-neural_compressor.ux.utils.logger"]], "neural_compressor.ux.utils.parser": [[492, "module-neural_compressor.ux.utils.parser"]], "neural_compressor.ux.utils.proc": [[493, "module-neural_compressor.ux.utils.proc"]], "neural_compressor.ux.utils.processes": [[494, "module-neural_compressor.ux.utils.processes"]], "neural_compressor.ux.utils.singleton": [[495, "module-neural_compressor.ux.utils.singleton"]], "neural_compressor.ux.utils.status_updates": [[496, "module-neural_compressor.ux.utils.status_updates"]], "neural_compressor.ux.utils.templates": [[497, "module-neural_compressor.ux.utils.templates"]], "neural_compressor.ux.utils.templates.metric": [[498, "module-neural_compressor.ux.utils.templates.metric"]], "neural_compressor.ux.utils.templates.workdir": [[499, "module-neural_compressor.ux.utils.templates.workdir"]], "neural_compressor.ux.utils.utils": [[500, "module-neural_compressor.ux.utils.utils"]], "neural_compressor.ux.utils.workload.config": [[501, "module-neural_compressor.ux.utils.workload.config"]], "neural_compressor.ux.utils.workload.dataloader": [[502, "module-neural_compressor.ux.utils.workload.dataloader"]], "neural_compressor.ux.utils.workload.evaluation": [[503, "module-neural_compressor.ux.utils.workload.evaluation"]], "neural_compressor.ux.utils.workload.graph_optimization": [[504, "module-neural_compressor.ux.utils.workload.graph_optimization"]], "neural_compressor.ux.utils.workload": [[505, "module-neural_compressor.ux.utils.workload"]], "neural_compressor.ux.utils.workload.mixed_precision": [[506, "module-neural_compressor.ux.utils.workload.mixed_precision"]], "neural_compressor.ux.utils.workload.model": [[507, "module-neural_compressor.ux.utils.workload.model"]], "neural_compressor.ux.utils.workload.pruning": [[508, "module-neural_compressor.ux.utils.workload.pruning"]], "neural_compressor.ux.utils.workload.quantization": [[509, "module-neural_compressor.ux.utils.workload.quantization"]], "neural_compressor.ux.utils.workload.tuning": [[510, "module-neural_compressor.ux.utils.workload.tuning"]], "neural_compressor.ux.utils.yaml_utils": [[511, "module-neural_compressor.ux.utils.yaml_utils"]], "neural_compressor.ux.web.communication": [[512, "module-neural_compressor.ux.web.communication"]], "neural_compressor.ux.web.configuration": [[513, "module-neural_compressor.ux.web.configuration"]], "neural_compressor.ux.web.exceptions": [[514, "module-neural_compressor.ux.web.exceptions"]], "neural_compressor.ux.web": [[515, "module-neural_compressor.ux.web"]], "neural_compressor.ux.web.router": [[516, "module-neural_compressor.ux.web.router"]], "neural_compressor.ux.web.server": [[517, "module-neural_compressor.ux.web.server"]], "neural_compressor.ux.web.service.benchmark": [[518, "module-neural_compressor.ux.web.service.benchmark"]], "neural_compressor.ux.web.service.history_snapshot_parser": [[519, "module-neural_compressor.ux.web.service.history_snapshot_parser"]], "neural_compressor.ux.web.service": [[520, "module-neural_compressor.ux.web.service"]], "neural_compressor.ux.web.service.model": [[521, "module-neural_compressor.ux.web.service.model"]], "neural_compressor.ux.web.service.optimization": [[522, "module-neural_compressor.ux.web.service.optimization"]], "neural_compressor.ux.web.service.profiling": [[523, "module-neural_compressor.ux.web.service.profiling"]], "neural_compressor.ux.web.service.request_data_processor": [[524, "module-neural_compressor.ux.web.service.request_data_processor"]], "neural_compressor.ux.web.service.response_generator": [[525, "module-neural_compressor.ux.web.service.response_generator"]], "neural_compressor.ux.web.service.workload": [[526, "module-neural_compressor.ux.web.service.workload"]], "neural_compressor.version": [[527, "module-neural_compressor.version"]], "Intel\u00ae Neural Compressor Documentation": [[528, "intel-neural-compressor-documentation"], [607, "intel-neural-compressor-documentation"]], "Sections": [[528, "sections"], [607, "sections"]], "Contributor Covenant Code of Conduct": [[529, "contributor-covenant-code-of-conduct"], [530, "contributor-covenant-code-of-conduct"]], "Our Pledge": [[529, "our-pledge"]], "Our Standards": [[529, "our-standards"]], "Our Responsibilities": [[529, "our-responsibilities"]], "Scope": [[529, "scope"]], "Enforcement": [[529, "enforcement"]], "Attribution": [[529, "attribution"]], "Contribution Guidelines": [[530, "contribution-guidelines"]], "Pull Request Checklist": [[530, "pull-request-checklist"]], "Pull Request Template": [[530, "pull-request-template"]], "Support": [[530, "support"]], "FX": [[531, "fx"]], "Introduction": [[531, "introduction"], [532, "introduction"], [535, "introduction"], [550, "introduction"], [551, "introduction"], [552, "introduction"], [553, "introduction"], [555, "introduction"], [556, "introduction"], [557, "introduction"], [559, "introduction"], [561, "introduction"], [564, "introduction"], [567, "introduction"], [569, "introduction"], [570, "introduction"], [590, "introduction"], [591, "introduction"], [593, "introduction"], [595, "introduction"], [599, "introduction"], [600, "introduction"], [601, "introduction"], [602, "introduction"], [603, "introduction"], [605, "introduction"]], "FX Mode Support Matrix in Neural Compressor": [[531, "fx-mode-support-matrix-in-neural-compressor"]], "Get Start": [[531, "get-start"]], "Post Training Static Quantization": [[531, "post-training-static-quantization"], [596, "post-training-static-quantization"]], "Post Training Dynamic Quantization": [[531, "post-training-dynamic-quantization"], [596, "post-training-dynamic-quantization"]], "Quantization-Aware Training": [[531, "quantization-aware-training"]], "Examples": [[531, "examples"], [532, "examples"], [551, "examples"], [552, "examples"], [553, "examples"], [555, "examples"], [556, "examples"], [557, "examples"], [558, "examples"], [559, "examples"], [568, "examples"], [569, "examples"], [570, "examples"], [591, "examples"], [593, "examples"], [596, "examples"], [601, "examples"]], "Note": [[531, "note"]], "Details": [[531, "details"]], "Common Problem": [[531, "common-problem"]], "Dynamic Quantization": [[531, "dynamic-quantization"]], "Static Quantization & Quantization Aware Training": [[531, "static-quantization-quantization-aware-training"]], "Neural Architecture Search": [[532, "neural-architecture-search"]], "Basic NAS": [[532, "basic-nas"]], "Dynamic NAS": [[532, "dynamic-nas"]], "NAS Support Matrix": [[532, "nas-support-matrix"]], "Get Started with NAS API": [[532, "get-started-with-nas-api"]], "Basic Usage": [[532, "basic-usage"]], "1. Python code + YAML": [[532, "python-code-yaml"]], "2. Python code only": [[532, "python-code-only"]], "Advanced Usage (Custom NAS)": [[532, "advanced-usage-custom-nas"]], "Security Policy": [[533, "security-policy"]], "Report a Vulnerability": [[533, "report-a-vulnerability"]], "Intel\u00ae Neural Compressor": [[534, "intel-neural-compressor"], [588, "intel-neural-compressor"]], "Installation": [[534, "installation"], [565, "installation"], [582, "installation"]], "Install from pypi": [[534, "install-from-pypi"]], "Getting Started": [[534, "getting-started"], [562, "getting-started"]], "Quantization with Python API": [[534, "quantization-with-python-api"], [562, "quantization-with-python-api"]], "Documentation": [[534, "documentation"]], "Selected Publications/Events": [[534, "selected-publications-events"]], "Additional Content": [[534, "additional-content"]], "Research Collaborations": [[534, "research-collaborations"]], "Adaptor": [[535, "adaptor"], [536, "adaptor"]], "Adaptor Support Matrix": [[535, "adaptor-support-matrix"]], "Working Flow": [[535, "working-flow"], [596, "working-flow"]], "Get Start with Adaptor API": [[535, "get-start-with-adaptor-api"]], "Query API": [[535, "query-api"]], "Background": [[535, "background"]], "Query API Introduction": [[535, "query-api-introduction"]], "Example of Adding a New Backend Support": [[535, "example-of-adding-a-new-backend-support"]], "Capability": [[535, "capability"]], "Implement ONNXRTAdaptor Class": [[535, "implement-onnxrtadaptor-class"]], "ONNX Runtime": [[537, "onnx-runtime"], [569, "onnx-runtime"], [569, "id1"]], "Torch Utils": [[538, "torch-utils"]], "API Document Example": [[539, "api-document-example"]], "APIs": [[540, "apis"]], "Benchmark": [[541, "benchmark"], [568, "benchmark"], [595, "benchmark"]], "Compression": [[542, "compression"]], "Config": [[543, "config"]], "Mix Precision": [[544, "mix-precision"], [568, "mix-precision"]], "Model": [[545, "model"], [570, "model"]], "Objective": [[546, "objective"], [590, "objective"]], "Quantization": [[547, "quantization"], [595, "quantization"], [596, "quantization"]], "Strategy": [[548, "strategy"]], "Training": [[549, "training"]], "Intel\u00ae Neural Compressor Bench": [[550, "intel-neural-compressor-bench"]], "Table of Contents": [[550, "table-of-contents"]], "Install Intel\u00ae Neural Compressor with Bench": [[550, "install-intel-neural-compressor-with-bench"]], "Option 1: Install from Binary": [[550, "option-1-install-from-binary"]], "Option 2: Install from Source": [[550, "option-2-install-from-source"]], "Start the Intel\u00ae Neural Compressor Bench": [[550, "start-the-intel-neural-compressor-bench"]], "Home Screen": [[550, "home-screen"]], "Create New Project": [[550, "create-new-project"]], "Predefined Model": [[550, "predefined-model"]], "Custom Model": [[550, "custom-model"]], "Display Model Graph": [[550, "display-model-graph"]], "Project List": [[550, "project-list"]], "Remove Project": [[550, "remove-project"]], "Develop Project": [[550, "develop-project"]], "Optimization Tab": [[550, "optimization-tab"]], "Optimization Table": [[550, "optimization-table"]], "Optimization Wizard": [[550, "optimization-wizard"]], "Editing Optimization Entries": [[550, "editing-optimization-entries"]], "Optimization Details": [[550, "optimization-details"]], "Pruning": [[550, "pruning"], [568, "pruning"], [593, "pruning"], [595, "pruning"]], "Benchmark Tab": [[550, "benchmark-tab"]], "Benchmark Table": [[550, "benchmark-table"]], "Benchmark Wizard": [[550, "benchmark-wizard"]], "Editing Benchmark Entries": [[550, "editing-benchmark-entries"]], "Benchmark Details": [[550, "benchmark-details"]], "Profiling Tab": [[550, "profiling-tab"]], "Profiling Table": [[550, "profiling-table"]], "Profiling Wizard": [[550, "profiling-wizard"]], "Editing Profiling Entries": [[550, "editing-profiling-entries"]], "Profiling Details": [[550, "profiling-details"]], "Diagnosis Tab": [[550, "diagnosis-tab"]], "Dataset Tab": [[550, "dataset-tab"]], "Dataset List": [[550, "dataset-list"]], "Dataset Wizard": [[550, "dataset-wizard"]], "Dataset Details": [[550, "dataset-details"]], "Custom Dataset": [[550, "custom-dataset"]], "Project Information": [[550, "project-information"]], "NAS demo": [[550, "nas-demo"]], "System Information": [[550, "system-information"]], "Security": [[550, "security"], [557, "security"]], "Benchmarking": [[551, "benchmarking"]], "Benchmark Support Matrix": [[551, "benchmark-support-matrix"]], "Get Started with Benchmark API": [[551, "get-started-with-benchmark-api"]], "DataLoader": [[552, "dataloader"]], "Supported Framework Dataloader Matrix": [[552, "supported-framework-dataloader-matrix"]], "Get Start with Dataloader API": [[552, "get-start-with-dataloader-api"]], "Config Dataloader in a Yaml File": [[552, "config-dataloader-in-a-yaml-file"]], "Create a User-specific Dataloader": [[552, "create-a-user-specific-dataloader"]], "Dataset": [[553, "dataset"]], "Supported Framework Dataset Matrix": [[553, "supported-framework-dataset-matrix"]], "TensorFlow": [[553, "tensorflow"], [567, "tensorflow"], [569, "tensorflow"], [602, "tensorflow"]], "PyTorch": [[553, "pytorch"], [567, "pytorch"], [569, "pytorch"], [597, "pytorch"]], "MXNet": [[553, "mxnet"], [567, "mxnet"], [602, "mxnet"]], "ONNXRT": [[553, "onnxrt"], [567, "onnxrt"], [602, "onnxrt"]], "Get start with Dataset API": [[553, "get-start-with-dataset-api"]], "Config dataloader in a yaml file": [[553, "config-dataloader-in-a-yaml-file"]], "User-specific dataset": [[553, "user-specific-dataset"]], "Design": [[554, "design"], [603, "design"], [603, "id1"], [603, "id3"], [603, "id5"], [603, "id7"], [603, "id9"], [603, "id11"], [603, "id13"], [603, "id15"], [603, "id17"], [603, "id19"], [603, "id21"]], "Architecture": [[554, "architecture"], [564, "architecture"]], "Workflow": [[554, "workflow"]], "Distillation": [[555, "distillation"], [568, "distillation"], [595, "distillation"]], "Knowledge Distillation": [[555, "knowledge-distillation"]], "Intermediate Layer Knowledge Distillation": [[555, "intermediate-layer-knowledge-distillation"]], "Self Distillation": [[555, "self-distillation"]], "Distillation Support Matrix": [[555, "distillation-support-matrix"]], "Get Started with Distillation API": [[555, "get-started-with-distillation-api"]], "Distillation for Quantization": [[556, "distillation-for-quantization"]], "Distillation for Quantization Support Matrix": [[556, "distillation-for-quantization-support-matrix"]], "Get Started with Distillation for Quantization API": [[556, "get-started-with-distillation-for-quantization-api"]], "Distributed Training and Inference (Evaluation)": [[557, "distributed-training-and-inference-evaluation"]], "Supported Feature Matrix": [[557, "supported-feature-matrix"], [561, "supported-feature-matrix"], [564, "supported-feature-matrix"], [595, "supported-feature-matrix"], [596, "supported-feature-matrix"], [601, "supported-feature-matrix"], [605, "supported-feature-matrix"]], "Get Started with Distributed Training and Inference API": [[557, "get-started-with-distributed-training-and-inference-api"]], "Option 1: Pure Yaml Configuration": [[557, "option-1-pure-yaml-configuration"]], "Option 2: User Defined Training Function": [[557, "option-2-user-defined-training-function"]], "Horovodrun Execution": [[557, "horovodrun-execution"]], "PyTorch Examples:": [[557, "pytorch-examples"]], "TensorFlow Examples:": [[557, "tensorflow-examples"]], "Example List": [[558, "example-list"]], "Release Data": [[558, "release-data"]], "Export": [[559, "export"]], "Supported Framework Model Matrix": [[559, "supported-framework-model-matrix"], [570, "supported-framework-model-matrix"]], "FP32 Model Export": [[559, "fp32-model-export"]], "INT8 Model Export": [[559, "int8-model-export"]], "Appendix": [[559, "appendix"]], "Frequently Asked Questions": [[560, "frequently-asked-questions"]], "Common Build Issues": [[560, "common-build-issues"]], "Issue 1:": [[560, "issue-1"]], "Issue 2:": [[560, "issue-2"]], "Issue 3:": [[560, "issue-3"]], "Issue 4:": [[560, "issue-4"]], "Framework YAML Configuration Files": [[561, "framework-yaml-configuration-files"]], "Get started with Framework YAML Files": [[561, "get-started-with-framework-yaml-files"]], "Quick Samples": [[562, "quick-samples"]], "Quantization with JupyterLab Extension": [[562, "quantization-with-jupyterlab-extension"]], "Quantization with GUI": [[562, "quantization-with-gui"]], "Validated Models": [[562, "validated-models"], [600, "validated-models"], [606, "validated-models"]], "Incompatible changes between v1.2 and v1.1": [[563, "incompatible-changes-between-v1-2-and-v1-1"]], "User-facing APIs": [[563, "user-facing-apis"]], "Built-in transform/dataset/metric APIs": [[563, "built-in-transform-dataset-metric-apis"]], "Infrastructure of Intel\u00ae Neural Compressor": [[564, "infrastructure-of-intel-neural-compressor"]], "Linux Installation": [[565, "linux-installation"]], "Prerequisites": [[565, "prerequisites"], [565, "id1"]], "Install from Binary": [[565, "install-from-binary"], [565, "id2"]], "Install from Source": [[565, "install-from-source"], [565, "id3"]], "Install from AI Kit": [[565, "install-from-ai-kit"]], "Windows Installation": [[565, "windows-installation"]], "System Requirements": [[565, "system-requirements"]], "Validated Hardware Environment": [[565, "validated-hardware-environment"]], "Intel\u00ae Neural Compressor supports CPUs based on Intel 64 architecture or compatible processors:": [[565, "intel-neural-compressor-supports-cpus-based-on-intel-64-architecture-or-compatible-processors"]], "Intel\u00ae Neural Compressor supports GPUs built on Intel\u2019s Xe architecture:": [[565, "intel-neural-compressor-supports-gpus-built-on-intel-s-xe-architecture"]], "Intel\u00ae Neural Compressor quantized ONNX models support multiple hardware vendors through ONNX Runtime:": [[565, "intel-neural-compressor-quantized-onnx-models-support-multiple-hardware-vendors-through-onnx-runtime"]], "Validated Software Environment": [[565, "validated-software-environment"]], "Legal Information": [[566, "legal-information"]], "License": [[566, "license"]], "Citation": [[566, "citation"]], "Trademarks": [[566, "trademarks"]], "Metrics": [[567, "metrics"]], "Supported Built-in Metric Matrix": [[567, "supported-built-in-metric-matrix"]], "Get Start with Metrics": [[567, "get-start-with-metrics"]], "Support Single-metric and Multi-metrics": [[567, "support-single-metric-and-multi-metrics"]], "Build Custom Metric with Python API": [[567, "build-custom-metric-with-python-api"]], "Code Migration from Intel Neural Compressor 1.X to Intel Neural Compressor 2.X": [[568, "code-migration-from-intel-neural-compressor-1-x-to-intel-neural-compressor-2-x"]], "Model Quantization": [[568, "model-quantization"]], "Post-training Quantization": [[568, "post-training-quantization"]], "Quantization Aware Training": [[568, "quantization-aware-training"], [596, "quantization-aware-training"], [596, "id1"]], "Orchestration": [[568, "orchestration"]], "Mixed Precision": [[569, "mixed-precision"]], "Mixed Precision Support Matrix": [[569, "mixed-precision-support-matrix"]], "Get Started with Mixed Precision API": [[569, "get-started-with-mixed-precision-api"]], "Neural Coder": [[571, "neural-coder"], [588, "neural-coder"], [588, "id1"]], "What do we offer?": [[571, "what-do-we-offer"]], "Getting Started!": [[571, "getting-started"], [582, "getting-started"]], "Jupyter Lab Extension": [[571, "jupyter-lab-extension"]], "Python Launcher": [[571, "python-launcher"], [576, "python-launcher"]], "Python API": [[571, "python-api"]], "Contact": [[571, "contact"]], "AWS Amazon SageMaker Support": [[572, "aws-amazon-sagemaker-support"]], "Start Jupyter Lab 3": [[572, "start-jupyter-lab-3"]], "For SageMaker Studio": [[572, "for-sagemaker-studio"]], "For SageMaker Notebook instance": [[572, "for-sagemaker-notebook-instance"]], "Installation Guide": [[572, "installation-guide"]], "BigDL Nano Support": [[573, "bigdl-nano-support"]], "Example": [[573, "example"], [577, "example"], [590, "example"], [600, "example"]], "Support Matrix": [[573, "support-matrix"]], "Intel CPU Platforms: Best Performance Setting": [[574, "intel-cpu-platforms-best-performance-setting"]], "Install MKL, OpenMP and JEMALLOC": [[574, "install-mkl-openmp-and-jemalloc"]], "Install NUMA Controller": [[574, "install-numa-controller"]], "Environment Variables": [[574, "environment-variables"]], "Frequency Governers": [[574, "frequency-governers"]], "Neural Coder as Python API": [[575, "neural-coder-as-python-api"]], "Enable": [[575, "enable"]], "Bench": [[575, "bench"]], "SuperBench": [[575, "superbench"]], "Quick-Start": [[576, "quick-start"]], "Launcher Arguments (Optional)": [[576, "launcher-arguments-optional"]], "Neural Coder for Quantization": [[577, "neural-coder-for-quantization"]], "Features Supported": [[577, "features-supported"]], "Models Supported": [[577, "models-supported"]], "Usage": [[577, "usage"], [601, "usage"], [601, "id1"], [603, "usage"], [603, "id2"], [603, "id4"], [603, "id6"], [603, "id8"], [603, "id10"], [603, "id12"], [603, "id14"], [603, "id16"], [603, "id18"], [603, "id20"], [603, "id22"]], "PyPI distribution:": [[577, "pypi-distribution"]], "Supported Optimization Features": [[578, "supported-optimization-features"]], "v0.4": [[579, "v0-4"]], "Highlights": [[579, "highlights"]], "Others": [[579, "others"]], "Changelog": [[580, "changelog"], [584, "changelog"]], "neural_compressor_ext_lab": [[581, "neural-compressor-ext-lab"]], "Requirements": [[581, "requirements"], [585, "requirements"]], "Install": [[581, "install"], [585, "install"]], "Uninstall": [[581, "uninstall"], [585, "uninstall"]], "Contributing": [[581, "contributing"], [585, "contributing"]], "Development install": [[581, "development-install"], [585, "development-install"]], "Development uninstall": [[581, "development-uninstall"], [585, "development-uninstall"]], "Packaging the extension": [[581, "packaging-the-extension"], [585, "packaging-the-extension"]], "Intel\u00ae Neural Compressor as JupyterLab Extension": [[582, "intel-neural-compressor-as-jupyterlab-extension"]], "Auto-enable a feature": [[582, "auto-enable-a-feature"]], "Or let us help you auto-select the best feature": [[582, "or-let-us-help-you-auto-select-the-best-feature"]], "Pre-requisites": [[582, "pre-requisites"]], "Making a new release of neural_compressor_ext_lab": [[583, "making-a-new-release-of-neural-compressor-ext-lab"]], "Manual release": [[583, "manual-release"], [586, "manual-release"]], "Python package": [[583, "python-package"], [586, "python-package"]], "NPM package": [[583, "npm-package"], [586, "npm-package"]], "Automated releases with the Jupyter Releaser": [[583, "automated-releases-with-the-jupyter-releaser"], [586, "automated-releases-with-the-jupyter-releaser"]], "Publishing to conda-forge": [[583, "publishing-to-conda-forge"], [586, "publishing-to-conda-forge"]], "neural_compressor_ext_lab_alibaba": [[585, "neural-compressor-ext-lab-alibaba"]], "Making a new release of neural_compressor_ext_lab_alibaba": [[586, "making-a-new-release-of-neural-compressor-ext-lab-alibaba"]], "Change Log": [[587, "change-log"]], "[Unreleased]": [[587, "unreleased"]], "Background Introduction": [[588, "background-introduction"]], "Neural Coder Extension in VSCode": [[588, "neural-coder-extension-in-vscode"]], "Neural Coder Extension Usage": [[588, "neural-coder-extension-usage"]], "1. Open": [[588, "open"]], "2. Search": [[588, "search"]], "3. Setting": [[588, "setting"]], "4. Icon": [[588, "icon"]], "5. optimization (quantization)": [[588, "optimization-quantization"]], "5.1 Enable": [[588, "enable"]], "5.2 Auto": [[588, "auto"]], "Welcome to your VS Code Extension": [[589, "welcome-to-your-vs-code-extension"]], "What\u2019s in the folder": [[589, "what-s-in-the-folder"]], "Setup": [[589, "setup"]], "Get up and running straight away": [[589, "get-up-and-running-straight-away"]], "Make changes": [[589, "make-changes"]], "Explore the API": [[589, "explore-the-api"]], "Run tests": [[589, "run-tests"]], "Go further": [[589, "go-further"]], "Single Objective": [[590, "single-objective"]], "Multiple Objectives": [[590, "multiple-objectives"]], "Objective Support Matrix": [[590, "objective-support-matrix"]], "Get Started with Objective API": [[590, "get-started-with-objective-api"]], "Config Single Objective": [[590, "config-single-objective"]], "Config Multiple Objectives": [[590, "config-multiple-objectives"]], "Optimization Orchestration": [[591, "optimization-orchestration"]], "One-shot": [[591, "one-shot"]], "Orchestration Support Matrix": [[591, "orchestration-support-matrix"]], "Get Started with Orchestration API": [[591, "get-started-with-orchestration-api"]], "SYSTEM CONFIGURATION": [[592, "system-configuration"]], "Neural Network Pruning": [[593, "neural-network-pruning"]], "Pruning Patterns": [[593, "pruning-patterns"]], "Pruning Criteria": [[593, "pruning-criteria"]], "Pruning Schedule": [[593, "pruning-schedule"]], "Pruning Types": [[593, "pruning-types"]], "Pruning Scope": [[593, "pruning-scope"]], "Sparsity Decay Types": [[593, "sparsity-decay-types"]], "Regularization": [[593, "regularization"]], "Pruning Support Matrix": [[593, "pruning-support-matrix"]], "Get Started with Pruning API": [[593, "get-started-with-pruning-api"]], "Sparse Model Deployment": [[593, "sparse-model-deployment"]], "Reference": [[593, "reference"], [596, "reference"], [600, "reference"]], "Full Publications/Events (59)": [[594, "full-publications-events-59"]], "2023 (6)": [[594, "id1"]], "2022 (34)": [[594, "id2"]], "2021 (15)": [[594, "id3"]], "2018 - 2020 (4)": [[594, "id4"]], "Pythonic Style Access for Configurations": [[595, "pythonic-style-access-for-configurations"]], "Pythonic API for User Configurations": [[595, "pythonic-api-for-user-configurations"], [595, "id1"]], "Pythonic API for Framework Configurations": [[595, "pythonic-api-for-framework-configurations"], [595, "id2"]], "Get Started with Pythonic API for Configurations": [[595, "get-started-with-pythonic-api-for-configurations"]], "NAS": [[595, "nas"]], "Quantization Introduction": [[596, "quantization-introduction"]], "Quantization Fundamentals": [[596, "quantization-fundamentals"], [600, "quantization-fundamentals"]], "Quantization Support Matrix": [[596, "quantization-support-matrix"]], "Quantization Scheme in TensorFlow": [[596, "quantization-scheme-in-tensorflow"]], "Quantization Scheme in PyTorch": [[596, "quantization-scheme-in-pytorch"]], "Quantization Scheme in IPEX": [[596, "quantization-scheme-in-ipex"]], "Quantization Scheme in MXNet": [[596, "quantization-scheme-in-mxnet"]], "Quantization Scheme in ONNX Runtime": [[596, "quantization-scheme-in-onnx-runtime"]], "Quantization Approaches": [[596, "quantization-approaches"]], "With or Without Accuracy Aware Tuning": [[596, "with-or-without-accuracy-aware-tuning"]], "Get Started": [[596, "get-started"]], "Post Training Quantization": [[596, "post-training-quantization"]], "Specify Quantization Rules": [[596, "specify-quantization-rules"]], "Specify Quantization Recipes": [[596, "specify-quantization-recipes"]], "Specify Quantization Backend": [[596, "specify-quantization-backend"]], "Turn OFF Auto Mixed Precision during Quantization": [[597, "turn-off-auto-mixed-precision-during-quantization"]], "Tensorflow": [[597, "tensorflow"]], "Release": [[598, "release"]], "Release Notes": [[598, "release-notes"]], "Known Issues": [[598, "known-issues"]], "Incompatible Changes": [[598, "incompatible-changes"]], "SigOpt Strategy": [[599, "sigopt-strategy"]], "Preparation": [[599, "preparation"]], "SigOpt Platform": [[599, "sigopt-platform"]], "Neural Compressor Configuration": [[599, "neural-compressor-configuration"]], "Performance": [[599, "performance"]], "Benefit of SigOpt Strategy": [[599, "benefit-of-sigopt-strategy"]], "Performance Comparison of Different Strategies": [[599, "performance-comparison-of-different-strategies"]], "Smooth Quant": [[600, "smooth-quant"]], "Per-tensor & Per-channel": [[600, "per-tensor-per-channel"]], "Per-tensor example": [[600, "per-tensor-example"]], "Per-channel example": [[600, "per-channel-example"]], "Matmul quantization example": [[600, "matmul-quantization-example"]], "Per-channel limitation": [[600, "per-channel-limitation"]], "SmoothQuant and Our Enhancement": [[600, "smoothquant-and-our-enhancement"]], "SmoothQuant": [[600, "smoothquant"]], "Our enhancement:": [[600, "our-enhancement"]], "Algorithm: Layer-wise Auto-tuning of $\\alpha$.": [[600, "algorithm-layer-wise-auto-tuning-of-alpha"]], "Engineering": [[600, "engineering"]], "TensorBoard": [[601, "tensorboard"]], "Get Started with TensorBoard": [[601, "get-started-with-tensorboard"]], "PyTorch TensorBoard": [[601, "pytorch-tensorboard"]], "TensorFlow Tensorboard": [[601, "tensorflow-tensorboard"]], "PyTorch Examples": [[601, "pytorch-examples"]], "TensorFlow Examples": [[601, "tensorflow-examples"]], "Transform": [[602, "transform"]], "Transform Support List": [[602, "transform-support-list"]], "Pytorch": [[602, "pytorch"]], "Tuning Strategies": [[603, "tuning-strategies"]], "Strategy Design": [[603, "strategy-design"]], "Tuning Space": [[603, "tuning-space"]], "Exit Policy": [[603, "exit-policy"]], "Accuracy Criteria": [[603, "accuracy-criteria"]], "Tuning Process": [[603, "tuning-process"]], "Tuning Algorithms": [[603, "tuning-algorithms"]], "Auto": [[603, "auto"]], "Conservative Tuning": [[603, "conservative-tuning"]], "Basic": [[603, "basic"]], "MSE": [[603, "mse"]], "MSE_V2": [[603, "mse-v2"]], "HAWQ_V2": [[603, "hawq-v2"]], "Bayesian": [[603, "bayesian"]], "Exhaustive": [[603, "exhaustive"]], "Random": [[603, "random"]], "SigOpt": [[603, "sigopt"]], "TPE": [[603, "tpe"]], "Distributed Tuning": [[603, "distributed-tuning"]], "Customize a New Tuning Strategy": [[603, "customize-a-new-tuning-strategy"]], "User Guide": [[604, "user-guide"]], "Overview": [[604, "overview"]], "Python-based APIs": [[604, "python-based-apis"]], "Neural Coder (Zero-code Optimization)": [[604, "neural-coder-zero-code-optimization"]], "Advanced Topics": [[604, "advanced-topics"]], "User YAML Configuration Files": [[605, "user-yaml-configuration-files"]], "Get started with User YAML Files": [[605, "get-started-with-user-yaml-files"]], "Validated Quantization Examples": [[606, "validated-quantization-examples"]], "TensorFlow Models with Intel TensorFlow 2.11.0": [[606, "tensorflow-models-with-intel-tensorflow-2-11-0"]], "PyTorch Models with Torch 1.13.0+cpu in PTQ Mode": [[606, "pytorch-models-with-torch-1-13-0-cpu-in-ptq-mode"]], "PyTorch Models with Torch 1.13.0+cpu in QAT Mode": [[606, "pytorch-models-with-torch-1-13-0-cpu-in-qat-mode"]], "PyTorch Models with Torch and Intel\u00ae Extension for PyTorch* 1.13.0+cpu": [[606, "pytorch-models-with-torch-and-intel-extension-for-pytorch-1-13-0-cpu"]], "ONNX Models with ONNX Runtime 1.13.1": [[606, "onnx-models-with-onnx-runtime-1-13-1"]], "MXNet Models with MXNet 1.9.1": [[606, "mxnet-models-with-mxnet-1-9-1"]], "Validated Pruning Examples": [[606, "validated-pruning-examples"]], "Validated Knowledge Distillation Examples": [[606, "validated-knowledge-distillation-examples"]], "Validated ONNX QDQ INT8 Models on Multiple Hardware through ONNX Runtime": [[606, "validated-onnx-qdq-int8-models-on-multiple-hardware-through-onnx-runtime"]]}, "indexentries": {"644ec953a7dc_pruning_support": [[0, "module-644ec953a7dc_pruning_support"]], "module": [[0, "module-644ec953a7dc_pruning_support"], [1, "module-6ece06672ed3_v1_14"], [2, "module-6f0d0f71d92e_v1_13"], [3, "module-9e89549a08c8_v1_11"], [4, "module-block_mask"], [5, "module-env"], [6, "module-neural_compressor.adaptor.adaptor"], [7, "module-neural_compressor.adaptor"], [8, "module-neural_compressor.adaptor.keras"], [9, "module-neural_compressor.adaptor.keras_utils.conv2d"], [10, "module-neural_compressor.adaptor.keras_utils.dense"], [11, "module-neural_compressor.adaptor.keras_utils.depthwise_conv2d"], [12, "module-neural_compressor.adaptor.keras_utils"], [13, "module-neural_compressor.adaptor.keras_utils.quantizer"], [14, "module-neural_compressor.adaptor.keras_utils.separable_conv2d"], [15, "module-neural_compressor.adaptor.mxnet"], [16, "module-neural_compressor.adaptor.mxnet_utils"], [17, "module-neural_compressor.adaptor.mxnet_utils.util"], [18, "module-neural_compressor.adaptor.onnxrt"], [19, "module-neural_compressor.adaptor.ox_utils.calibration"], [20, "module-neural_compressor.adaptor.ox_utils.calibrator"], [21, "module-neural_compressor.adaptor.ox_utils"], [22, "module-neural_compressor.adaptor.ox_utils.operators.activation"], [23, "module-neural_compressor.adaptor.ox_utils.operators.argmax"], [24, "module-neural_compressor.adaptor.ox_utils.operators.attention"], [25, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"], [26, "module-neural_compressor.adaptor.ox_utils.operators.concat"], [27, "module-neural_compressor.adaptor.ox_utils.operators.conv"], [28, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"], [29, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"], [30, "module-neural_compressor.adaptor.ox_utils.operators.gather"], [31, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"], [32, "module-neural_compressor.adaptor.ox_utils.operators.gemm"], [33, "module-neural_compressor.adaptor.ox_utils.operators"], [34, "module-neural_compressor.adaptor.ox_utils.operators.lstm"], [35, "module-neural_compressor.adaptor.ox_utils.operators.matmul"], [36, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"], [37, "module-neural_compressor.adaptor.ox_utils.operators.ops"], [38, "module-neural_compressor.adaptor.ox_utils.operators.pad"], [39, "module-neural_compressor.adaptor.ox_utils.operators.pooling"], [40, "module-neural_compressor.adaptor.ox_utils.operators.resize"], [41, "module-neural_compressor.adaptor.ox_utils.operators.split"], [42, "module-neural_compressor.adaptor.ox_utils.quantizer"], [43, "module-neural_compressor.adaptor.ox_utils.util"], [44, "module-neural_compressor.adaptor.pytorch"], [45, "module-neural_compressor.adaptor.query"], [46, "module-neural_compressor.adaptor.tensorflow"], [47, "module-neural_compressor.adaptor.tf_utils.graph_converter"], [48, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"], [49, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"], [50, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"], [51, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"], [52, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"], [53, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"], [54, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"], [55, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"], [56, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer"], [57, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"], [58, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"], [59, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"], [60, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"], [61, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"], [62, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"], [63, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"], [64, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"], [65, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"], [66, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"], [67, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"], [68, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"], [69, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"], [70, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"], [71, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"], [72, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"], [73, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"], [74, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"], [75, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"], [76, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"], [77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"], [78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"], [79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"], [80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"], [81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"], [82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"], [83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"], [84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"], [85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"], [86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"], [87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"], [88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"], [89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"], [90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"], [91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"], [92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"], [93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"], [94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"], [95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"], [96, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"], [97, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"], [98, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"], [99, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"], [100, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx"], [101, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph"], [102, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node"], [103, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema"], [104, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils"], [105, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"], [106, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"], [107, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"], [108, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"], [109, "module-neural_compressor.adaptor.tf_utils.graph_util"], [110, "module-neural_compressor.adaptor.tf_utils"], [111, "module-neural_compressor.adaptor.tf_utils.quantize_graph"], [112, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize"], [113, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat"], [114, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config"], [115, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper"], [116, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers"], [117, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer"], [118, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add"], [119, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base"], [120, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"], [121, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper"], [122, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"], [123, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"], [124, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"], [125, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"], [126, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"], [127, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"], [128, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"], [129, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"], [130, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"], [131, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"], [132, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"], [133, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"], [134, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"], [135, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"], [136, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"], [137, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"], [138, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"], [139, "module-neural_compressor.adaptor.tf_utils.tf2onnx_converter"], [140, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"], [141, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"], [142, "module-neural_compressor.adaptor.tf_utils.transform_graph"], [143, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"], [144, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"], [145, "module-neural_compressor.adaptor.tf_utils.util"], [146, "module-neural_compressor.adaptor.torch_utils.bf16_convert"], [147, "module-neural_compressor.adaptor.torch_utils.hawq_metric"], [148, "module-neural_compressor.adaptor.torch_utils"], [149, "module-neural_compressor.adaptor.torch_utils.model_wrapper"], [150, "module-neural_compressor.adaptor.torch_utils.smooth_quant"], [151, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"], [152, "module-neural_compressor.adaptor.torch_utils.util"], [153, "module-neural_compressor.algorithm.algorithm"], [154, "module-neural_compressor.algorithm.fast_bias_correction"], [155, "module-neural_compressor.algorithm"], [156, "module-neural_compressor.algorithm.smooth_quant"], [157, "module-neural_compressor.algorithm.weight_correction"], [158, "module-neural_compressor.benchmark"], [159, "module-neural_compressor.compression.callbacks"], [160, "module-neural_compressor.compression.distillation.criterions"], [161, "module-neural_compressor.compression.distillation"], [162, "module-neural_compressor.compression"], [163, "module-neural_compressor.compression.pruner.criteria"], [164, "module-neural_compressor.compression.pruner"], [165, "module-neural_compressor.compression.pruner.model_slim.auto_slim"], [166, "module-neural_compressor.compression.pruner.model_slim"], [167, "module-neural_compressor.compression.pruner.model_slim.pattern_analyzer"], [168, "module-neural_compressor.compression.pruner.model_slim.weight_slim"], [169, "module-neural_compressor.compression.pruner.patterns"], [170, "module-neural_compressor.compression.pruner.pruners"], [171, "module-neural_compressor.compression.pruner.regs"], [172, "module-neural_compressor.compression.pruner.schedulers"], [173, "module-neural_compressor.compression.pruner.utils"], [174, "module-neural_compressor.conf.config"], [175, "module-neural_compressor.conf.dotdict"], [176, "module-neural_compressor.conf"], [177, "module-neural_compressor.conf.pythonic_config"], [178, "module-neural_compressor.config"], [179, "module-neural_compressor.contrib"], [180, "module-neural_compressor.contrib.strategy"], [181, "module-neural_compressor.contrib.strategy.sigopt"], [182, "module-neural_compressor.contrib.strategy.tpe"], [183, "module-neural_compressor.data.dataloaders.base_dataloader"], [184, "module-neural_compressor.data.dataloaders.dataloader"], [185, "module-neural_compressor.data.dataloaders.default_dataloader"], [186, "module-neural_compressor.data.dataloaders.fetcher"], [187, "module-neural_compressor.data.dataloaders"], [188, "module-neural_compressor.data.dataloaders.mxnet_dataloader"], [189, "module-neural_compressor.data.dataloaders.onnxrt_dataloader"], [190, "module-neural_compressor.data.dataloaders.pytorch_dataloader"], [191, "module-neural_compressor.data.dataloaders.sampler"], [192, "module-neural_compressor.data.dataloaders.tensorflow_dataloader"], [193, "module-neural_compressor.data.datasets.bert_dataset"], [194, "module-neural_compressor.data.datasets.coco_dataset"], [195, "module-neural_compressor.data.datasets.dataset"], [196, "module-neural_compressor.data.datasets.dummy_dataset"], [197, "module-neural_compressor.data.datasets.dummy_dataset_v2"], [198, "module-neural_compressor.data.datasets.imagenet_dataset"], [199, "module-neural_compressor.data.datasets"], [200, "module-neural_compressor.data.datasets.style_transfer_dataset"], [201, "module-neural_compressor.data.filters.coco_filter"], [202, "module-neural_compressor.data.filters.filter"], [203, "module-neural_compressor.data.filters"], [204, "module-neural_compressor.data"], [205, "module-neural_compressor.data.transforms.coco_transform"], [206, "module-neural_compressor.data.transforms.imagenet_transform"], [207, "module-neural_compressor.data.transforms"], [208, "module-neural_compressor.data.transforms.postprocess"], [209, "module-neural_compressor.data.transforms.tokenization"], [210, "module-neural_compressor.data.transforms.transform"], [211, "module-neural_compressor.experimental.benchmark"], [212, "module-neural_compressor.experimental.common.criterion"], [213, "module-neural_compressor.experimental.common.dataloader"], [214, "module-neural_compressor.experimental.common"], [215, "module-neural_compressor.experimental.common.metric"], [216, "module-neural_compressor.experimental.common.model"], [217, "module-neural_compressor.experimental.common.optimizer"], [218, "module-neural_compressor.experimental.common.postprocess"], [219, "module-neural_compressor.experimental.common.torch_utils"], [220, "module-neural_compressor.experimental.component"], [221, "module-neural_compressor.experimental.compression"], [222, "module-neural_compressor.experimental.compression.pruning"], [223, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"], [224, "module-neural_compressor.experimental.data.dataloaders.dataloader"], [225, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"], [226, "module-neural_compressor.experimental.data.dataloaders.fetcher"], [227, "module-neural_compressor.experimental.data.dataloaders"], [228, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"], [229, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"], [230, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"], [231, "module-neural_compressor.experimental.data.dataloaders.sampler"], [232, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"], [233, "module-neural_compressor.experimental.data.datasets.bert_dataset"], [234, "module-neural_compressor.experimental.data.datasets.coco_dataset"], [235, "module-neural_compressor.experimental.data.datasets.dataset"], [236, "module-neural_compressor.experimental.data.datasets.dummy_dataset"], [237, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"], [238, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"], [239, "module-neural_compressor.experimental.data.datasets"], [240, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"], [241, "module-neural_compressor.experimental.data.filters.coco_filter"], [242, "module-neural_compressor.experimental.data.filters.filter"], [243, "module-neural_compressor.experimental.data.filters"], [244, "module-neural_compressor.experimental.data"], [245, "module-neural_compressor.experimental.data.transforms.imagenet_transform"], [246, "module-neural_compressor.experimental.data.transforms"], [247, "module-neural_compressor.experimental.data.transforms.tokenization"], [248, "module-neural_compressor.experimental.data.transforms.transform"], [249, "module-neural_compressor.experimental.distillation"], [250, "module-neural_compressor.experimental.export"], [251, "module-neural_compressor.experimental.export.qlinear2qdq"], [252, "module-neural_compressor.experimental.export.tf2onnx"], [253, "module-neural_compressor.experimental.export.torch2onnx"], [254, "module-neural_compressor.experimental.export.utils"], [255, "module-neural_compressor.experimental.graph_optimization"], [256, "module-neural_compressor.experimental"], [257, "module-neural_compressor.experimental.metric.bleu"], [258, "module-neural_compressor.experimental.metric.bleu_util"], [259, "module-neural_compressor.experimental.metric.coco_label_map"], [260, "module-neural_compressor.experimental.metric.coco_tools"], [261, "module-neural_compressor.experimental.metric.evaluate_squad"], [262, "module-neural_compressor.experimental.metric.f1"], [263, "module-neural_compressor.experimental.metric"], [264, "module-neural_compressor.experimental.metric.metric"], [265, "module-neural_compressor.experimental.mixed_precision"], [266, "module-neural_compressor.experimental.model_conversion"], [267, "module-neural_compressor.experimental.nas.basic_nas"], [268, "module-neural_compressor.experimental.nas.dynas"], [269, "module-neural_compressor.experimental.nas"], [270, "module-neural_compressor.experimental.nas.nas"], [271, "module-neural_compressor.experimental.nas.nas_utils"], [272, "module-neural_compressor.experimental.nas.search_algorithms"], [273, "module-neural_compressor.experimental.pruner_legacy.gradient_sensitivity"], [274, "module-neural_compressor.experimental.pruner_legacy.group_lasso"], [275, "module-neural_compressor.experimental.pruner_legacy"], [276, "module-neural_compressor.experimental.pruner_legacy.magnitude"], [277, "module-neural_compressor.experimental.pruner_legacy.pattern_lock"], [278, "module-neural_compressor.experimental.pruner_legacy.pruner"], [279, "module-neural_compressor.experimental.pruning"], [280, "module-neural_compressor.experimental.pruning_recipes"], [281, "module-neural_compressor.experimental.pruning_recipes.patterns"], [282, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"], [283, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"], [284, "module-neural_compressor.experimental.pruning_v2"], [285, "module-neural_compressor.experimental.pytorch_pruner"], [286, "module-neural_compressor.experimental.pytorch_pruner.logger"], [287, "module-neural_compressor.experimental.pytorch_pruner.patterns"], [288, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"], [289, "module-neural_compressor.experimental.pytorch_pruner.pruner"], [290, "module-neural_compressor.experimental.pytorch_pruner.pruning"], [291, "module-neural_compressor.experimental.pytorch_pruner.scheduler"], [292, "module-neural_compressor.experimental.quantization"], [293, "module-neural_compressor.experimental.scheduler"], [294, "module-neural_compressor"], [295, "module-neural_compressor.metric.bleu"], [296, "module-neural_compressor.metric.bleu_util"], [297, "module-neural_compressor.metric.coco_label_map"], [298, "module-neural_compressor.metric.coco_tools"], [299, "module-neural_compressor.metric.evaluate_squad"], [300, "module-neural_compressor.metric.f1"], [301, "module-neural_compressor.metric"], [302, "module-neural_compressor.metric.metric"], [303, "module-neural_compressor.mix_precision"], [304, "module-neural_compressor.model.base_model"], [305, "module-neural_compressor.model"], [306, "module-neural_compressor.model.keras_model"], [307, "module-neural_compressor.model.model"], [308, "module-neural_compressor.model.mxnet_model"], [309, "module-neural_compressor.model.nets_factory"], [310, "module-neural_compressor.model.onnx_model"], [311, "module-neural_compressor.model.tensorflow_model"], [312, "module-neural_compressor.model.torch_model"], [313, "module-neural_compressor.objective"], [314, "module-neural_compressor.quantization"], [315, "module-neural_compressor.strategy.auto"], [316, "module-neural_compressor.strategy.auto_mixed_precision"], [317, "module-neural_compressor.strategy.basic"], [318, "module-neural_compressor.strategy.bayesian"], [319, "module-neural_compressor.strategy.conservative"], [320, "module-neural_compressor.strategy.exhaustive"], [321, "module-neural_compressor.strategy.hawq_v2"], [322, "module-neural_compressor.strategy"], [323, "module-neural_compressor.strategy.mse"], [324, "module-neural_compressor.strategy.mse_v2"], [325, "module-neural_compressor.strategy.random"], [326, "module-neural_compressor.strategy.strategy"], [327, "module-neural_compressor.strategy.utils.constant"], [328, "module-neural_compressor.strategy.utils"], [329, "module-neural_compressor.strategy.utils.tuning_sampler"], [330, "module-neural_compressor.strategy.utils.tuning_space"], [331, "module-neural_compressor.strategy.utils.tuning_structs"], [332, "module-neural_compressor.strategy.utils.utility"], [333, "module-neural_compressor.template.api_doc_example"], [334, "module-neural_compressor.template"], [335, "module-neural_compressor.training"], [336, "module-neural_compressor.utils.collect_layer_histogram"], [337, "module-neural_compressor.utils.constant"], [338, "module-neural_compressor.utils.create_obj_from_config"], [339, "module-neural_compressor.utils"], [340, "module-neural_compressor.utils.kl_divergence"], [341, "module-neural_compressor.utils.load_huggingface"], [342, "module-neural_compressor.utils.logger"], [343, "module-neural_compressor.utils.options"], [344, "module-neural_compressor.utils.pytorch"], [345, "module-neural_compressor.utils.utility"], [346, "module-neural_compressor.ux.components.benchmark.benchmark"], [347, "module-neural_compressor.ux.components.benchmark.benchmark_model"], [348, "module-neural_compressor.ux.components.benchmark.execute_benchmark"], [349, "module-neural_compressor.ux.components.benchmark"], [350, "module-neural_compressor.ux.components.config_generator.benchmark_config_generator"], [351, "module-neural_compressor.ux.components.config_generator.config_generator"], [352, "module-neural_compressor.ux.components.config_generator.graph_optimization_config_generator"], [353, "module-neural_compressor.ux.components.config_generator"], [354, "module-neural_compressor.ux.components.config_generator.mixed_precision_config_generator"], [355, "module-neural_compressor.ux.components.config_generator.profiling_config_generator"], [356, "module-neural_compressor.ux.components.config_generator.pruning_config_generator"], [357, "module-neural_compressor.ux.components.config_generator.quantization_config_generator"], [358, "module-neural_compressor.ux.components.configuration_wizard.configuration_parser"], [359, "module-neural_compressor.ux.components.configuration_wizard.get_boundary_nodes"], [360, "module-neural_compressor.ux.components.configuration_wizard.get_configuration"], [361, "module-neural_compressor.ux.components.configuration_wizard"], [362, "module-neural_compressor.ux.components.configuration_wizard.params_feeder"], [363, "module-neural_compressor.ux.components.configuration_wizard.pruning_config_parser"], [364, "module-neural_compressor.ux.components.db_manager.db_manager"], [365, "module-neural_compressor.ux.components.db_manager.db_models.benchmark"], [366, "module-neural_compressor.ux.components.db_manager.db_models.benchmark_result"], [367, "module-neural_compressor.ux.components.db_manager.db_models.dataloader"], [368, "module-neural_compressor.ux.components.db_manager.db_models.dataset"], [369, "module-neural_compressor.ux.components.db_manager.db_models.domain"], [370, "module-neural_compressor.ux.components.db_manager.db_models.domain_flavour"], [371, "module-neural_compressor.ux.components.db_manager.db_models.example"], [372, "module-neural_compressor.ux.components.db_manager.db_models.framework"], [373, "module-neural_compressor.ux.components.db_manager.db_models"], [374, "module-neural_compressor.ux.components.db_manager.db_models.metric"], [375, "module-neural_compressor.ux.components.db_manager.db_models.model"], [376, "module-neural_compressor.ux.components.db_manager.db_models.optimization"], [377, "module-neural_compressor.ux.components.db_manager.db_models.optimization_type"], [378, "module-neural_compressor.ux.components.db_manager.db_models.precision"], [379, "module-neural_compressor.ux.components.db_manager.db_models.profiling"], [380, "module-neural_compressor.ux.components.db_manager.db_models.profiling_result"], [381, "module-neural_compressor.ux.components.db_manager.db_models.project"], [382, "module-neural_compressor.ux.components.db_manager.db_models.pruning_details"], [383, "module-neural_compressor.ux.components.db_manager.db_models.transform"], [384, "module-neural_compressor.ux.components.db_manager.db_models.tuning_details"], [385, "module-neural_compressor.ux.components.db_manager.db_models.tuning_history"], [386, "module-neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface"], [387, "module-neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface"], [388, "module-neural_compressor.ux.components.db_manager.db_operations.db_operations"], [389, "module-neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface"], [390, "module-neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface"], [391, "module-neural_compressor.ux.components.db_manager.db_operations.examples_api_interface"], [392, "module-neural_compressor.ux.components.db_manager.db_operations"], [393, "module-neural_compressor.ux.components.db_manager.db_operations.model_api_interface"], [394, "module-neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface"], [395, "module-neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface"], [396, "module-neural_compressor.ux.components.db_manager.db_operations.project_api_interface"], [397, "module-neural_compressor.ux.components.db_manager"], [398, "module-neural_compressor.ux.components.db_manager.params_interfaces"], [399, "module-neural_compressor.ux.components.db_manager.utils"], [400, "module-neural_compressor.ux.components.diagnosis.diagnosis"], [401, "module-neural_compressor.ux.components.diagnosis.factory"], [402, "module-neural_compressor.ux.components.diagnosis"], [403, "module-neural_compressor.ux.components.diagnosis.onnx_diagnosis"], [404, "module-neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis"], [405, "module-neural_compressor.ux.components.diagnosis.op_details"], [406, "module-neural_compressor.ux.components.diagnosis.op_entry"], [407, "module-neural_compressor.ux.components.diagnosis.tensorflow_diagnosis"], [408, "module-neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis"], [409, "module-neural_compressor.ux.components.file_browser.file_browser"], [410, "module-neural_compressor.ux.components.file_browser"], [411, "module-neural_compressor.ux.components.graph.attribute"], [412, "module-neural_compressor.ux.components.graph.collapser"], [413, "module-neural_compressor.ux.components.graph.edge"], [414, "module-neural_compressor.ux.components.graph.graph"], [415, "module-neural_compressor.ux.components.graph.graph_reader"], [416, "module-neural_compressor.ux.components.graph"], [417, "module-neural_compressor.ux.components.graph.node"], [418, "module-neural_compressor.ux.components.graph.reader"], [419, "module-neural_compressor.ux.components.graph.reader.onnxrt_reader"], [420, "module-neural_compressor.ux.components.graph.reader.tensorflow_reader"], [421, "module-neural_compressor.ux.components"], [422, "module-neural_compressor.ux.components.jobs_management"], [423, "module-neural_compressor.ux.components.jobs_management.jobs_control_queue"], [424, "module-neural_compressor.ux.components.jobs_management.jobs_manager"], [425, "module-neural_compressor.ux.components.jobs_management.request"], [426, "module-neural_compressor.ux.components.manage_workspace"], [427, "module-neural_compressor.ux.components.model.domain"], [428, "module-neural_compressor.ux.components.model"], [429, "module-neural_compressor.ux.components.model.model"], [430, "module-neural_compressor.ux.components.model.model_type_getter"], [431, "module-neural_compressor.ux.components.model.onnxrt"], [432, "module-neural_compressor.ux.components.model.onnxrt.model"], [433, "module-neural_compressor.ux.components.model.pytorch"], [434, "module-neural_compressor.ux.components.model.pytorch.model"], [435, "module-neural_compressor.ux.components.model.repository"], [436, "module-neural_compressor.ux.components.model.shape"], [437, "module-neural_compressor.ux.components.model.tensorflow.frozen_pb"], [438, "module-neural_compressor.ux.components.model.tensorflow"], [439, "module-neural_compressor.ux.components.model.tensorflow.keras"], [440, "module-neural_compressor.ux.components.model.tensorflow.meta_graph"], [441, "module-neural_compressor.ux.components.model.tensorflow.model"], [442, "module-neural_compressor.ux.components.model.tensorflow.saved_model"], [443, "module-neural_compressor.ux.components.model.tensorflow.utils"], [444, "module-neural_compressor.ux.components.model_zoo.download_config"], [445, "module-neural_compressor.ux.components.model_zoo.download_model"], [446, "module-neural_compressor.ux.components.model_zoo.downloader"], [447, "module-neural_compressor.ux.components.model_zoo"], [448, "module-neural_compressor.ux.components.model_zoo.list_models"], [449, "module-neural_compressor.ux.components.names_mapper"], [450, "module-neural_compressor.ux.components.names_mapper.names_mapper"], [451, "module-neural_compressor.ux.components.optimization.execute_optimization"], [452, "module-neural_compressor.ux.components.optimization.factory"], [453, "module-neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization"], [454, "module-neural_compressor.ux.components.optimization.graph_optimizer"], [455, "module-neural_compressor.ux.components.optimization.graph_optimizer.optimize_model"], [456, "module-neural_compressor.ux.components.optimization"], [457, "module-neural_compressor.ux.components.optimization.mixed_precision"], [458, "module-neural_compressor.ux.components.optimization.mixed_precision.mixed_precision"], [459, "module-neural_compressor.ux.components.optimization.mixed_precision.optimize_model"], [460, "module-neural_compressor.ux.components.optimization.neural_coder_optimization"], [461, "module-neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model"], [462, "module-neural_compressor.ux.components.optimization.optimization"], [463, "module-neural_compressor.ux.components.optimization.pruning"], [464, "module-neural_compressor.ux.components.optimization.pruning.optimize_model"], [465, "module-neural_compressor.ux.components.optimization.pruning.pruning"], [466, "module-neural_compressor.ux.components.optimization.tune"], [467, "module-neural_compressor.ux.components.optimization.tune.tune_model"], [468, "module-neural_compressor.ux.components.optimization.tune.tuning"], [469, "module-neural_compressor.ux.components.optimization.tuning_history"], [470, "module-neural_compressor.ux.components.profiling.execute_profiling"], [471, "module-neural_compressor.ux.components.profiling.factory"], [472, "module-neural_compressor.ux.components.profiling"], [473, "module-neural_compressor.ux.components.profiling.profile_model"], [474, "module-neural_compressor.ux.components.profiling.profiler"], [475, "module-neural_compressor.ux.components.profiling.profiling"], [476, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.factory"], [477, "module-neural_compressor.ux.components.profiling.tensorflow_profiler"], [478, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.profiler"], [479, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.utils"], [480, "module-neural_compressor.ux.inc_bench"], [481, "module-neural_compressor.ux"], [482, "module-neural_compressor.ux.utils.consts"], [483, "module-neural_compressor.ux.utils.environment"], [484, "module-neural_compressor.ux.utils.exceptions"], [485, "module-neural_compressor.ux.utils.executor"], [486, "module-neural_compressor.ux.utils.expiring_dict"], [487, "module-neural_compressor.ux.utils.github_info"], [488, "module-neural_compressor.ux.utils.hw_info"], [489, "module-neural_compressor.ux.utils"], [490, "module-neural_compressor.ux.utils.json_serializer"], [491, "module-neural_compressor.ux.utils.logger"], [492, "module-neural_compressor.ux.utils.parser"], [493, "module-neural_compressor.ux.utils.proc"], [494, "module-neural_compressor.ux.utils.processes"], [495, "module-neural_compressor.ux.utils.singleton"], [496, "module-neural_compressor.ux.utils.status_updates"], [497, "module-neural_compressor.ux.utils.templates"], [498, "module-neural_compressor.ux.utils.templates.metric"], [499, "module-neural_compressor.ux.utils.templates.workdir"], [500, "module-neural_compressor.ux.utils.utils"], [501, "module-neural_compressor.ux.utils.workload.config"], [502, "module-neural_compressor.ux.utils.workload.dataloader"], [503, "module-neural_compressor.ux.utils.workload.evaluation"], [504, "module-neural_compressor.ux.utils.workload.graph_optimization"], [505, "module-neural_compressor.ux.utils.workload"], [506, "module-neural_compressor.ux.utils.workload.mixed_precision"], [507, "module-neural_compressor.ux.utils.workload.model"], [508, "module-neural_compressor.ux.utils.workload.pruning"], [509, "module-neural_compressor.ux.utils.workload.quantization"], [510, "module-neural_compressor.ux.utils.workload.tuning"], [511, "module-neural_compressor.ux.utils.yaml_utils"], [512, "module-neural_compressor.ux.web.communication"], [513, "module-neural_compressor.ux.web.configuration"], [514, "module-neural_compressor.ux.web.exceptions"], [515, "module-neural_compressor.ux.web"], [516, "module-neural_compressor.ux.web.router"], [517, "module-neural_compressor.ux.web.server"], [518, "module-neural_compressor.ux.web.service.benchmark"], [519, "module-neural_compressor.ux.web.service.history_snapshot_parser"], [520, "module-neural_compressor.ux.web.service"], [521, "module-neural_compressor.ux.web.service.model"], [522, "module-neural_compressor.ux.web.service.optimization"], [523, "module-neural_compressor.ux.web.service.profiling"], [524, "module-neural_compressor.ux.web.service.request_data_processor"], [525, "module-neural_compressor.ux.web.service.response_generator"], [526, "module-neural_compressor.ux.web.service.workload"], [527, "module-neural_compressor.version"]], "6ece06672ed3_v1_14": [[1, "module-6ece06672ed3_v1_14"]], "update_dataloaders() (in module 6ece06672ed3_v1_14)": [[1, "ece06672ed3_v1_14.update_dataloaders"]], "update_transformations() (in module 6ece06672ed3_v1_14)": [[1, "ece06672ed3_v1_14.update_transformations"]], "6f0d0f71d92e_v1_13": [[2, "module-6f0d0f71d92e_v1_13"]], "9e89549a08c8_v1_11": [[3, "module-9e89549a08c8_v1_11"]], "block_mask": [[4, "module-block_mask"]], "env": [[5, "module-env"]], "run_migrations_offline() (in module env)": [[5, "env.run_migrations_offline"]], "run_migrations_online() (in module env)": [[5, "env.run_migrations_online"]], "adaptor (class in neural_compressor.adaptor.adaptor)": [[6, "neural_compressor.adaptor.adaptor.Adaptor"]], "adaptor_registry() (in module neural_compressor.adaptor.adaptor)": [[6, "neural_compressor.adaptor.adaptor.adaptor_registry"]], "neural_compressor.adaptor.adaptor": [[6, "module-neural_compressor.adaptor.adaptor"]], "neural_compressor.adaptor": [[7, "module-neural_compressor.adaptor"]], "kerasadaptor (class in neural_compressor.adaptor.keras)": [[8, "neural_compressor.adaptor.keras.KerasAdaptor"]], "neural_compressor.adaptor.keras": [[8, "module-neural_compressor.adaptor.keras"]], "neural_compressor.adaptor.keras_utils.conv2d": [[9, "module-neural_compressor.adaptor.keras_utils.conv2d"]], "neural_compressor.adaptor.keras_utils.dense": [[10, "module-neural_compressor.adaptor.keras_utils.dense"]], "neural_compressor.adaptor.keras_utils.depthwise_conv2d": [[11, "module-neural_compressor.adaptor.keras_utils.depthwise_conv2d"]], "neural_compressor.adaptor.keras_utils": [[12, "module-neural_compressor.adaptor.keras_utils"]], "neural_compressor.adaptor.keras_utils.quantizer": [[13, "module-neural_compressor.adaptor.keras_utils.quantizer"]], "neural_compressor.adaptor.keras_utils.separable_conv2d": [[14, "module-neural_compressor.adaptor.keras_utils.separable_conv2d"]], "mxnetquery (class in neural_compressor.adaptor.mxnet)": [[15, "neural_compressor.adaptor.mxnet.MXNetQuery"]], "mxnetadaptor (class in neural_compressor.adaptor.mxnet)": [[15, "neural_compressor.adaptor.mxnet.MxNetAdaptor"]], "neural_compressor.adaptor.mxnet": [[15, "module-neural_compressor.adaptor.mxnet"]], "neural_compressor.adaptor.mxnet_utils": [[16, "module-neural_compressor.adaptor.mxnet_utils"]], "calibcollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.CalibCollector"]], "calibdata (class in neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.CalibData"]], "collectorbase (class in neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.CollectorBase"]], "dataiterloader (class in neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.DataIterLoader"]], "dataloaderwrap (class in neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.DataLoaderWrap"]], "namecollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.NameCollector"]], "optype (class in neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.OpType"]], "tensorcollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.TensorCollector"]], "amp_convert() (in module neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.amp_convert"]], "calib_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.calib_model"]], "check_mx_version() (in module neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.check_mx_version"]], "combine_capabilities() (in module neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.combine_capabilities"]], "create_data_example() (in module neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.create_data_example"]], "distribute_calib_tensors() (in module neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.distribute_calib_tensors"]], "ensure_list() (in module neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.ensure_list"]], "fuse() (in module neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.fuse"]], "get_framework_name() (in module neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.get_framework_name"]], "is_model_quantized() (in module neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.is_model_quantized"]], "isiterable() (in module neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.isiterable"]], "make_module() (in module neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.make_module"]], "make_nc_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.make_nc_model"]], "make_symbol_block() (in module neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.make_symbol_block"]], "ndarray_to_device() (in module neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.ndarray_to_device"]], "neural_compressor.adaptor.mxnet_utils.util": [[17, "module-neural_compressor.adaptor.mxnet_utils.util"]], "parse_tune_config() (in module neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.parse_tune_config"]], "prepare_dataloader() (in module neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.prepare_dataloader"]], "prepare_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.prepare_model"]], "prepare_model_data() (in module neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.prepare_model_data"]], "quantize_sym_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.quantize_sym_model"]], "query_quantizable_nodes() (in module neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.query_quantizable_nodes"]], "run_forward() (in module neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.run_forward"]], "onnxrt_integeropsadaptor (class in neural_compressor.adaptor.onnxrt)": [[18, "neural_compressor.adaptor.onnxrt.ONNXRT_IntegerOpsAdaptor"]], "onnxrt_qdqadaptor (class in neural_compressor.adaptor.onnxrt)": [[18, "neural_compressor.adaptor.onnxrt.ONNXRT_QDQAdaptor"]], "onnxrt_qlinearopsadaptor (class in neural_compressor.adaptor.onnxrt)": [[18, "neural_compressor.adaptor.onnxrt.ONNXRT_QLinearOpsAdaptor"]], "onnxruntimeadaptor (class in neural_compressor.adaptor.onnxrt)": [[18, "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor"]], "neural_compressor.adaptor.onnxrt": [[18, "module-neural_compressor.adaptor.onnxrt"]], "onnxrtaugment (class in neural_compressor.adaptor.ox_utils.calibration)": [[19, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment"]], "neural_compressor.adaptor.ox_utils.calibration": [[19, "module-neural_compressor.adaptor.ox_utils.calibration"]], "calibratorbase (class in neural_compressor.adaptor.ox_utils.calibrator)": [[20, "neural_compressor.adaptor.ox_utils.calibrator.CalibratorBase"]], "histogramcollector (class in neural_compressor.adaptor.ox_utils.calibrator)": [[20, "neural_compressor.adaptor.ox_utils.calibrator.HistogramCollector"]], "klcalibrator (class in neural_compressor.adaptor.ox_utils.calibrator)": [[20, "neural_compressor.adaptor.ox_utils.calibrator.KLCalibrator"]], "minmaxcalibrator (class in neural_compressor.adaptor.ox_utils.calibrator)": [[20, "neural_compressor.adaptor.ox_utils.calibrator.MinMaxCalibrator"]], "percentilecalibrator (class in neural_compressor.adaptor.ox_utils.calibrator)": [[20, "neural_compressor.adaptor.ox_utils.calibrator.PercentileCalibrator"]], "calib_registry() (in module neural_compressor.adaptor.ox_utils.calibrator)": [[20, "neural_compressor.adaptor.ox_utils.calibrator.calib_registry"]], "neural_compressor.adaptor.ox_utils.calibrator": [[20, "module-neural_compressor.adaptor.ox_utils.calibrator"]], "smooth_distribution() (in module neural_compressor.adaptor.ox_utils.calibrator)": [[20, "neural_compressor.adaptor.ox_utils.calibrator.smooth_distribution"]], "neural_compressor.adaptor.ox_utils": [[21, "module-neural_compressor.adaptor.ox_utils"]], "activationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[22, "neural_compressor.adaptor.ox_utils.operators.activation.ActivationOperator"]], "qactivationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[22, "neural_compressor.adaptor.ox_utils.operators.activation.QActivationOperator"]], "removableactivationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[22, "neural_compressor.adaptor.ox_utils.operators.activation.RemovableActivationOperator"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[22, "module-neural_compressor.adaptor.ox_utils.operators.activation"]], "argmaxoperator (class in neural_compressor.adaptor.ox_utils.operators.argmax)": [[23, "neural_compressor.adaptor.ox_utils.operators.argmax.ArgMaxOperator"]], "qargmaxoperator (class in neural_compressor.adaptor.ox_utils.operators.argmax)": [[23, "neural_compressor.adaptor.ox_utils.operators.argmax.QArgMaxOperator"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[23, "module-neural_compressor.adaptor.ox_utils.operators.argmax"]], "attentionoperator (class in neural_compressor.adaptor.ox_utils.operators.attention)": [[24, "neural_compressor.adaptor.ox_utils.operators.attention.AttentionOperator"]], "qattentionoperator (class in neural_compressor.adaptor.ox_utils.operators.attention)": [[24, "neural_compressor.adaptor.ox_utils.operators.attention.QAttentionOperator"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[24, "module-neural_compressor.adaptor.ox_utils.operators.attention"]], "binaryoperator (class in neural_compressor.adaptor.ox_utils.operators.binary_op)": [[25, "neural_compressor.adaptor.ox_utils.operators.binary_op.BinaryOperator"]], "qbinaryoperator (class in neural_compressor.adaptor.ox_utils.operators.binary_op)": [[25, "neural_compressor.adaptor.ox_utils.operators.binary_op.QBinaryOperator"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[25, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"]], "concatoperator (class in neural_compressor.adaptor.ox_utils.operators.concat)": [[26, "neural_compressor.adaptor.ox_utils.operators.concat.ConcatOperator"]], "qconcatoperator (class in neural_compressor.adaptor.ox_utils.operators.concat)": [[26, "neural_compressor.adaptor.ox_utils.operators.concat.QConcatOperator"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[26, "module-neural_compressor.adaptor.ox_utils.operators.concat"]], "convoperator (class in neural_compressor.adaptor.ox_utils.operators.conv)": [[27, "neural_compressor.adaptor.ox_utils.operators.conv.ConvOperator"]], "qconvoperator (class in neural_compressor.adaptor.ox_utils.operators.conv)": [[27, "neural_compressor.adaptor.ox_utils.operators.conv.QConvOperator"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[27, "module-neural_compressor.adaptor.ox_utils.operators.conv"]], "direct8bitoperator (class in neural_compressor.adaptor.ox_utils.operators.direct_q8)": [[28, "neural_compressor.adaptor.ox_utils.operators.direct_q8.Direct8BitOperator"]], "qdirectoperator (class in neural_compressor.adaptor.ox_utils.operators.direct_q8)": [[28, "neural_compressor.adaptor.ox_utils.operators.direct_q8.QDirectOperator"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[28, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"]], "embedlayernormalizationoperator (class in neural_compressor.adaptor.ox_utils.operators.embed_layernorm)": [[29, "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.EmbedLayerNormalizationOperator"]], "qembedlayernormalizationoperator (class in neural_compressor.adaptor.ox_utils.operators.embed_layernorm)": [[29, "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.QEmbedLayerNormalizationOperator"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[29, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"]], "gatheroperator (class in neural_compressor.adaptor.ox_utils.operators.gather)": [[30, "neural_compressor.adaptor.ox_utils.operators.gather.GatherOperator"]], "qgatheroperator (class in neural_compressor.adaptor.ox_utils.operators.gather)": [[30, "neural_compressor.adaptor.ox_utils.operators.gather.QGatherOperator"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[30, "module-neural_compressor.adaptor.ox_utils.operators.gather"]], "globalaveragepooloperator (class in neural_compressor.adaptor.ox_utils.operators.gavgpool)": [[31, "neural_compressor.adaptor.ox_utils.operators.gavgpool.GlobalAveragePoolOperator"]], "qglobalaveragepooloperator (class in neural_compressor.adaptor.ox_utils.operators.gavgpool)": [[31, "neural_compressor.adaptor.ox_utils.operators.gavgpool.QGlobalAveragePoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[31, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"]], "gemmoperator (class in neural_compressor.adaptor.ox_utils.operators.gemm)": [[32, "neural_compressor.adaptor.ox_utils.operators.gemm.GemmOperator"]], "qgemmoperator (class in neural_compressor.adaptor.ox_utils.operators.gemm)": [[32, "neural_compressor.adaptor.ox_utils.operators.gemm.QGemmOperator"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[32, "module-neural_compressor.adaptor.ox_utils.operators.gemm"]], "neural_compressor.adaptor.ox_utils.operators": [[33, "module-neural_compressor.adaptor.ox_utils.operators"]], "lstmoperator (class in neural_compressor.adaptor.ox_utils.operators.lstm)": [[34, "neural_compressor.adaptor.ox_utils.operators.lstm.LSTMOperator"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[34, "module-neural_compressor.adaptor.ox_utils.operators.lstm"]], "matmuloperator (class in neural_compressor.adaptor.ox_utils.operators.matmul)": [[35, "neural_compressor.adaptor.ox_utils.operators.matmul.MatMulOperator"]], "qmatmuloperator (class in neural_compressor.adaptor.ox_utils.operators.matmul)": [[35, "neural_compressor.adaptor.ox_utils.operators.matmul.QMatMulOperator"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[35, "module-neural_compressor.adaptor.ox_utils.operators.matmul"]], "maxpooloperator (class in neural_compressor.adaptor.ox_utils.operators.maxpool)": [[36, "neural_compressor.adaptor.ox_utils.operators.maxpool.MaxPoolOperator"]], "qmaxpooloperator (class in neural_compressor.adaptor.ox_utils.operators.maxpool)": [[36, "neural_compressor.adaptor.ox_utils.operators.maxpool.QMaxPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[36, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"]], "operator (class in neural_compressor.adaptor.ox_utils.operators.ops)": [[37, "neural_compressor.adaptor.ox_utils.operators.ops.Operator"]], "qoperator (class in neural_compressor.adaptor.ox_utils.operators.ops)": [[37, "neural_compressor.adaptor.ox_utils.operators.ops.QOperator"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[37, "module-neural_compressor.adaptor.ox_utils.operators.ops"]], "op_registry() (in module neural_compressor.adaptor.ox_utils.operators.ops)": [[37, "neural_compressor.adaptor.ox_utils.operators.ops.op_registry"]], "qop_registry() (in module neural_compressor.adaptor.ox_utils.operators.ops)": [[37, "neural_compressor.adaptor.ox_utils.operators.ops.qop_registry"]], "padoperator (class in neural_compressor.adaptor.ox_utils.operators.pad)": [[38, "neural_compressor.adaptor.ox_utils.operators.pad.PadOperator"]], "qpadoperator (class in neural_compressor.adaptor.ox_utils.operators.pad)": [[38, "neural_compressor.adaptor.ox_utils.operators.pad.QPadOperator"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[38, "module-neural_compressor.adaptor.ox_utils.operators.pad"]], "pooloperator (class in neural_compressor.adaptor.ox_utils.operators.pooling)": [[39, "neural_compressor.adaptor.ox_utils.operators.pooling.PoolOperator"]], "qpooloperator (class in neural_compressor.adaptor.ox_utils.operators.pooling)": [[39, "neural_compressor.adaptor.ox_utils.operators.pooling.QPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[39, "module-neural_compressor.adaptor.ox_utils.operators.pooling"]], "qresizeoperator (class in neural_compressor.adaptor.ox_utils.operators.resize)": [[40, "neural_compressor.adaptor.ox_utils.operators.resize.QResizeOperator"]], "resizeoperator (class in neural_compressor.adaptor.ox_utils.operators.resize)": [[40, "neural_compressor.adaptor.ox_utils.operators.resize.ResizeOperator"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[40, "module-neural_compressor.adaptor.ox_utils.operators.resize"]], "qsplitoperator (class in neural_compressor.adaptor.ox_utils.operators.split)": [[41, "neural_compressor.adaptor.ox_utils.operators.split.QSplitOperator"]], "splitoperator (class in neural_compressor.adaptor.ox_utils.operators.split)": [[41, "neural_compressor.adaptor.ox_utils.operators.split.SplitOperator"]], "neural_compressor.adaptor.ox_utils.operators.split": [[41, "module-neural_compressor.adaptor.ox_utils.operators.split"]], "quantizer (class in neural_compressor.adaptor.ox_utils.quantizer)": [[42, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer"]], "neural_compressor.adaptor.ox_utils.quantizer": [[42, "module-neural_compressor.adaptor.ox_utils.quantizer"]], "quantformat (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantFormat"]], "quanttype (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantType"]], "quantizationmode (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantizationMode"]], "quantizedinitializer (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantizedInitializer"]], "quantizedvalue (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantizedValue"]], "quantizedvaluetype (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantizedValueType"]], "valueinfo (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.ValueInfo"]], "adjust_weights_per_input() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.adjust_weights_per_input"]], "adjust_weights_per_op() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.adjust_weights_per_op"]], "attribute_to_kwarg() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.attribute_to_kwarg"]], "calculate_scale_zp() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.calculate_scale_zp"]], "cast_tensor() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.cast_tensor"]], "collate_preds() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.collate_preds"]], "dequantize_data() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.dequantize_data"]], "dequantize_data_with_scale_zero() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.dequantize_data_with_scale_zero"]], "dtype_to_name() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.dtype_to_name"]], "find_by_name() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.find_by_name"]], "float_to_bfloat16() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.float_to_bfloat16"]], "float_to_float16() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.float_to_float16"]], "get_smooth_scales_per_input() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.get_smooth_scales_per_input"]], "get_smooth_scales_per_op() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.get_smooth_scales_per_op"]], "insert_smooth_mul_op_per_input() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.insert_smooth_mul_op_per_input"]], "insert_smooth_mul_op_per_op() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.insert_smooth_mul_op_per_op"]], "is_b_transposed() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.is_B_transposed"]], "make_dquant_node() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.make_dquant_node"]], "make_quant_node() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.make_quant_node"]], "neural_compressor.adaptor.ox_utils.util": [[43, "module-neural_compressor.adaptor.ox_utils.util"]], "quantize_data() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.quantize_data"]], "quantize_data_per_channel() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.quantize_data_per_channel"]], "quantize_data_with_scale_zero() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.quantize_data_with_scale_zero"]], "quantize_nparray() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.quantize_nparray"]], "remove_init_from_model_input() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.remove_init_from_model_input"]], "split_shared_bias() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.split_shared_bias"]], "trt_env_setup() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.trt_env_setup"]], "pytorchadaptor (class in neural_compressor.adaptor.pytorch)": [[44, "neural_compressor.adaptor.pytorch.PyTorchAdaptor"]], "pytorchquery (class in neural_compressor.adaptor.pytorch)": [[44, "neural_compressor.adaptor.pytorch.PyTorchQuery"]], "pytorch_fxadaptor (class in neural_compressor.adaptor.pytorch)": [[44, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor"]], "pytorch_ipexadaptor (class in neural_compressor.adaptor.pytorch)": [[44, "neural_compressor.adaptor.pytorch.PyTorch_IPEXAdaptor"]], "templateadaptor (class in neural_compressor.adaptor.pytorch)": [[44, "neural_compressor.adaptor.pytorch.TemplateAdaptor"]], "get_ops_recursively() (in module neural_compressor.adaptor.pytorch)": [[44, "neural_compressor.adaptor.pytorch.get_ops_recursively"]], "neural_compressor.adaptor.pytorch": [[44, "module-neural_compressor.adaptor.pytorch"]], "querybackendcapability (class in neural_compressor.adaptor.query)": [[45, "neural_compressor.adaptor.query.QueryBackendCapability"]], "neural_compressor.adaptor.query": [[45, "module-neural_compressor.adaptor.query"]], "tensorflowadaptor (class in neural_compressor.adaptor.tensorflow)": [[46, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor"]], "tensorflowquery (class in neural_compressor.adaptor.tensorflow)": [[46, "neural_compressor.adaptor.tensorflow.TensorflowQuery"]], "tensorflow_itexadaptor (class in neural_compressor.adaptor.tensorflow)": [[46, "neural_compressor.adaptor.tensorflow.Tensorflow_ITEXAdaptor"]], "neural_compressor.adaptor.tensorflow": [[46, "module-neural_compressor.adaptor.tensorflow"]], "graphconverter (class in neural_compressor.adaptor.tf_utils.graph_converter)": [[47, "neural_compressor.adaptor.tf_utils.graph_converter.GraphConverter"]], "neural_compressor.adaptor.tf_utils.graph_converter": [[47, "module-neural_compressor.adaptor.tf_utils.graph_converter"]], "graphconverterwithoutcalib (class in neural_compressor.adaptor.tf_utils.graph_converter_without_calib)": [[48, "neural_compressor.adaptor.tf_utils.graph_converter_without_calib.GraphConverterWithoutCalib"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[48, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"]], "bf16convert (class in neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert)": [[49, "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert.BF16Convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[49, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[50, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"]], "convertaddtobiasaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd)": [[51, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd.ConvertAddToBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[51, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"]], "convertlayoutoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout)": [[52, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout.ConvertLayoutOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[52, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"]], "convertleakyreluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu)": [[53, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu.ConvertLeakyReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[53, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"]], "convertnantorandom (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random)": [[54, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random.ConvertNanToRandom"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[54, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"]], "convertplaceholdertoconst (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const)": [[55, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const.ConvertPlaceholderToConst"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[55, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"]], "dequantizecastoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer)": [[56, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer.DequantizeCastOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer": [[56, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer"]], "dilatedcontraction (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction)": [[57, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction.DilatedContraction"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[57, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"]], "injectdummybiasaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd)": [[58, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd.InjectDummyBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[58, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"]], "expanddimsoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer)": [[59, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer.ExpandDimsOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[59, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"]], "fetchweightfromreshapeoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape)": [[60, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape.FetchWeightFromReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[60, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"]], "foldbatchnormnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm)": [[61, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm.FoldBatchNormNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[61, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"]], "graphfoldconstantoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant)": [[62, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.GraphFoldConstantOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[62, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"]], "fusebiasaddandaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add)": [[63, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add.FuseBiasAddAndAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[63, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"]], "fusecolumnwisemuloptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul)": [[64, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul.FuseColumnWiseMulOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[64, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"]], "fuseconvwithmathoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math)": [[65, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math.FuseConvWithMathOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[65, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"]], "fusedecomposedbnoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[66, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.FuseDecomposedBNOptimizer"]], "bypass_reshape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[66, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.bypass_reshape"]], "get_const_dim_count() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[66, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.get_const_dim_count"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[66, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[66, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[66, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.node_name_from_input"]], "valid_reshape_inputs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[66, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.valid_reshape_inputs"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[66, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.values_from_const"]], "fusedecomposedinoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.FuseDecomposedINOptimizer"]], "bypass_reshape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.bypass_reshape"]], "get_const_dim_count() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.get_const_dim_count"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[67, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.node_name_from_input"]], "valid_reshape_inputs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.valid_reshape_inputs"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.values_from_const"]], "fusegeluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu)": [[68, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu.FuseGeluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[68, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"]], "fuselayernormoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[69, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.FuseLayerNormOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[69, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[69, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[69, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.node_name_from_input"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[69, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.values_from_const"]], "fusepadwithconv2doptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv)": [[70, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv.FusePadWithConv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[70, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"]], "fusepadwithfp32conv2doptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv)": [[71, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv.FusePadWithFP32Conv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[71, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"]], "fusetransposereshapeoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose)": [[72, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose.FuseTransposeReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[72, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"]], "graphcseoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer)": [[73, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer.GraphCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[73, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"]], "grappleroptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass)": [[74, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass.GrapplerOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[74, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[75, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"]], "insertprintminmaxnode (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node)": [[76, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node.InsertPrintMinMaxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[76, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"]], "movesqueezeafterreluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu)": [[77, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu.MoveSqueezeAfterReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"]], "preoptimization (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize)": [[78, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize.PreOptimization"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"]], "removetrainingnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes)": [[79, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes.RemoveTrainingNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"]], "renamebatchnormoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm)": [[80, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm.RenameBatchNormOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"]], "splitsharedinputoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input)": [[81, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input.SplitSharedInputOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"]], "stripequivalentnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes)": [[82, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes.StripEquivalentNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"]], "stripunusednodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes)": [[83, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes.StripUnusedNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"]], "switchoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer)": [[84, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer.SwitchOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"]], "graphrewriterbase (class in neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base)": [[85, "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base.GraphRewriterBase"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"]], "freezefakequantopoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant)": [[87, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant.FreezeFakeQuantOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"]], "freezevaluetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value)": [[88, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.FreezeValueTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"]], "freezevaluewithoutcalibtransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib)": [[89, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.FreezeValueWithoutCalibTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"]], "fuseconvredundantdequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize)": [[90, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize.FuseConvRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"]], "fuseconvrequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize.FuseConvRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"]], "fusematmulredundantdequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize)": [[92, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize.FuseMatMulRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"]], "fusematmulrequantizedequantizenewapitransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[93, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeNewAPITransformer"]], "fusematmulrequantizedequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[93, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeTransformer"]], "fusematmulrequantizenewapitransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[93, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeNewAPITransformer"]], "fusematmulrequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[93, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"]], "metainfochangingmemopoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer)": [[95, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer.MetaInfoChangingMemOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"]], "posthostconstconverter (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter.PostHostConstConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[96, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"]], "postcseoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse)": [[97, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse.PostCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[97, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"]], "quantizedrnnconverter (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert.QuantizedRNNConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[98, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"]], "scalepropagationtransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation.ScaleProPagationTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[99, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx": [[100, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx"]], "onnxgraph (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph)": [[101, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph": [[101, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph"]], "onnxnode (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node)": [[102, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node": [[102, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node"]], "onnxopschema (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema)": [[103, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.OnnxOpSchema"]], "get_max_supported_opset_version() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema)": [[103, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.get_max_supported_opset_version"]], "get_schema() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema)": [[103, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.get_schema"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema": [[103, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema"]], "seqtype (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.SeqType"]], "add_port_to_name() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.add_port_to_name"]], "are_shapes_equal() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.are_shapes_equal"]], "assert_error() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.assert_error"]], "compute_const_folding_using_tf() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.compute_const_folding_using_tf"]], "convert_tensorflow_tensor_to_onnx() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.convert_tensorflow_tensor_to_onnx"]], "find_opset() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.find_opset"]], "get_index_from_strided_slice_of_shape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_index_from_strided_slice_of_shape"]], "get_subgraphs_from_onnx() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_subgraphs_from_onnx"]], "get_tensorflow_node_attr() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_node_attr"]], "get_tensorflow_node_shape_attr() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_node_shape_attr"]], "get_tensorflow_tensor_data() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_tensor_data"]], "get_tensorflow_tensor_shape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_tensor_shape"]], "infer_onnx_shape_dtype() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.infer_onnx_shape_dtype"]], "initialize_name_counter() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.initialize_name_counter"]], "is_list_or_tuple() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.is_list_or_tuple"]], "is_onnx_domain() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.is_onnx_domain"]], "make_onnx_inputs_outputs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.make_onnx_inputs_outputs"]], "make_onnx_shape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.make_onnx_shape"]], "map_numpy_to_onnx_dtype() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.map_numpy_to_onnx_dtype"]], "map_onnx_to_numpy_type() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.map_onnx_to_numpy_type"]], "map_tensorflow_dtype() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.map_tensorflow_dtype"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils": [[104, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils"]], "read_tensorflow_node_attrs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.read_tensorflow_node_attrs"]], "save_protobuf() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.save_protobuf"]], "set_name() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.set_name"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[105, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"]], "generategraphwithqdqpattern (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern)": [[106, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern.GenerateGraphWithQDQPattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[106, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"]], "mergeduplicatedqdqoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq)": [[107, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq.MergeDuplicatedQDQOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[107, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"]], "shareqdqforitexypatternoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern)": [[108, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern.ShareQDQForItexYPatternOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[108, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"]], "graphanalyzer (class in neural_compressor.adaptor.tf_utils.graph_util)": [[109, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer"]], "graphrewriterhelper (class in neural_compressor.adaptor.tf_utils.graph_util)": [[109, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper"]], "neural_compressor.adaptor.tf_utils.graph_util": [[109, "module-neural_compressor.adaptor.tf_utils.graph_util"]], "neural_compressor.adaptor.tf_utils": [[110, "module-neural_compressor.adaptor.tf_utils"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[111, "module-neural_compressor.adaptor.tf_utils.quantize_graph"]], "fakequantize (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize)": [[112, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantize"]], "fakequantizebase (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize)": [[112, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantizeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[112, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[113, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat"]], "quantizeconfig (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config)": [[114, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[114, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config"]], "init_quantize_config() (in module neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper)": [[115, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper.init_quantize_config"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[115, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper"]], "qat_clone_function() (in module neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper)": [[115, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper.qat_clone_function"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[116, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers"]], "config_quantizable_layers() (in module neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer)": [[117, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer.config_quantizable_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer": [[117, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer"]], "quantizelayeradd (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add)": [[118, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add.QuantizeLayerAdd"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[118, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add"]], "quantizelayerbase (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base)": [[119, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base.QuantizeLayerBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[119, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base"]], "quantizelayerbatchnormalization (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn)": [[120, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn.QuantizeLayerBatchNormalization"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[120, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"]], "quantizewrapper (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper)": [[121, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapper"]], "quantizewrapperbase (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper)": [[121, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[121, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper"]], "fusenodestartwithfusedbatchnormv3 (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn)": [[122, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[122, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"]], "fusenodestartwithconcatv2 (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2)": [[123, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2.FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[123, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"]], "fusenodestartwithconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv)": [[124, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[124, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"]], "fusenodestartwithdeconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv)": [[125, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.FuseNodeStartWithDeconv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[125, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"]], "fusenodestartwithfusedinstancenorm (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in)": [[126, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.FuseNodeStartWithFusedInstanceNorm"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[126, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"]], "fusenodestartwithmatmul (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul)": [[127, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[127, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"]], "fusenodestartwithpooling (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling)": [[128, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling.FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[128, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[129, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"]], "optimizeqdqgraph (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq)": [[130, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq.OptimizeQDQGraph"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[130, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"]], "quantizegraphbase (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base)": [[131, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeGraphBase"]], "quantizenodebase (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base)": [[131, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[131, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"]], "fusenodestartwithfusedbatchnormv3 (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn)": [[132, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[132, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"]], "fusenodestartwithconcatv2 (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2)": [[133, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2.FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[133, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"]], "fusenodestartwithconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv)": [[134, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[134, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"]], "quantizegraphforintel (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu)": [[135, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu.QuantizeGraphForIntel"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[135, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"]], "fusenodestartwithmatmul (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul)": [[136, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[136, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"]], "fusenodestartwithpooling (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling)": [[137, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling.FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[137, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"]], "quantizegraphhelper (class in neural_compressor.adaptor.tf_utils.quantize_graph_common)": [[138, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[138, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"]], "tensorflowqdqtoonnxqdqconverter (class in neural_compressor.adaptor.tf_utils.tf2onnx_converter)": [[139, "neural_compressor.adaptor.tf_utils.tf2onnx_converter.TensorflowQDQToOnnxQDQConverter"]], "neural_compressor.adaptor.tf_utils.tf2onnx_converter": [[139, "module-neural_compressor.adaptor.tf_utils.tf2onnx_converter"]], "biascorrection (class in neural_compressor.adaptor.tf_utils.transform_graph.bias_correction)": [[140, "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction.BiasCorrection"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[140, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"]], "graphtransformbase (class in neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base)": [[141, "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base.GraphTransformBase"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[141, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[142, "module-neural_compressor.adaptor.tf_utils.transform_graph"]], "insertlogging (class in neural_compressor.adaptor.tf_utils.transform_graph.insert_logging)": [[143, "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging.InsertLogging"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[143, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"]], "rerangequantizedconcat (class in neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat)": [[144, "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat.RerangeQuantizedConcat"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[144, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"]], "collate_tf_preds() (in module neural_compressor.adaptor.tf_utils.util)": [[145, "neural_compressor.adaptor.tf_utils.util.collate_tf_preds"]], "disable_random() (in module neural_compressor.adaptor.tf_utils.util)": [[145, "neural_compressor.adaptor.tf_utils.util.disable_random"]], "fix_ref_type_of_graph_def() (in module neural_compressor.adaptor.tf_utils.util)": [[145, "neural_compressor.adaptor.tf_utils.util.fix_ref_type_of_graph_def"]], "generate_feed_dict() (in module neural_compressor.adaptor.tf_utils.util)": [[145, "neural_compressor.adaptor.tf_utils.util.generate_feed_dict"]], "get_estimator_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[145, "neural_compressor.adaptor.tf_utils.util.get_estimator_graph"]], "get_graph_def() (in module neural_compressor.adaptor.tf_utils.util)": [[145, "neural_compressor.adaptor.tf_utils.util.get_graph_def"]], "get_input_output_node_names() (in module neural_compressor.adaptor.tf_utils.util)": [[145, "neural_compressor.adaptor.tf_utils.util.get_input_output_node_names"]], "get_model_input_shape() (in module neural_compressor.adaptor.tf_utils.util)": [[145, "neural_compressor.adaptor.tf_utils.util.get_model_input_shape"]], "get_tensor_by_name() (in module neural_compressor.adaptor.tf_utils.util)": [[145, "neural_compressor.adaptor.tf_utils.util.get_tensor_by_name"]], "get_tensor_val_from_graph_node() (in module neural_compressor.adaptor.tf_utils.util)": [[145, "neural_compressor.adaptor.tf_utils.util.get_tensor_val_from_graph_node"]], "int8_node_name_reverse() (in module neural_compressor.adaptor.tf_utils.util)": [[145, "neural_compressor.adaptor.tf_utils.util.int8_node_name_reverse"]], "is_ckpt_format() (in module neural_compressor.adaptor.tf_utils.util)": [[145, "neural_compressor.adaptor.tf_utils.util.is_ckpt_format"]], "is_saved_model_format() (in module neural_compressor.adaptor.tf_utils.util)": [[145, "neural_compressor.adaptor.tf_utils.util.is_saved_model_format"]], "iterator_sess_run() (in module neural_compressor.adaptor.tf_utils.util)": [[145, "neural_compressor.adaptor.tf_utils.util.iterator_sess_run"]], "neural_compressor.adaptor.tf_utils.util": [[145, "module-neural_compressor.adaptor.tf_utils.util"]], "read_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[145, "neural_compressor.adaptor.tf_utils.util.read_graph"]], "strip_equivalent_nodes() (in module neural_compressor.adaptor.tf_utils.util)": [[145, "neural_compressor.adaptor.tf_utils.util.strip_equivalent_nodes"]], "strip_unused_nodes() (in module neural_compressor.adaptor.tf_utils.util)": [[145, "neural_compressor.adaptor.tf_utils.util.strip_unused_nodes"]], "tf_diagnosis_helper() (in module neural_compressor.adaptor.tf_utils.util)": [[145, "neural_compressor.adaptor.tf_utils.util.tf_diagnosis_helper"]], "version1_eq_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[145, "neural_compressor.adaptor.tf_utils.util.version1_eq_version2"]], "version1_gt_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[145, "neural_compressor.adaptor.tf_utils.util.version1_gt_version2"]], "version1_gte_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[145, "neural_compressor.adaptor.tf_utils.util.version1_gte_version2"]], "version1_lt_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[145, "neural_compressor.adaptor.tf_utils.util.version1_lt_version2"]], "version1_lte_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[145, "neural_compressor.adaptor.tf_utils.util.version1_lte_version2"]], "write_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[145, "neural_compressor.adaptor.tf_utils.util.write_graph"]], "bf16modulewrapper (class in neural_compressor.adaptor.torch_utils.bf16_convert)": [[146, "neural_compressor.adaptor.torch_utils.bf16_convert.BF16ModuleWrapper"]], "convert() (in module neural_compressor.adaptor.torch_utils.bf16_convert)": [[146, "neural_compressor.adaptor.torch_utils.bf16_convert.Convert"]], "bf16_symbolic_trace() (in module neural_compressor.adaptor.torch_utils.bf16_convert)": [[146, "neural_compressor.adaptor.torch_utils.bf16_convert.bf16_symbolic_trace"]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[146, "module-neural_compressor.adaptor.torch_utils.bf16_convert"]], "hessiantrace (class in neural_compressor.adaptor.torch_utils.hawq_metric)": [[147, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace"]], "node_collector (class in neural_compressor.adaptor.torch_utils.hawq_metric)": [[147, "neural_compressor.adaptor.torch_utils.hawq_metric.Node_collector"]], "compare_weights() (in module neural_compressor.adaptor.torch_utils.hawq_metric)": [[147, "neural_compressor.adaptor.torch_utils.hawq_metric.compare_weights"]], "hawq_top() (in module neural_compressor.adaptor.torch_utils.hawq_metric)": [[147, "neural_compressor.adaptor.torch_utils.hawq_metric.hawq_top"]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[147, "module-neural_compressor.adaptor.torch_utils.hawq_metric"]], "neural_compressor.adaptor.torch_utils": [[148, "module-neural_compressor.adaptor.torch_utils"]], "neural_compressor.adaptor.torch_utils.model_wrapper": [[149, "module-neural_compressor.adaptor.torch_utils.model_wrapper"]], "graphtrace (class in neural_compressor.adaptor.torch_utils.smooth_quant)": [[150, "neural_compressor.adaptor.torch_utils.smooth_quant.GraphTrace"]], "torchsmoothquant (class in neural_compressor.adaptor.torch_utils.smooth_quant)": [[150, "neural_compressor.adaptor.torch_utils.smooth_quant.TorchSmoothQuant"]], "get_module() (in module neural_compressor.adaptor.torch_utils.smooth_quant)": [[150, "neural_compressor.adaptor.torch_utils.smooth_quant.get_module"]], "neural_compressor.adaptor.torch_utils.smooth_quant": [[150, "module-neural_compressor.adaptor.torch_utils.smooth_quant"]], "set_module() (in module neural_compressor.adaptor.torch_utils.smooth_quant)": [[150, "neural_compressor.adaptor.torch_utils.smooth_quant.set_module"]], "update_sq_scale() (in module neural_compressor.adaptor.torch_utils.smooth_quant)": [[150, "neural_compressor.adaptor.torch_utils.smooth_quant.update_sq_scale"]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[151, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"]], "symbolic_trace() (in module neural_compressor.adaptor.torch_utils.symbolic_trace)": [[151, "neural_compressor.adaptor.torch_utils.symbolic_trace.symbolic_trace"]], "trace_and_fuse_sub_graph() (in module neural_compressor.adaptor.torch_utils.symbolic_trace)": [[151, "neural_compressor.adaptor.torch_utils.symbolic_trace.trace_and_fuse_sub_graph"]], "append_attr() (in module neural_compressor.adaptor.torch_utils.util)": [[152, "neural_compressor.adaptor.torch_utils.util.append_attr"]], "auto_copy() (in module neural_compressor.adaptor.torch_utils.util)": [[152, "neural_compressor.adaptor.torch_utils.util.auto_copy"]], "calculate_quant_min_max() (in module neural_compressor.adaptor.torch_utils.util)": [[152, "neural_compressor.adaptor.torch_utils.util.calculate_quant_min_max"]], "check_cfg_and_qconfig() (in module neural_compressor.adaptor.torch_utils.util)": [[152, "neural_compressor.adaptor.torch_utils.util.check_cfg_and_qconfig"]], "collate_torch_preds() (in module neural_compressor.adaptor.torch_utils.util)": [[152, "neural_compressor.adaptor.torch_utils.util.collate_torch_preds"]], "fetch_module() (in module neural_compressor.adaptor.torch_utils.util)": [[152, "neural_compressor.adaptor.torch_utils.util.fetch_module"]], "generate_activation_observer() (in module neural_compressor.adaptor.torch_utils.util)": [[152, "neural_compressor.adaptor.torch_utils.util.generate_activation_observer"]], "get_embedding_contiguous() (in module neural_compressor.adaptor.torch_utils.util)": [[152, "neural_compressor.adaptor.torch_utils.util.get_embedding_contiguous"]], "get_example_input() (in module neural_compressor.adaptor.torch_utils.util)": [[152, "neural_compressor.adaptor.torch_utils.util.get_example_input"]], "get_fallback_order() (in module neural_compressor.adaptor.torch_utils.util)": [[152, "neural_compressor.adaptor.torch_utils.util.get_fallback_order"]], "get_mse_order_per_fp32() (in module neural_compressor.adaptor.torch_utils.util)": [[152, "neural_compressor.adaptor.torch_utils.util.get_mse_order_per_fp32"]], "get_mse_order_per_int8() (in module neural_compressor.adaptor.torch_utils.util)": [[152, "neural_compressor.adaptor.torch_utils.util.get_mse_order_per_int8"]], "get_quantizable_ops_from_cfgs() (in module neural_compressor.adaptor.torch_utils.util)": [[152, "neural_compressor.adaptor.torch_utils.util.get_quantizable_ops_from_cfgs"]], "get_torch_version() (in module neural_compressor.adaptor.torch_utils.util)": [[152, "neural_compressor.adaptor.torch_utils.util.get_torch_version"]], "input2tuple() (in module neural_compressor.adaptor.torch_utils.util)": [[152, "neural_compressor.adaptor.torch_utils.util.input2tuple"]], "is_fused_module() (in module neural_compressor.adaptor.torch_utils.util)": [[152, "neural_compressor.adaptor.torch_utils.util.is_fused_module"]], "match_datatype_pattern() (in module neural_compressor.adaptor.torch_utils.util)": [[152, "neural_compressor.adaptor.torch_utils.util.match_datatype_pattern"]], "neural_compressor.adaptor.torch_utils.util": [[152, "module-neural_compressor.adaptor.torch_utils.util"]], "paser_cfgs() (in module neural_compressor.adaptor.torch_utils.util)": [[152, "neural_compressor.adaptor.torch_utils.util.paser_cfgs"]], "set_module() (in module neural_compressor.adaptor.torch_utils.util)": [[152, "neural_compressor.adaptor.torch_utils.util.set_module"]], "simple_inference() (in module neural_compressor.adaptor.torch_utils.util)": [[152, "neural_compressor.adaptor.torch_utils.util.simple_inference"]], "algorithms (class in neural_compressor.algorithm.algorithm)": [[153, "neural_compressor.algorithm.algorithm.ALGORITHMS"]], "algorithm (class in neural_compressor.algorithm.algorithm)": [[153, "neural_compressor.algorithm.algorithm.Algorithm"]], "algorithmscheduler (class in neural_compressor.algorithm.algorithm)": [[153, "neural_compressor.algorithm.algorithm.AlgorithmScheduler"]], "algorithm_registry() (in module neural_compressor.algorithm.algorithm)": [[153, "neural_compressor.algorithm.algorithm.algorithm_registry"]], "neural_compressor.algorithm.algorithm": [[153, "module-neural_compressor.algorithm.algorithm"]], "fastbiascorrection (class in neural_compressor.algorithm.fast_bias_correction)": [[154, "neural_compressor.algorithm.fast_bias_correction.FastBiasCorrection"]], "neural_compressor.algorithm.fast_bias_correction": [[154, "module-neural_compressor.algorithm.fast_bias_correction"]], "neural_compressor.algorithm": [[155, "module-neural_compressor.algorithm"]], "smoothquant (class in neural_compressor.algorithm.smooth_quant)": [[156, "neural_compressor.algorithm.smooth_quant.SmoothQuant"]], "neural_compressor.algorithm.smooth_quant": [[156, "module-neural_compressor.algorithm.smooth_quant"]], "weightcorrection (class in neural_compressor.algorithm.weight_correction)": [[157, "neural_compressor.algorithm.weight_correction.WeightCorrection"]], "neural_compressor.algorithm.weight_correction": [[157, "module-neural_compressor.algorithm.weight_correction"]], "fit() (in module neural_compressor.benchmark)": [[158, "neural_compressor.benchmark.fit"]], "get_architecture() (in module neural_compressor.benchmark)": [[158, "neural_compressor.benchmark.get_architecture"]], "get_bounded_threads() (in module neural_compressor.benchmark)": [[158, "neural_compressor.benchmark.get_bounded_threads"]], "get_core_ids() (in module neural_compressor.benchmark)": [[158, "neural_compressor.benchmark.get_core_ids"]], "get_physical_ids() (in module neural_compressor.benchmark)": [[158, "neural_compressor.benchmark.get_physical_ids"]], "get_threads() (in module neural_compressor.benchmark)": [[158, "neural_compressor.benchmark.get_threads"]], "get_threads_per_core() (in module neural_compressor.benchmark)": [[158, "neural_compressor.benchmark.get_threads_per_core"]], "neural_compressor.benchmark": [[158, "module-neural_compressor.benchmark"]], "set_all_env_var() (in module neural_compressor.benchmark)": [[158, "neural_compressor.benchmark.set_all_env_var"]], "set_env_var() (in module neural_compressor.benchmark)": [[158, "neural_compressor.benchmark.set_env_var"]], "basecallbacks (class in neural_compressor.compression.callbacks)": [[159, "neural_compressor.compression.callbacks.BaseCallbacks"]], "distillationcallbacks (class in neural_compressor.compression.callbacks)": [[159, "neural_compressor.compression.callbacks.DistillationCallbacks"]], "pruningcallbacks (class in neural_compressor.compression.callbacks)": [[159, "neural_compressor.compression.callbacks.PruningCallbacks"]], "quantizationawaretrainingcallbacks (class in neural_compressor.compression.callbacks)": [[159, "neural_compressor.compression.callbacks.QuantizationAwareTrainingCallbacks"]], "_epoch_ran (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[159, "neural_compressor.compression.callbacks.DistillationCallbacks._epoch_ran"]], "best_model (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[159, "neural_compressor.compression.callbacks.DistillationCallbacks.best_model"]], "best_score (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[159, "neural_compressor.compression.callbacks.DistillationCallbacks.best_score"]], "eval_frequency (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[159, "neural_compressor.compression.callbacks.DistillationCallbacks.eval_frequency"]], "neural_compressor.compression.callbacks": [[159, "module-neural_compressor.compression.callbacks"]], "criterions (class in neural_compressor.compression.distillation.criterions)": [[160, "neural_compressor.compression.distillation.criterions.Criterions"]], "intermediatelayersknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[160, "neural_compressor.compression.distillation.criterions.IntermediateLayersKnowledgeDistillationLoss"]], "knowledgedistillationframework (class in neural_compressor.compression.distillation.criterions)": [[160, "neural_compressor.compression.distillation.criterions.KnowledgeDistillationFramework"]], "knowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[160, "neural_compressor.compression.distillation.criterions.KnowledgeDistillationLoss"]], "pytorchcriterions (class in neural_compressor.compression.distillation.criterions)": [[160, "neural_compressor.compression.distillation.criterions.PyTorchCriterions"]], "pytorchintermediatelayersknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[160, "neural_compressor.compression.distillation.criterions.PyTorchIntermediateLayersKnowledgeDistillationLoss"]], "pytorchintermediatelayersknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[160, "neural_compressor.compression.distillation.criterions.PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"]], "pytorchknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[160, "neural_compressor.compression.distillation.criterions.PyTorchKnowledgeDistillationLoss"]], "pytorchknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[160, "neural_compressor.compression.distillation.criterions.PyTorchKnowledgeDistillationLossWrapper"]], "pytorchselfknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[160, "neural_compressor.compression.distillation.criterions.PyTorchSelfKnowledgeDistillationLoss"]], "pytorchselfknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[160, "neural_compressor.compression.distillation.criterions.PyTorchSelfKnowledgeDistillationLossWrapper"]], "selfknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[160, "neural_compressor.compression.distillation.criterions.SelfKnowledgeDistillationLoss"]], "tensorflowcriterions (class in neural_compressor.compression.distillation.criterions)": [[160, "neural_compressor.compression.distillation.criterions.TensorflowCriterions"]], "tensorflowknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[160, "neural_compressor.compression.distillation.criterions.TensorflowKnowledgeDistillationLoss"]], "tensorflowknowledgedistillationlossexternal (class in neural_compressor.compression.distillation.criterions)": [[160, "neural_compressor.compression.distillation.criterions.TensorflowKnowledgeDistillationLossExternal"]], "tensorflowknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[160, "neural_compressor.compression.distillation.criterions.TensorflowKnowledgeDistillationLossWrapper"]], "criterion_registry() (in module neural_compressor.compression.distillation.criterions)": [[160, "neural_compressor.compression.distillation.criterions.criterion_registry"]], "neural_compressor.compression.distillation.criterions": [[160, "module-neural_compressor.compression.distillation.criterions"]], "neural_compressor.compression.distillation": [[161, "module-neural_compressor.compression.distillation"]], "neural_compressor.compression": [[162, "module-neural_compressor.compression"]], "gradientcriterion (class in neural_compressor.compression.pruner.criteria)": [[163, "neural_compressor.compression.pruner.criteria.GradientCriterion"]], "magnitudecriterion (class in neural_compressor.compression.pruner.criteria)": [[163, "neural_compressor.compression.pruner.criteria.MagnitudeCriterion"]], "pruningcriterion (class in neural_compressor.compression.pruner.criteria)": [[163, "neural_compressor.compression.pruner.criteria.PruningCriterion"]], "retrainfreecriterion (class in neural_compressor.compression.pruner.criteria)": [[163, "neural_compressor.compression.pruner.criteria.RetrainFreeCriterion"]], "snipcriterion (class in neural_compressor.compression.pruner.criteria)": [[163, "neural_compressor.compression.pruner.criteria.SnipCriterion"]], "snipmomentumblockcriterion (class in neural_compressor.compression.pruner.criteria)": [[163, "neural_compressor.compression.pruner.criteria.SnipMomentumBlockCriterion"]], "snipmomentumcriterion (class in neural_compressor.compression.pruner.criteria)": [[163, "neural_compressor.compression.pruner.criteria.SnipMomentumCriterion"]], "get_criterion() (in module neural_compressor.compression.pruner.criteria)": [[163, "neural_compressor.compression.pruner.criteria.get_criterion"]], "neural_compressor.compression.pruner.criteria": [[163, "module-neural_compressor.compression.pruner.criteria"]], "register_criterion() (in module neural_compressor.compression.pruner.criteria)": [[163, "neural_compressor.compression.pruner.criteria.register_criterion"]], "scores (neural_compressor.compression.pruner.criteria.gradientcriterion attribute)": [[163, "neural_compressor.compression.pruner.criteria.GradientCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.magnitudecriterion attribute)": [[163, "neural_compressor.compression.pruner.criteria.MagnitudeCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.pruningcriterion attribute)": [[163, "neural_compressor.compression.pruner.criteria.PruningCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.retrainfreecriterion attribute)": [[163, "neural_compressor.compression.pruner.criteria.RetrainFreeCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.snipcriterion attribute)": [[163, "neural_compressor.compression.pruner.criteria.SnipCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.snipmomentumblockcriterion attribute)": [[163, "neural_compressor.compression.pruner.criteria.SnipMomentumBlockCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.snipmomentumcriterion attribute)": [[163, "neural_compressor.compression.pruner.criteria.SnipMomentumCriterion.scores"]], "neural_compressor.compression.pruner": [[164, "module-neural_compressor.compression.pruner"]], "generate_ffn2_pruning_config() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[165, "neural_compressor.compression.pruner.model_slim.auto_slim.generate_ffn2_pruning_config"]], "generate_mha_pruning_config() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[165, "neural_compressor.compression.pruner.model_slim.auto_slim.generate_mha_pruning_config"]], "model_slim() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[165, "neural_compressor.compression.pruner.model_slim.auto_slim.model_slim"]], "model_slim_ffn2() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[165, "neural_compressor.compression.pruner.model_slim.auto_slim.model_slim_ffn2"]], "model_slim_mha() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[165, "neural_compressor.compression.pruner.model_slim.auto_slim.model_slim_mha"]], "neural_compressor.compression.pruner.model_slim.auto_slim": [[165, "module-neural_compressor.compression.pruner.model_slim.auto_slim"]], "parse_auto_slim_config() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[165, "neural_compressor.compression.pruner.model_slim.auto_slim.parse_auto_slim_config"]], "neural_compressor.compression.pruner.model_slim": [[166, "module-neural_compressor.compression.pruner.model_slim"]], "classifierheadsearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[167, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher"]], "jitbasicsearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[167, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher"]], "linear2linearsearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[167, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher"]], "recipesearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[167, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher"]], "selfmhasearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[167, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher"]], "current_pattern (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[167, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.current_pattern"]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearcher attribute)": [[167, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher.device"]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[167, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.device"]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[167, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.device"]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.selfmhasearcher attribute)": [[167, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher.device"]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearcher attribute)": [[167, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher.flatten_static_graph"]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[167, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.flatten_static_graph"]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[167, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.flatten_static_graph"]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.selfmhasearcher attribute)": [[167, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher.flatten_static_graph"]], "get_attributes() (in module neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[167, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.get_attributes"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearcher attribute)": [[167, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher.model"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[167, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.model"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[167, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.model"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.recipesearcher attribute)": [[167, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher.model"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.selfmhasearcher attribute)": [[167, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher.model"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer": [[167, "module-neural_compressor.compression.pruner.model_slim.pattern_analyzer"]], "print_iterables() (in module neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[167, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.print_iterables"]], "recipe (neural_compressor.compression.pruner.model_slim.pattern_analyzer.recipesearcher attribute)": [[167, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher.recipe"]], "searching_results (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[167, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.searching_results"]], "searching_results (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[167, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.searching_results"]], "searching_results (neural_compressor.compression.pruner.model_slim.pattern_analyzer.recipesearcher attribute)": [[167, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher.searching_results"]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearcher attribute)": [[167, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher.static_graph"]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[167, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.static_graph"]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[167, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.static_graph"]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.selfmhasearcher attribute)": [[167, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher.static_graph"]], "target_layers (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[167, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.target_layers"]], "target_layers (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[167, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.target_layers"]], "target_op_lut (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[167, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.target_op_lut"]], "targets (neural_compressor.compression.pruner.model_slim.pattern_analyzer.recipesearcher attribute)": [[167, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher.targets"]], "linearcompression (class in neural_compressor.compression.pruner.model_slim.weight_slim)": [[168, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression"]], "linearcompressioniterator (class in neural_compressor.compression.pruner.model_slim.weight_slim)": [[168, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompressionIterator"]], "mhacompression (class in neural_compressor.compression.pruner.model_slim.weight_slim)": [[168, "neural_compressor.compression.pruner.model_slim.weight_slim.MHACompression"]], "postcompressionutils (class in neural_compressor.compression.pruner.model_slim.weight_slim)": [[168, "neural_compressor.compression.pruner.model_slim.weight_slim.PostCompressionUtils"]], "device (neural_compressor.compression.pruner.model_slim.weight_slim.linearcompression attribute)": [[168, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression.device"]], "layer_1 (neural_compressor.compression.pruner.model_slim.weight_slim.linearcompression attribute)": [[168, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression.layer_1"]], "layer_2 (neural_compressor.compression.pruner.model_slim.weight_slim.linearcompression attribute)": [[168, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression.layer_2"]], "linear_patterns (neural_compressor.compression.pruner.model_slim.weight_slim.linearcompressioniterator attribute)": [[168, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompressionIterator.linear_patterns"]], "neural_compressor.compression.pruner.model_slim.weight_slim": [[168, "module-neural_compressor.compression.pruner.model_slim.weight_slim"]], "basepattern (class in neural_compressor.compression.pruner.patterns)": [[169, "neural_compressor.compression.pruner.patterns.BasePattern"]], "m (neural_compressor.compression.pruner.patterns.patternninm attribute)": [[169, "neural_compressor.compression.pruner.patterns.PatternNInM.M"]], "n (neural_compressor.compression.pruner.patterns.patternninm attribute)": [[169, "neural_compressor.compression.pruner.patterns.PatternNInM.N"]], "patternninm (class in neural_compressor.compression.pruner.patterns)": [[169, "neural_compressor.compression.pruner.patterns.PatternNInM"]], "patternnxm (class in neural_compressor.compression.pruner.patterns)": [[169, "neural_compressor.compression.pruner.patterns.PatternNxM"]], "block_size (neural_compressor.compression.pruner.patterns.patternnxm attribute)": [[169, "neural_compressor.compression.pruner.patterns.PatternNxM.block_size"]], "config (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[169, "neural_compressor.compression.pruner.patterns.BasePattern.config"]], "get_pattern() (in module neural_compressor.compression.pruner.patterns)": [[169, "neural_compressor.compression.pruner.patterns.get_pattern"]], "invalid_layers (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[169, "neural_compressor.compression.pruner.patterns.BasePattern.invalid_layers"]], "is_global (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[169, "neural_compressor.compression.pruner.patterns.BasePattern.is_global"]], "keep_mask_layers (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[169, "neural_compressor.compression.pruner.patterns.BasePattern.keep_mask_layers"]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[169, "neural_compressor.compression.pruner.patterns.BasePattern.max_sparsity_ratio_per_op"]], "min_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[169, "neural_compressor.compression.pruner.patterns.BasePattern.min_sparsity_ratio_per_op"]], "modules (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[169, "neural_compressor.compression.pruner.patterns.BasePattern.modules"]], "neural_compressor.compression.pruner.patterns": [[169, "module-neural_compressor.compression.pruner.patterns"]], "pattern (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[169, "neural_compressor.compression.pruner.patterns.BasePattern.pattern"]], "register_pattern() (in module neural_compressor.compression.pruner.patterns)": [[169, "neural_compressor.compression.pruner.patterns.register_pattern"]], "target_sparsity (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[169, "neural_compressor.compression.pruner.patterns.BasePattern.target_sparsity"]], "basepruner (class in neural_compressor.compression.pruner.pruners)": [[170, "neural_compressor.compression.pruner.pruners.BasePruner"]], "basicpruner (class in neural_compressor.compression.pruner.pruners)": [[170, "neural_compressor.compression.pruner.pruners.BasicPruner"]], "blockmaskpruner (class in neural_compressor.compression.pruner.pruners)": [[170, "neural_compressor.compression.pruner.pruners.BlockMaskPruner"]], "patternlockpruner (class in neural_compressor.compression.pruner.pruners)": [[170, "neural_compressor.compression.pruner.pruners.PatternLockPruner"]], "progressivepruner (class in neural_compressor.compression.pruner.pruners)": [[170, "neural_compressor.compression.pruner.pruners.ProgressivePruner"]], "retrainfreepruner (class in neural_compressor.compression.pruner.pruners)": [[170, "neural_compressor.compression.pruner.pruners.RetrainFreePruner"]], "config (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[170, "neural_compressor.compression.pruner.pruners.BasePruner.config"]], "criterion (neural_compressor.compression.pruner.pruners.basicpruner attribute)": [[170, "neural_compressor.compression.pruner.pruners.BasicPruner.criterion"]], "criterion (neural_compressor.compression.pruner.pruners.blockmaskpruner attribute)": [[170, "neural_compressor.compression.pruner.pruners.BlockMaskPruner.criterion"]], "criterion (neural_compressor.compression.pruner.pruners.retrainfreepruner attribute)": [[170, "neural_compressor.compression.pruner.pruners.RetrainFreePruner.criterion"]], "current_sparsity_ratio (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[170, "neural_compressor.compression.pruner.pruners.BasePruner.current_sparsity_ratio"]], "end_step (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[170, "neural_compressor.compression.pruner.pruners.BasePruner.end_step"]], "get_pruner() (in module neural_compressor.compression.pruner.pruners)": [[170, "neural_compressor.compression.pruner.pruners.get_pruner"]], "global_step (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[170, "neural_compressor.compression.pruner.pruners.BasePruner.global_step"]], "masks (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[170, "neural_compressor.compression.pruner.pruners.BasePruner.masks"]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[170, "neural_compressor.compression.pruner.pruners.BasePruner.max_sparsity_ratio_per_op"]], "modules (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[170, "neural_compressor.compression.pruner.pruners.BasePruner.modules"]], "neural_compressor.compression.pruner.pruners": [[170, "module-neural_compressor.compression.pruner.pruners"]], "parse_valid_pruner_types() (in module neural_compressor.compression.pruner.pruners)": [[170, "neural_compressor.compression.pruner.pruners.parse_valid_pruner_types"]], "pattern (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[170, "neural_compressor.compression.pruner.pruners.BasePruner.pattern"]], "pattern (neural_compressor.compression.pruner.pruners.basicpruner attribute)": [[170, "neural_compressor.compression.pruner.pruners.BasicPruner.pattern"]], "pattern (neural_compressor.compression.pruner.pruners.blockmaskpruner attribute)": [[170, "neural_compressor.compression.pruner.pruners.BlockMaskPruner.pattern"]], "pattern (neural_compressor.compression.pruner.pruners.retrainfreepruner attribute)": [[170, "neural_compressor.compression.pruner.pruners.RetrainFreePruner.pattern"]], "pruning_frequency (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[170, "neural_compressor.compression.pruner.pruners.BasePruner.pruning_frequency"]], "reg (neural_compressor.compression.pruner.pruners.basicpruner attribute)": [[170, "neural_compressor.compression.pruner.pruners.BasicPruner.reg"]], "reg (neural_compressor.compression.pruner.pruners.blockmaskpruner attribute)": [[170, "neural_compressor.compression.pruner.pruners.BlockMaskPruner.reg"]], "reg (neural_compressor.compression.pruner.pruners.retrainfreepruner attribute)": [[170, "neural_compressor.compression.pruner.pruners.RetrainFreePruner.reg"]], "register_pruner() (in module neural_compressor.compression.pruner.pruners)": [[170, "neural_compressor.compression.pruner.pruners.register_pruner"]], "scheduler (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[170, "neural_compressor.compression.pruner.pruners.BasePruner.scheduler"]], "scheduler (neural_compressor.compression.pruner.pruners.basicpruner attribute)": [[170, "neural_compressor.compression.pruner.pruners.BasicPruner.scheduler"]], "scheduler (neural_compressor.compression.pruner.pruners.blockmaskpruner attribute)": [[170, "neural_compressor.compression.pruner.pruners.BlockMaskPruner.scheduler"]], "scheduler (neural_compressor.compression.pruner.pruners.retrainfreepruner attribute)": [[170, "neural_compressor.compression.pruner.pruners.RetrainFreePruner.scheduler"]], "scores (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[170, "neural_compressor.compression.pruner.pruners.BasePruner.scores"]], "start_step (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[170, "neural_compressor.compression.pruner.pruners.BasePruner.start_step"]], "target_sparsity_ratio (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[170, "neural_compressor.compression.pruner.pruners.BasePruner.target_sparsity_ratio"]], "basereg (class in neural_compressor.compression.pruner.regs)": [[171, "neural_compressor.compression.pruner.regs.BaseReg"]], "grouplasso (class in neural_compressor.compression.pruner.regs)": [[171, "neural_compressor.compression.pruner.regs.GroupLasso"]], "alpha (neural_compressor.compression.pruner.regs.grouplasso attribute)": [[171, "neural_compressor.compression.pruner.regs.GroupLasso.alpha"]], "get_reg() (in module neural_compressor.compression.pruner.regs)": [[171, "neural_compressor.compression.pruner.regs.get_reg"]], "get_reg_type() (in module neural_compressor.compression.pruner.regs)": [[171, "neural_compressor.compression.pruner.regs.get_reg_type"]], "neural_compressor.compression.pruner.regs": [[171, "module-neural_compressor.compression.pruner.regs"]], "reg_terms (neural_compressor.compression.pruner.regs.grouplasso attribute)": [[171, "neural_compressor.compression.pruner.regs.GroupLasso.reg_terms"]], "register_reg() (in module neural_compressor.compression.pruner.regs)": [[171, "neural_compressor.compression.pruner.regs.register_reg"]], "iterativescheduler (class in neural_compressor.compression.pruner.schedulers)": [[172, "neural_compressor.compression.pruner.schedulers.IterativeScheduler"]], "oneshotscheduler (class in neural_compressor.compression.pruner.schedulers)": [[172, "neural_compressor.compression.pruner.schedulers.OneshotScheduler"]], "pruningscheduler (class in neural_compressor.compression.pruner.schedulers)": [[172, "neural_compressor.compression.pruner.schedulers.PruningScheduler"]], "config (neural_compressor.compression.pruner.schedulers.pruningscheduler attribute)": [[172, "neural_compressor.compression.pruner.schedulers.PruningScheduler.config"]], "get_scheduler() (in module neural_compressor.compression.pruner.schedulers)": [[172, "neural_compressor.compression.pruner.schedulers.get_scheduler"]], "neural_compressor.compression.pruner.schedulers": [[172, "module-neural_compressor.compression.pruner.schedulers"]], "register_scheduler() (in module neural_compressor.compression.pruner.schedulers)": [[172, "neural_compressor.compression.pruner.schedulers.register_scheduler"]], "check_config() (in module neural_compressor.compression.pruner.utils)": [[173, "neural_compressor.compression.pruner.utils.check_config"]], "check_key_validity() (in module neural_compressor.compression.pruner.utils)": [[173, "neural_compressor.compression.pruner.utils.check_key_validity"]], "generate_pruner_config() (in module neural_compressor.compression.pruner.utils)": [[173, "neural_compressor.compression.pruner.utils.generate_pruner_config"]], "get_sparsity_ratio() (in module neural_compressor.compression.pruner.utils)": [[173, "neural_compressor.compression.pruner.utils.get_sparsity_ratio"]], "neural_compressor.compression.pruner.utils": [[173, "module-neural_compressor.compression.pruner.utils"]], "parse_last_linear() (in module neural_compressor.compression.pruner.utils)": [[173, "neural_compressor.compression.pruner.utils.parse_last_linear"]], "parse_to_prune() (in module neural_compressor.compression.pruner.utils)": [[173, "neural_compressor.compression.pruner.utils.parse_to_prune"]], "process_and_check_config() (in module neural_compressor.compression.pruner.utils)": [[173, "neural_compressor.compression.pruner.utils.process_and_check_config"]], "process_config() (in module neural_compressor.compression.pruner.utils)": [[173, "neural_compressor.compression.pruner.utils.process_config"]], "process_weight_config() (in module neural_compressor.compression.pruner.utils)": [[173, "neural_compressor.compression.pruner.utils.process_weight_config"]], "process_yaml_config() (in module neural_compressor.compression.pruner.utils)": [[173, "neural_compressor.compression.pruner.utils.process_yaml_config"]], "reset_none_to_default() (in module neural_compressor.compression.pruner.utils)": [[173, "neural_compressor.compression.pruner.utils.reset_none_to_default"]], "update_params() (in module neural_compressor.compression.pruner.utils)": [[173, "neural_compressor.compression.pruner.utils.update_params"]], "benchmark_conf (class in neural_compressor.conf.config)": [[174, "neural_compressor.conf.config.Benchmark_Conf"]], "conf (class in neural_compressor.conf.config)": [[174, "neural_compressor.conf.config.Conf"]], "distillation_conf (class in neural_compressor.conf.config)": [[174, "neural_compressor.conf.config.Distillation_Conf"]], "graph_optimization_conf (class in neural_compressor.conf.config)": [[174, "neural_compressor.conf.config.Graph_Optimization_Conf"]], "mixedprecision_conf (class in neural_compressor.conf.config)": [[174, "neural_compressor.conf.config.MixedPrecision_Conf"]], "nasconfig (class in neural_compressor.conf.config)": [[174, "neural_compressor.conf.config.NASConfig"]], "prunerv2 (class in neural_compressor.conf.config)": [[174, "neural_compressor.conf.config.PrunerV2"]], "pruning_conf (class in neural_compressor.conf.config)": [[174, "neural_compressor.conf.config.Pruning_Conf"]], "quantization_conf (class in neural_compressor.conf.config)": [[174, "neural_compressor.conf.config.Quantization_Conf"]], "neural_compressor.conf.config": [[174, "module-neural_compressor.conf.config"]], "dotdict (class in neural_compressor.conf.dotdict)": [[175, "neural_compressor.conf.dotdict.DotDict"]], "deep_get() (in module neural_compressor.conf.dotdict)": [[175, "neural_compressor.conf.dotdict.deep_get"]], "deep_set() (in module neural_compressor.conf.dotdict)": [[175, "neural_compressor.conf.dotdict.deep_set"]], "neural_compressor.conf.dotdict": [[175, "module-neural_compressor.conf.dotdict"]], "neural_compressor.conf": [[176, "module-neural_compressor.conf"]], "quantizationconfig (class in neural_compressor.conf.pythonic_config)": [[177, "neural_compressor.conf.pythonic_config.QuantizationConfig"]], "neural_compressor.conf.pythonic_config": [[177, "module-neural_compressor.conf.pythonic_config"]], "accuracycriterion (class in neural_compressor.config)": [[178, "neural_compressor.config.AccuracyCriterion"]], "benchmarkconfig (class in neural_compressor.config)": [[178, "neural_compressor.config.BenchmarkConfig"]], "distillationconfig (class in neural_compressor.config)": [[178, "neural_compressor.config.DistillationConfig"]], "exportconfig (class in neural_compressor.config)": [[178, "neural_compressor.config.ExportConfig"]], "intermediatelayersknowledgedistillationlossconfig (class in neural_compressor.config)": [[178, "neural_compressor.config.IntermediateLayersKnowledgeDistillationLossConfig"]], "knowledgedistillationlossconfig (class in neural_compressor.config)": [[178, "neural_compressor.config.KnowledgeDistillationLossConfig"]], "mixedprecisionconfig (class in neural_compressor.config)": [[178, "neural_compressor.config.MixedPrecisionConfig"]], "onnxqlinear2qdqconfig (class in neural_compressor.config)": [[178, "neural_compressor.config.ONNXQlinear2QDQConfig"]], "options (class in neural_compressor.config)": [[178, "neural_compressor.config.Options"]], "posttrainingquantconfig (class in neural_compressor.config)": [[178, "neural_compressor.config.PostTrainingQuantConfig"]], "quantizationawaretrainingconfig (class in neural_compressor.config)": [[178, "neural_compressor.config.QuantizationAwareTrainingConfig"]], "selfknowledgedistillationlossconfig (class in neural_compressor.config)": [[178, "neural_compressor.config.SelfKnowledgeDistillationLossConfig"]], "tf2onnxconfig (class in neural_compressor.config)": [[178, "neural_compressor.config.TF2ONNXConfig"]], "torch2onnxconfig (class in neural_compressor.config)": [[178, "neural_compressor.config.Torch2ONNXConfig"]], "tuningcriterion (class in neural_compressor.config)": [[178, "neural_compressor.config.TuningCriterion"]], "weightpruningconfig (class in neural_compressor.config)": [[178, "neural_compressor.config.WeightPruningConfig"]], "neural_compressor.config": [[178, "module-neural_compressor.config"]], "neural_compressor.contrib": [[179, "module-neural_compressor.contrib"]], "neural_compressor.contrib.strategy": [[180, "module-neural_compressor.contrib.strategy"]], "sigopttunestrategy (class in neural_compressor.contrib.strategy.sigopt)": [[181, "neural_compressor.contrib.strategy.sigopt.SigOptTuneStrategy"]], "neural_compressor.contrib.strategy.sigopt": [[181, "module-neural_compressor.contrib.strategy.sigopt"]], "tpetunestrategy (class in neural_compressor.contrib.strategy.tpe)": [[182, "neural_compressor.contrib.strategy.tpe.TpeTuneStrategy"]], "neural_compressor.contrib.strategy.tpe": [[182, "module-neural_compressor.contrib.strategy.tpe"]], "basedataloader (class in neural_compressor.data.dataloaders.base_dataloader)": [[183, "neural_compressor.data.dataloaders.base_dataloader.BaseDataLoader"]], "neural_compressor.data.dataloaders.base_dataloader": [[183, "module-neural_compressor.data.dataloaders.base_dataloader"]], "dataloader (class in neural_compressor.data.dataloaders.dataloader)": [[184, "neural_compressor.data.dataloaders.dataloader.DataLoader"]], "neural_compressor.data.dataloaders.dataloader": [[184, "module-neural_compressor.data.dataloaders.dataloader"]], "defaultdataloader (class in neural_compressor.data.dataloaders.default_dataloader)": [[185, "neural_compressor.data.dataloaders.default_dataloader.DefaultDataLoader"]], "default_collate() (in module neural_compressor.data.dataloaders.default_dataloader)": [[185, "neural_compressor.data.dataloaders.default_dataloader.default_collate"]], "neural_compressor.data.dataloaders.default_dataloader": [[185, "module-neural_compressor.data.dataloaders.default_dataloader"]], "fetcher (class in neural_compressor.data.dataloaders.fetcher)": [[186, "neural_compressor.data.dataloaders.fetcher.Fetcher"]], "indexfetcher (class in neural_compressor.data.dataloaders.fetcher)": [[186, "neural_compressor.data.dataloaders.fetcher.IndexFetcher"]], "iterablefetcher (class in neural_compressor.data.dataloaders.fetcher)": [[186, "neural_compressor.data.dataloaders.fetcher.IterableFetcher"]], "neural_compressor.data.dataloaders.fetcher": [[186, "module-neural_compressor.data.dataloaders.fetcher"]], "neural_compressor.data.dataloaders": [[187, "module-neural_compressor.data.dataloaders"]], "mxnetdataloader (class in neural_compressor.data.dataloaders.mxnet_dataloader)": [[188, "neural_compressor.data.dataloaders.mxnet_dataloader.MXNetDataLoader"]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[188, "module-neural_compressor.data.dataloaders.mxnet_dataloader"]], "onnxrtbertdataloader (class in neural_compressor.data.dataloaders.onnxrt_dataloader)": [[189, "neural_compressor.data.dataloaders.onnxrt_dataloader.ONNXRTBertDataLoader"]], "onnxrtdataloader (class in neural_compressor.data.dataloaders.onnxrt_dataloader)": [[189, "neural_compressor.data.dataloaders.onnxrt_dataloader.ONNXRTDataLoader"]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[189, "module-neural_compressor.data.dataloaders.onnxrt_dataloader"]], "pytorchdataloader (class in neural_compressor.data.dataloaders.pytorch_dataloader)": [[190, "neural_compressor.data.dataloaders.pytorch_dataloader.PyTorchDataLoader"]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[190, "module-neural_compressor.data.dataloaders.pytorch_dataloader"]], "batchsampler (class in neural_compressor.data.dataloaders.sampler)": [[191, "neural_compressor.data.dataloaders.sampler.BatchSampler"]], "iterablesampler (class in neural_compressor.data.dataloaders.sampler)": [[191, "neural_compressor.data.dataloaders.sampler.IterableSampler"]], "sampler (class in neural_compressor.data.dataloaders.sampler)": [[191, "neural_compressor.data.dataloaders.sampler.Sampler"]], "sequentialsampler (class in neural_compressor.data.dataloaders.sampler)": [[191, "neural_compressor.data.dataloaders.sampler.SequentialSampler"]], "neural_compressor.data.dataloaders.sampler": [[191, "module-neural_compressor.data.dataloaders.sampler"]], "tfdatadataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[192, "neural_compressor.data.dataloaders.tensorflow_dataloader.TFDataDataLoader"]], "tensorflowbertdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[192, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowBertDataLoader"]], "tensorflowdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[192, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowDataLoader"]], "tensorflowmodelzoobertdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[192, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowModelZooBertDataLoader"]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[192, "module-neural_compressor.data.dataloaders.tensorflow_dataloader"]], "inputfeatures (class in neural_compressor.data.datasets.bert_dataset)": [[193, "neural_compressor.data.datasets.bert_dataset.InputFeatures"]], "onnxrtbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[193, "neural_compressor.data.datasets.bert_dataset.ONNXRTBertDataset"]], "parsedecodebert (class in neural_compressor.data.datasets.bert_dataset)": [[193, "neural_compressor.data.datasets.bert_dataset.ParseDecodeBert"]], "pytorchbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[193, "neural_compressor.data.datasets.bert_dataset.PytorchBertDataset"]], "tensorflowbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[193, "neural_compressor.data.datasets.bert_dataset.TensorflowBertDataset"]], "tensorflowmodelzoobertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[193, "neural_compressor.data.datasets.bert_dataset.TensorflowModelZooBertDataset"]], "convert_examples_to_features() (in module neural_compressor.data.datasets.bert_dataset)": [[193, "neural_compressor.data.datasets.bert_dataset.convert_examples_to_features"]], "load_and_cache_examples() (in module neural_compressor.data.datasets.bert_dataset)": [[193, "neural_compressor.data.datasets.bert_dataset.load_and_cache_examples"]], "neural_compressor.data.datasets.bert_dataset": [[193, "module-neural_compressor.data.datasets.bert_dataset"]], "coconpy (class in neural_compressor.data.datasets.coco_dataset)": [[194, "neural_compressor.data.datasets.coco_dataset.COCONpy"]], "cocoraw (class in neural_compressor.data.datasets.coco_dataset)": [[194, "neural_compressor.data.datasets.coco_dataset.COCORaw"]], "cocorecorddataset (class in neural_compressor.data.datasets.coco_dataset)": [[194, "neural_compressor.data.datasets.coco_dataset.COCORecordDataset"]], "parsedecodecoco (class in neural_compressor.data.datasets.coco_dataset)": [[194, "neural_compressor.data.datasets.coco_dataset.ParseDecodeCoco"]], "neural_compressor.data.datasets.coco_dataset": [[194, "module-neural_compressor.data.datasets.coco_dataset"]], "cifar10 (class in neural_compressor.data.datasets.dataset)": [[195, "neural_compressor.data.datasets.dataset.CIFAR10"]], "cifar100 (class in neural_compressor.data.datasets.dataset)": [[195, "neural_compressor.data.datasets.dataset.CIFAR100"]], "dataset (class in neural_compressor.data.datasets.dataset)": [[195, "neural_compressor.data.datasets.dataset.Dataset"]], "datasets (class in neural_compressor.data.datasets.dataset)": [[195, "neural_compressor.data.datasets.dataset.Datasets"]], "fashionmnist (class in neural_compressor.data.datasets.dataset)": [[195, "neural_compressor.data.datasets.dataset.FashionMNIST"]], "imagefolder (class in neural_compressor.data.datasets.dataset)": [[195, "neural_compressor.data.datasets.dataset.ImageFolder"]], "iterabledataset (class in neural_compressor.data.datasets.dataset)": [[195, "neural_compressor.data.datasets.dataset.IterableDataset"]], "mnist (class in neural_compressor.data.datasets.dataset)": [[195, "neural_compressor.data.datasets.dataset.MNIST"]], "mxnetcifar10 (class in neural_compressor.data.datasets.dataset)": [[195, "neural_compressor.data.datasets.dataset.MXNetCIFAR10"]], "mxnetcifar100 (class in neural_compressor.data.datasets.dataset)": [[195, "neural_compressor.data.datasets.dataset.MXNetCIFAR100"]], "mxnetdatasets (class in neural_compressor.data.datasets.dataset)": [[195, "neural_compressor.data.datasets.dataset.MXNetDatasets"]], "mxnetfashionmnist (class in neural_compressor.data.datasets.dataset)": [[195, "neural_compressor.data.datasets.dataset.MXNetFashionMNIST"]], "mxnetimagefolder (class in neural_compressor.data.datasets.dataset)": [[195, "neural_compressor.data.datasets.dataset.MXNetImageFolder"]], "mxnetmnist (class in neural_compressor.data.datasets.dataset)": [[195, "neural_compressor.data.datasets.dataset.MXNetMNIST"]], "onnxrtitdatasets (class in neural_compressor.data.datasets.dataset)": [[195, "neural_compressor.data.datasets.dataset.ONNXRTITDatasets"]], "onnxrtqldatasets (class in neural_compressor.data.datasets.dataset)": [[195, "neural_compressor.data.datasets.dataset.ONNXRTQLDatasets"]], "pytorchdatasets (class in neural_compressor.data.datasets.dataset)": [[195, "neural_compressor.data.datasets.dataset.PyTorchDatasets"]], "pytorchcifar10 (class in neural_compressor.data.datasets.dataset)": [[195, "neural_compressor.data.datasets.dataset.PytorchCIFAR10"]], "pytorchcifar100 (class in neural_compressor.data.datasets.dataset)": [[195, "neural_compressor.data.datasets.dataset.PytorchCIFAR100"]], "pytorchfashionmnist (class in neural_compressor.data.datasets.dataset)": [[195, "neural_compressor.data.datasets.dataset.PytorchFashionMNIST"]], "pytorchmnist (class in neural_compressor.data.datasets.dataset)": [[195, "neural_compressor.data.datasets.dataset.PytorchMNIST"]], "pytorchmxnetwrapdataset (class in neural_compressor.data.datasets.dataset)": [[195, "neural_compressor.data.datasets.dataset.PytorchMxnetWrapDataset"]], "pytorchmxnetwrapfunction (class in neural_compressor.data.datasets.dataset)": [[195, "neural_compressor.data.datasets.dataset.PytorchMxnetWrapFunction"]], "tensorflow (class in neural_compressor.data.datasets.dataset)": [[195, "neural_compressor.data.datasets.dataset.Tensorflow"]], "tensorflowcifar10 (class in neural_compressor.data.datasets.dataset)": [[195, "neural_compressor.data.datasets.dataset.TensorflowCIFAR10"]], "tensorflowcifar100 (class in neural_compressor.data.datasets.dataset)": [[195, "neural_compressor.data.datasets.dataset.TensorflowCIFAR100"]], "tensorflowdatasets (class in neural_compressor.data.datasets.dataset)": [[195, "neural_compressor.data.datasets.dataset.TensorflowDatasets"]], "tensorflowfashionmnist (class in neural_compressor.data.datasets.dataset)": [[195, "neural_compressor.data.datasets.dataset.TensorflowFashionMNIST"]], "tensorflowimagerecord (class in neural_compressor.data.datasets.dataset)": [[195, "neural_compressor.data.datasets.dataset.TensorflowImageRecord"]], "tensorflowmnist (class in neural_compressor.data.datasets.dataset)": [[195, "neural_compressor.data.datasets.dataset.TensorflowMNIST"]], "tensorflowtfrecorddataset (class in neural_compressor.data.datasets.dataset)": [[195, "neural_compressor.data.datasets.dataset.TensorflowTFRecordDataset"]], "tensorflowvocrecord (class in neural_compressor.data.datasets.dataset)": [[195, "neural_compressor.data.datasets.dataset.TensorflowVOCRecord"]], "calculate_md5() (in module neural_compressor.data.datasets.dataset)": [[195, "neural_compressor.data.datasets.dataset.calculate_md5"]], "check_integrity() (in module neural_compressor.data.datasets.dataset)": [[195, "neural_compressor.data.datasets.dataset.check_integrity"]], "dataset_registry() (in module neural_compressor.data.datasets.dataset)": [[195, "neural_compressor.data.datasets.dataset.dataset_registry"]], "download_url() (in module neural_compressor.data.datasets.dataset)": [[195, "neural_compressor.data.datasets.dataset.download_url"]], "framework_datasets (in module neural_compressor.data.datasets.dataset)": [[195, "neural_compressor.data.datasets.dataset.framework_datasets"]], "gen_bar_updater() (in module neural_compressor.data.datasets.dataset)": [[195, "neural_compressor.data.datasets.dataset.gen_bar_updater"]], "neural_compressor.data.datasets.dataset": [[195, "module-neural_compressor.data.datasets.dataset"]], "dummydataset (class in neural_compressor.data.datasets.dummy_dataset)": [[196, "neural_compressor.data.datasets.dummy_dataset.DummyDataset"]], "neural_compressor.data.datasets.dummy_dataset": [[196, "module-neural_compressor.data.datasets.dummy_dataset"]], "dummydataset (class in neural_compressor.data.datasets.dummy_dataset_v2)": [[197, "neural_compressor.data.datasets.dummy_dataset_v2.DummyDataset"]], "sparsedummydataset (class in neural_compressor.data.datasets.dummy_dataset_v2)": [[197, "neural_compressor.data.datasets.dummy_dataset_v2.SparseDummyDataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[197, "module-neural_compressor.data.datasets.dummy_dataset_v2"]], "imagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[198, "neural_compressor.data.datasets.imagenet_dataset.ImagenetRaw"]], "mxnetimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[198, "neural_compressor.data.datasets.imagenet_dataset.MXNetImagenetRaw"]], "onnxrtimagenetdataset (class in neural_compressor.data.datasets.imagenet_dataset)": [[198, "neural_compressor.data.datasets.imagenet_dataset.ONNXRTImagenetDataset"]], "pytorchimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[198, "neural_compressor.data.datasets.imagenet_dataset.PytorchImagenetRaw"]], "tensorflowimagenetdataset (class in neural_compressor.data.datasets.imagenet_dataset)": [[198, "neural_compressor.data.datasets.imagenet_dataset.TensorflowImagenetDataset"]], "tensorflowimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[198, "neural_compressor.data.datasets.imagenet_dataset.TensorflowImagenetRaw"]], "neural_compressor.data.datasets.imagenet_dataset": [[198, "module-neural_compressor.data.datasets.imagenet_dataset"]], "neural_compressor.data.datasets": [[199, "module-neural_compressor.data.datasets"]], "styletransferdataset (class in neural_compressor.data.datasets.style_transfer_dataset)": [[200, "neural_compressor.data.datasets.style_transfer_dataset.StyleTransferDataset"]], "neural_compressor.data.datasets.style_transfer_dataset": [[200, "module-neural_compressor.data.datasets.style_transfer_dataset"]], "labelbalancecocorawfilter (class in neural_compressor.data.filters.coco_filter)": [[201, "neural_compressor.data.filters.coco_filter.LabelBalanceCOCORawFilter"]], "labelbalancecocorecordfilter (class in neural_compressor.data.filters.coco_filter)": [[201, "neural_compressor.data.filters.coco_filter.LabelBalanceCOCORecordFilter"]], "neural_compressor.data.filters.coco_filter": [[201, "module-neural_compressor.data.filters.coco_filter"]], "filters (class in neural_compressor.data.filters.filter)": [[202, "neural_compressor.data.filters.filter.FILTERS"]], "filter (class in neural_compressor.data.filters.filter)": [[202, "neural_compressor.data.filters.filter.Filter"]], "mxnetfilters (class in neural_compressor.data.filters.filter)": [[202, "neural_compressor.data.filters.filter.MXNetFilters"]], "onnxrtitfilters (class in neural_compressor.data.filters.filter)": [[202, "neural_compressor.data.filters.filter.ONNXRTITFilters"]], "onnxrtqlfilters (class in neural_compressor.data.filters.filter)": [[202, "neural_compressor.data.filters.filter.ONNXRTQLFilters"]], "pytorchfilters (class in neural_compressor.data.filters.filter)": [[202, "neural_compressor.data.filters.filter.PyTorchFilters"]], "tensorflowfilters (class in neural_compressor.data.filters.filter)": [[202, "neural_compressor.data.filters.filter.TensorflowFilters"]], "filter_registry() (in module neural_compressor.data.filters.filter)": [[202, "neural_compressor.data.filters.filter.filter_registry"]], "neural_compressor.data.filters.filter": [[202, "module-neural_compressor.data.filters.filter"]], "neural_compressor.data.filters": [[203, "module-neural_compressor.data.filters"]], "neural_compressor.data": [[204, "module-neural_compressor.data"]], "parsedecodecocotransform (class in neural_compressor.data.transforms.coco_transform)": [[205, "neural_compressor.data.transforms.coco_transform.ParseDecodeCocoTransform"]], "neural_compressor.data.transforms.coco_transform": [[205, "module-neural_compressor.data.transforms.coco_transform"]], "bilinearimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[206, "neural_compressor.data.transforms.imagenet_transform.BilinearImagenetTransform"]], "labelshift (class in neural_compressor.data.transforms.imagenet_transform)": [[206, "neural_compressor.data.transforms.imagenet_transform.LabelShift"]], "onnxresizecropimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[206, "neural_compressor.data.transforms.imagenet_transform.ONNXResizeCropImagenetTransform"]], "onnxbilinearimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[206, "neural_compressor.data.transforms.imagenet_transform.OnnxBilinearImagenetTransform"]], "parsedecodeimagenet (class in neural_compressor.data.transforms.imagenet_transform)": [[206, "neural_compressor.data.transforms.imagenet_transform.ParseDecodeImagenet"]], "parsedecodeimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[206, "neural_compressor.data.transforms.imagenet_transform.ParseDecodeImagenetTransform"]], "quantizedinput (class in neural_compressor.data.transforms.imagenet_transform)": [[206, "neural_compressor.data.transforms.imagenet_transform.QuantizedInput"]], "resizewithaspectratio (class in neural_compressor.data.transforms.imagenet_transform)": [[206, "neural_compressor.data.transforms.imagenet_transform.ResizeWithAspectRatio"]], "tensorflowresizecropimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[206, "neural_compressor.data.transforms.imagenet_transform.TensorflowResizeCropImagenetTransform"]], "neural_compressor.data.transforms.imagenet_transform": [[206, "module-neural_compressor.data.transforms.imagenet_transform"]], "neural_compressor.data.transforms": [[207, "module-neural_compressor.data.transforms"]], "postprocess (class in neural_compressor.data.transforms.postprocess)": [[208, "neural_compressor.data.transforms.postprocess.Postprocess"]], "neural_compressor.data.transforms.postprocess": [[208, "module-neural_compressor.data.transforms.postprocess"]], "basictokenizer (class in neural_compressor.data.transforms.tokenization)": [[209, "neural_compressor.data.transforms.tokenization.BasicTokenizer"]], "fulltokenizer (class in neural_compressor.data.transforms.tokenization)": [[209, "neural_compressor.data.transforms.tokenization.FullTokenizer"]], "wordpiecetokenizer (class in neural_compressor.data.transforms.tokenization)": [[209, "neural_compressor.data.transforms.tokenization.WordpieceTokenizer"]], "convert_by_vocab() (in module neural_compressor.data.transforms.tokenization)": [[209, "neural_compressor.data.transforms.tokenization.convert_by_vocab"]], "convert_to_unicode() (in module neural_compressor.data.transforms.tokenization)": [[209, "neural_compressor.data.transforms.tokenization.convert_to_unicode"]], "load_vocab() (in module neural_compressor.data.transforms.tokenization)": [[209, "neural_compressor.data.transforms.tokenization.load_vocab"]], "neural_compressor.data.transforms.tokenization": [[209, "module-neural_compressor.data.transforms.tokenization"]], "whitespace_tokenize() (in module neural_compressor.data.transforms.tokenization)": [[209, "neural_compressor.data.transforms.tokenization.whitespace_tokenize"]], "alignimagechanneltransform (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.AlignImageChannelTransform"]], "basetransform (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.BaseTransform"]], "castonnxtransform (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.CastONNXTransform"]], "castpytorchtransform (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.CastPyTorchTransform"]], "casttftransform (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.CastTFTransform"]], "centercroptftransform (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.CenterCropTFTransform"]], "centercroptransform (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.CenterCropTransform"]], "collecttransform (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.CollectTransform"]], "composetransform (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.ComposeTransform"]], "cropresizetftransform (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.CropResizeTFTransform"]], "cropresizetransform (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.CropResizeTransform"]], "croptoboundingbox (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.CropToBoundingBox"]], "inputfeatures (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.InputFeatures"]], "mxnetcropresizetransform (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.MXNetCropResizeTransform"]], "mxnetcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.MXNetCropToBoundingBox"]], "mxnetnormalizetransform (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.MXNetNormalizeTransform"]], "mxnettransforms (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.MXNetTransforms"]], "mxnettranspose (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.MXNetTranspose"]], "normalizetftransform (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.NormalizeTFTransform"]], "normalizetransform (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.NormalizeTransform"]], "onnxrtcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.ONNXRTCropToBoundingBox"]], "onnxrtittransforms (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.ONNXRTITTransforms"]], "onnxrtqltransforms (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.ONNXRTQLTransforms"]], "paddedcentercroptransform (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.PaddedCenterCropTransform"]], "parsedecodevoctransform (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.ParseDecodeVocTransform"]], "pytorchalignimagechannel (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.PyTorchAlignImageChannel"]], "pytorchcropresizetransform (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.PyTorchCropResizeTransform"]], "pytorchnormalizetransform (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.PyTorchNormalizeTransform"]], "pytorchtransforms (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.PyTorchTransforms"]], "pytorchtranspose (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.PyTorchTranspose"]], "pytorchmxnettransform (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.PytorchMxnetTransform"]], "pytorchmxnetwrapfunction (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.PytorchMxnetWrapFunction"]], "randomcroptftransform (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.RandomCropTFTransform"]], "randomcroptransform (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.RandomCropTransform"]], "randomhorizontalflip (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.RandomHorizontalFlip"]], "randomresizedcropmxnettransform (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.RandomResizedCropMXNetTransform"]], "randomresizedcroppytorchtransform (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.RandomResizedCropPytorchTransform"]], "randomresizedcroptftransform (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.RandomResizedCropTFTransform"]], "randomresizedcroptransform (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.RandomResizedCropTransform"]], "randomverticalflip (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.RandomVerticalFlip"]], "rescalekeraspretraintransform (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.RescaleKerasPretrainTransform"]], "rescaletftransform (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.RescaleTFTransform"]], "rescaletransform (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.RescaleTransform"]], "resizemxnettransform (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.ResizeMXNetTransform"]], "resizepytorchtransform (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.ResizePytorchTransform"]], "resizetftransform (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.ResizeTFTransform"]], "resizetransform (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.ResizeTransform"]], "resizewithratio (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.ResizeWithRatio"]], "squadexample (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.SquadExample"]], "tfmodelzoocollecttransform (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.TFModelZooCollectTransform"]], "tfsquadv1modelzooposttransform (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.TFSquadV1ModelZooPostTransform"]], "tfsquadv1posttransform (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.TFSquadV1PostTransform"]], "transforms (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.TRANSFORMS"], [210, "neural_compressor.data.transforms.transform.Transforms"]], "tensorflowcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.TensorflowCropToBoundingBox"]], "tensorflowrandomhorizontalflip (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.TensorflowRandomHorizontalFlip"]], "tensorflowrandomverticalflip (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.TensorflowRandomVerticalFlip"]], "tensorflowresizewithratio (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.TensorflowResizeWithRatio"]], "tensorflowtransform (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.TensorflowTransform"]], "tensorflowtransforms (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.TensorflowTransforms"]], "tensorflowtranspose (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.TensorflowTranspose"]], "tensorflowwrapfunction (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.TensorflowWrapFunction"]], "toarray (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.ToArray"]], "tondarraytransform (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.ToNDArrayTransform"]], "transpose (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.Transpose"]], "convert_examples_to_features() (in module neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.convert_examples_to_features"]], "get_final_text() (in module neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.get_final_text"]], "get_torchvision_map() (in module neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.get_torchvision_map"]], "neural_compressor.data.transforms.transform": [[210, "module-neural_compressor.data.transforms.transform"]], "read_squad_examples() (in module neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.read_squad_examples"]], "transform_registry() (in module neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.transform_registry"]], "benchmark (class in neural_compressor.experimental.benchmark)": [[211, "neural_compressor.experimental.benchmark.Benchmark"]], "get_architecture() (in module neural_compressor.experimental.benchmark)": [[211, "neural_compressor.experimental.benchmark.get_architecture"]], "get_bounded_threads() (in module neural_compressor.experimental.benchmark)": [[211, "neural_compressor.experimental.benchmark.get_bounded_threads"]], "get_core_ids() (in module neural_compressor.experimental.benchmark)": [[211, "neural_compressor.experimental.benchmark.get_core_ids"]], "get_physical_ids() (in module neural_compressor.experimental.benchmark)": [[211, "neural_compressor.experimental.benchmark.get_physical_ids"]], "get_threads() (in module neural_compressor.experimental.benchmark)": [[211, "neural_compressor.experimental.benchmark.get_threads"]], "get_threads_per_core() (in module neural_compressor.experimental.benchmark)": [[211, "neural_compressor.experimental.benchmark.get_threads_per_core"]], "neural_compressor.experimental.benchmark": [[211, "module-neural_compressor.experimental.benchmark"]], "set_all_env_var() (in module neural_compressor.experimental.benchmark)": [[211, "neural_compressor.experimental.benchmark.set_all_env_var"]], "set_env_var() (in module neural_compressor.experimental.benchmark)": [[211, "neural_compressor.experimental.benchmark.set_env_var"]], "criterions (class in neural_compressor.experimental.common.criterion)": [[212, "neural_compressor.experimental.common.criterion.Criterions"]], "intermediatelayersknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[212, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss"]], "knowledgedistillationframework (class in neural_compressor.experimental.common.criterion)": [[212, "neural_compressor.experimental.common.criterion.KnowledgeDistillationFramework"]], "knowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[212, "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss"]], "pytorchcriterions (class in neural_compressor.experimental.common.criterion)": [[212, "neural_compressor.experimental.common.criterion.PyTorchCriterions"]], "pytorchcrossentropyloss (class in neural_compressor.experimental.common.criterion)": [[212, "neural_compressor.experimental.common.criterion.PyTorchCrossEntropyLoss"]], "pytorchintermediatelayersknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[212, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss"]], "pytorchintermediatelayersknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[212, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"]], "pytorchknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[212, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss"]], "pytorchknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[212, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLossWrapper"]], "pytorchselfknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[212, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss"]], "pytorchselfknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[212, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLossWrapper"]], "selfknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[212, "neural_compressor.experimental.common.criterion.SelfKnowledgeDistillationLoss"]], "tensorflowcrossentropyloss (class in neural_compressor.experimental.common.criterion)": [[212, "neural_compressor.experimental.common.criterion.TensorFlowCrossEntropyLoss"]], "tensorflowsparsecategoricalcrossentropy (class in neural_compressor.experimental.common.criterion)": [[212, "neural_compressor.experimental.common.criterion.TensorFlowSparseCategoricalCrossentropy"]], "tensorflowcriterions (class in neural_compressor.experimental.common.criterion)": [[212, "neural_compressor.experimental.common.criterion.TensorflowCriterions"]], "tensorflowknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[212, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLoss"]], "tensorflowknowledgedistillationlossexternal (class in neural_compressor.experimental.common.criterion)": [[212, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossExternal"]], "tensorflowknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[212, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossWrapper"]], "criterion_registry() (in module neural_compressor.experimental.common.criterion)": [[212, "neural_compressor.experimental.common.criterion.criterion_registry"]], "neural_compressor.experimental.common.criterion": [[212, "module-neural_compressor.experimental.common.criterion"]], "dataloader (class in neural_compressor.experimental.common.dataloader)": [[213, "neural_compressor.experimental.common.dataloader.DataLoader"]], "neural_compressor.experimental.common.dataloader": [[213, "module-neural_compressor.experimental.common.dataloader"]], "neural_compressor.experimental.common": [[214, "module-neural_compressor.experimental.common"]], "metric (class in neural_compressor.experimental.common.metric)": [[215, "neural_compressor.experimental.common.metric.Metric"]], "neural_compressor.experimental.common.metric": [[215, "module-neural_compressor.experimental.common.metric"]], "model (class in neural_compressor.experimental.common.model)": [[216, "neural_compressor.experimental.common.model.Model"]], "neural_compressor.experimental.common.model": [[216, "module-neural_compressor.experimental.common.model"]], "set_backend() (in module neural_compressor.experimental.common.model)": [[216, "neural_compressor.experimental.common.model.set_backend"]], "optimizers (class in neural_compressor.experimental.common.optimizer)": [[217, "neural_compressor.experimental.common.optimizer.Optimizers"]], "pytorchoptimizers (class in neural_compressor.experimental.common.optimizer)": [[217, "neural_compressor.experimental.common.optimizer.PyTorchOptimizers"]], "pytorchsgd (class in neural_compressor.experimental.common.optimizer)": [[217, "neural_compressor.experimental.common.optimizer.PyTorchSGD"]], "tensorflowadam (class in neural_compressor.experimental.common.optimizer)": [[217, "neural_compressor.experimental.common.optimizer.TensorFlowAdam"]], "tensorflowadamw (class in neural_compressor.experimental.common.optimizer)": [[217, "neural_compressor.experimental.common.optimizer.TensorFlowAdamW"]], "tensorflowsgd (class in neural_compressor.experimental.common.optimizer)": [[217, "neural_compressor.experimental.common.optimizer.TensorFlowSGD"]], "tensorflowoptimizers (class in neural_compressor.experimental.common.optimizer)": [[217, "neural_compressor.experimental.common.optimizer.TensorflowOptimizers"]], "neural_compressor.experimental.common.optimizer": [[217, "module-neural_compressor.experimental.common.optimizer"]], "optimizer_registry() (in module neural_compressor.experimental.common.optimizer)": [[217, "neural_compressor.experimental.common.optimizer.optimizer_registry"]], "postprocess (class in neural_compressor.experimental.common.postprocess)": [[218, "neural_compressor.experimental.common.postprocess.Postprocess"]], "neural_compressor.experimental.common.postprocess": [[218, "module-neural_compressor.experimental.common.postprocess"]], "get_activation() (in module neural_compressor.experimental.common.torch_utils)": [[219, "neural_compressor.experimental.common.torch_utils.get_activation"]], "neural_compressor.experimental.common.torch_utils": [[219, "module-neural_compressor.experimental.common.torch_utils"]], "record_output() (in module neural_compressor.experimental.common.torch_utils)": [[219, "neural_compressor.experimental.common.torch_utils.record_output"]], "component (class in neural_compressor.experimental.component)": [[220, "neural_compressor.experimental.component.Component"]], "neural_compressor.experimental.component": [[220, "module-neural_compressor.experimental.component"]], "neural_compressor.experimental.compression": [[221, "module-neural_compressor.experimental.compression"]], "neural_compressor.experimental.compression.pruning": [[222, "module-neural_compressor.experimental.compression.pruning"]], "prepare_pruning() (in module neural_compressor.experimental.compression.pruning)": [[222, "neural_compressor.experimental.compression.pruning.prepare_pruning"]], "save() (in module neural_compressor.experimental.compression.pruning)": [[222, "neural_compressor.experimental.compression.pruning.save"]], "basedataloader (class in neural_compressor.experimental.data.dataloaders.base_dataloader)": [[223, "neural_compressor.experimental.data.dataloaders.base_dataloader.BaseDataLoader"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[223, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"]], "neural_compressor.experimental.data.dataloaders.dataloader": [[224, "module-neural_compressor.experimental.data.dataloaders.dataloader"]], "defaultdataloader (class in neural_compressor.experimental.data.dataloaders.default_dataloader)": [[225, "neural_compressor.experimental.data.dataloaders.default_dataloader.DefaultDataLoader"]], "default_collate() (in module neural_compressor.experimental.data.dataloaders.default_dataloader)": [[225, "neural_compressor.experimental.data.dataloaders.default_dataloader.default_collate"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[225, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"]], "fetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[226, "neural_compressor.experimental.data.dataloaders.fetcher.Fetcher"]], "indexfetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[226, "neural_compressor.experimental.data.dataloaders.fetcher.IndexFetcher"]], "iterablefetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[226, "neural_compressor.experimental.data.dataloaders.fetcher.IterableFetcher"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[226, "module-neural_compressor.experimental.data.dataloaders.fetcher"]], "neural_compressor.experimental.data.dataloaders": [[227, "module-neural_compressor.experimental.data.dataloaders"]], "mxnetdataloader (class in neural_compressor.experimental.data.dataloaders.mxnet_dataloader)": [[228, "neural_compressor.experimental.data.dataloaders.mxnet_dataloader.MXNetDataLoader"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[228, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"]], "onnxrtbertdataloader (class in neural_compressor.experimental.data.dataloaders.onnxrt_dataloader)": [[229, "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader.ONNXRTBertDataLoader"]], "onnxrtdataloader (class in neural_compressor.experimental.data.dataloaders.onnxrt_dataloader)": [[229, "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader.ONNXRTDataLoader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[229, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"]], "pytorchdataloader (class in neural_compressor.experimental.data.dataloaders.pytorch_dataloader)": [[230, "neural_compressor.experimental.data.dataloaders.pytorch_dataloader.PyTorchDataLoader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[230, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"]], "batchsampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[231, "neural_compressor.experimental.data.dataloaders.sampler.BatchSampler"]], "iterablesampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[231, "neural_compressor.experimental.data.dataloaders.sampler.IterableSampler"]], "sampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[231, "neural_compressor.experimental.data.dataloaders.sampler.Sampler"]], "sequentialsampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[231, "neural_compressor.experimental.data.dataloaders.sampler.SequentialSampler"]], "neural_compressor.experimental.data.dataloaders.sampler": [[231, "module-neural_compressor.experimental.data.dataloaders.sampler"]], "tfdatadataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[232, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TFDataDataLoader"]], "tensorflowbertdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[232, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowBertDataLoader"]], "tensorflowdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[232, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowDataLoader"]], "tensorflowmodelzoobertdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[232, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowModelZooBertDataLoader"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[232, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"]], "inputfeatures (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[233, "neural_compressor.experimental.data.datasets.bert_dataset.InputFeatures"]], "onnxrtbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[233, "neural_compressor.experimental.data.datasets.bert_dataset.ONNXRTBertDataset"]], "parsedecodebert (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[233, "neural_compressor.experimental.data.datasets.bert_dataset.ParseDecodeBert"]], "pytorchbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[233, "neural_compressor.experimental.data.datasets.bert_dataset.PytorchBertDataset"]], "tensorflowbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[233, "neural_compressor.experimental.data.datasets.bert_dataset.TensorflowBertDataset"]], "tensorflowmodelzoobertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[233, "neural_compressor.experimental.data.datasets.bert_dataset.TensorflowModelZooBertDataset"]], "convert_examples_to_features() (in module neural_compressor.experimental.data.datasets.bert_dataset)": [[233, "neural_compressor.experimental.data.datasets.bert_dataset.convert_examples_to_features"]], "load_and_cache_examples() (in module neural_compressor.experimental.data.datasets.bert_dataset)": [[233, "neural_compressor.experimental.data.datasets.bert_dataset.load_and_cache_examples"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[233, "module-neural_compressor.experimental.data.datasets.bert_dataset"]], "coconpy (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[234, "neural_compressor.experimental.data.datasets.coco_dataset.COCONpy"]], "cocoraw (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[234, "neural_compressor.experimental.data.datasets.coco_dataset.COCORaw"]], "cocorecorddataset (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[234, "neural_compressor.experimental.data.datasets.coco_dataset.COCORecordDataset"]], "parsedecodecoco (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[234, "neural_compressor.experimental.data.datasets.coco_dataset.ParseDecodeCoco"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[234, "module-neural_compressor.experimental.data.datasets.coco_dataset"]], "cifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[235, "neural_compressor.experimental.data.datasets.dataset.CIFAR10"]], "cifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[235, "neural_compressor.experimental.data.datasets.dataset.CIFAR100"]], "dataset (class in neural_compressor.experimental.data.datasets.dataset)": [[235, "neural_compressor.experimental.data.datasets.dataset.Dataset"]], "datasets (class in neural_compressor.experimental.data.datasets.dataset)": [[235, "neural_compressor.experimental.data.datasets.dataset.Datasets"]], "fashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[235, "neural_compressor.experimental.data.datasets.dataset.FashionMNIST"]], "imagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[235, "neural_compressor.experimental.data.datasets.dataset.ImageFolder"]], "iterabledataset (class in neural_compressor.experimental.data.datasets.dataset)": [[235, "neural_compressor.experimental.data.datasets.dataset.IterableDataset"]], "mnist (class in neural_compressor.experimental.data.datasets.dataset)": [[235, "neural_compressor.experimental.data.datasets.dataset.MNIST"]], "mxnetcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[235, "neural_compressor.experimental.data.datasets.dataset.MXNetCIFAR10"]], "mxnetcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[235, "neural_compressor.experimental.data.datasets.dataset.MXNetCIFAR100"]], "mxnetdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[235, "neural_compressor.experimental.data.datasets.dataset.MXNetDatasets"]], "mxnetfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[235, "neural_compressor.experimental.data.datasets.dataset.MXNetFashionMNIST"]], "mxnetimagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[235, "neural_compressor.experimental.data.datasets.dataset.MXNetImageFolder"]], "mxnetmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[235, "neural_compressor.experimental.data.datasets.dataset.MXNetMNIST"]], "onnxrtitdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[235, "neural_compressor.experimental.data.datasets.dataset.ONNXRTITDatasets"]], "onnxrtqldatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[235, "neural_compressor.experimental.data.datasets.dataset.ONNXRTQLDatasets"]], "pytorchdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[235, "neural_compressor.experimental.data.datasets.dataset.PyTorchDatasets"]], "pytorchcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[235, "neural_compressor.experimental.data.datasets.dataset.PytorchCIFAR10"]], "pytorchcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[235, "neural_compressor.experimental.data.datasets.dataset.PytorchCIFAR100"]], "pytorchfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[235, "neural_compressor.experimental.data.datasets.dataset.PytorchFashionMNIST"]], "pytorchmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[235, "neural_compressor.experimental.data.datasets.dataset.PytorchMNIST"]], "pytorchmxnetwrapdataset (class in neural_compressor.experimental.data.datasets.dataset)": [[235, "neural_compressor.experimental.data.datasets.dataset.PytorchMxnetWrapDataset"]], "pytorchmxnetwrapfunction (class in neural_compressor.experimental.data.datasets.dataset)": [[235, "neural_compressor.experimental.data.datasets.dataset.PytorchMxnetWrapFunction"]], "tensorflowcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[235, "neural_compressor.experimental.data.datasets.dataset.TensorflowCIFAR10"]], "tensorflowcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[235, "neural_compressor.experimental.data.datasets.dataset.TensorflowCIFAR100"]], "tensorflowdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[235, "neural_compressor.experimental.data.datasets.dataset.TensorflowDatasets"]], "tensorflowfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[235, "neural_compressor.experimental.data.datasets.dataset.TensorflowFashionMNIST"]], "tensorflowimagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[235, "neural_compressor.experimental.data.datasets.dataset.TensorflowImageFolder"]], "tensorflowimagerecord (class in neural_compressor.experimental.data.datasets.dataset)": [[235, "neural_compressor.experimental.data.datasets.dataset.TensorflowImageRecord"]], "tensorflowmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[235, "neural_compressor.experimental.data.datasets.dataset.TensorflowMNIST"]], "tensorflowtfrecorddataset (class in neural_compressor.experimental.data.datasets.dataset)": [[235, "neural_compressor.experimental.data.datasets.dataset.TensorflowTFRecordDataset"]], "tensorflowvocrecord (class in neural_compressor.experimental.data.datasets.dataset)": [[235, "neural_compressor.experimental.data.datasets.dataset.TensorflowVOCRecord"]], "calculate_md5() (in module neural_compressor.experimental.data.datasets.dataset)": [[235, "neural_compressor.experimental.data.datasets.dataset.calculate_md5"]], "check_integrity() (in module neural_compressor.experimental.data.datasets.dataset)": [[235, "neural_compressor.experimental.data.datasets.dataset.check_integrity"]], "dataset_registry() (in module neural_compressor.experimental.data.datasets.dataset)": [[235, "neural_compressor.experimental.data.datasets.dataset.dataset_registry"]], "download_url() (in module neural_compressor.experimental.data.datasets.dataset)": [[235, "neural_compressor.experimental.data.datasets.dataset.download_url"]], "framework_datasets (in module neural_compressor.experimental.data.datasets.dataset)": [[235, "neural_compressor.experimental.data.datasets.dataset.framework_datasets"]], "gen_bar_updater() (in module neural_compressor.experimental.data.datasets.dataset)": [[235, "neural_compressor.experimental.data.datasets.dataset.gen_bar_updater"]], "neural_compressor.experimental.data.datasets.dataset": [[235, "module-neural_compressor.experimental.data.datasets.dataset"]], "dummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset)": [[236, "neural_compressor.experimental.data.datasets.dummy_dataset.DummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[236, "module-neural_compressor.experimental.data.datasets.dummy_dataset"]], "dummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset_v2)": [[237, "neural_compressor.experimental.data.datasets.dummy_dataset_v2.DummyDataset"]], "sparsedummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset_v2)": [[237, "neural_compressor.experimental.data.datasets.dummy_dataset_v2.SparseDummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[237, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"]], "imagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[238, "neural_compressor.experimental.data.datasets.imagenet_dataset.ImagenetRaw"]], "mxnetimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[238, "neural_compressor.experimental.data.datasets.imagenet_dataset.MXNetImagenetRaw"]], "onnxrtimagenetdataset (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[238, "neural_compressor.experimental.data.datasets.imagenet_dataset.ONNXRTImagenetDataset"]], "pytorchimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[238, "neural_compressor.experimental.data.datasets.imagenet_dataset.PytorchImagenetRaw"]], "tensorflowimagenetdataset (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[238, "neural_compressor.experimental.data.datasets.imagenet_dataset.TensorflowImagenetDataset"]], "tensorflowimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[238, "neural_compressor.experimental.data.datasets.imagenet_dataset.TensorflowImagenetRaw"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[238, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"]], "neural_compressor.experimental.data.datasets": [[239, "module-neural_compressor.experimental.data.datasets"]], "styletransferdataset (class in neural_compressor.experimental.data.datasets.style_transfer_dataset)": [[240, "neural_compressor.experimental.data.datasets.style_transfer_dataset.StyleTransferDataset"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[240, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"]], "labelbalancecocorawfilter (class in neural_compressor.experimental.data.filters.coco_filter)": [[241, "neural_compressor.experimental.data.filters.coco_filter.LabelBalanceCOCORawFilter"]], "labelbalancecocorecordfilter (class in neural_compressor.experimental.data.filters.coco_filter)": [[241, "neural_compressor.experimental.data.filters.coco_filter.LabelBalanceCOCORecordFilter"]], "neural_compressor.experimental.data.filters.coco_filter": [[241, "module-neural_compressor.experimental.data.filters.coco_filter"]], "filters (class in neural_compressor.experimental.data.filters.filter)": [[242, "neural_compressor.experimental.data.filters.filter.FILTERS"]], "filter (class in neural_compressor.experimental.data.filters.filter)": [[242, "neural_compressor.experimental.data.filters.filter.Filter"]], "mxnetfilters (class in neural_compressor.experimental.data.filters.filter)": [[242, "neural_compressor.experimental.data.filters.filter.MXNetFilters"]], "onnxrtitfilters (class in neural_compressor.experimental.data.filters.filter)": [[242, "neural_compressor.experimental.data.filters.filter.ONNXRTITFilters"]], "onnxrtqlfilters (class in neural_compressor.experimental.data.filters.filter)": [[242, "neural_compressor.experimental.data.filters.filter.ONNXRTQLFilters"]], "pytorchfilters (class in neural_compressor.experimental.data.filters.filter)": [[242, "neural_compressor.experimental.data.filters.filter.PyTorchFilters"]], "tensorflowfilters (class in neural_compressor.experimental.data.filters.filter)": [[242, "neural_compressor.experimental.data.filters.filter.TensorflowFilters"]], "filter_registry() (in module neural_compressor.experimental.data.filters.filter)": [[242, "neural_compressor.experimental.data.filters.filter.filter_registry"]], "neural_compressor.experimental.data.filters.filter": [[242, "module-neural_compressor.experimental.data.filters.filter"]], "neural_compressor.experimental.data.filters": [[243, "module-neural_compressor.experimental.data.filters"]], "neural_compressor.experimental.data": [[244, "module-neural_compressor.experimental.data"]], "bilinearimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[245, "neural_compressor.experimental.data.transforms.imagenet_transform.BilinearImagenetTransform"]], "labelshift (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[245, "neural_compressor.experimental.data.transforms.imagenet_transform.LabelShift"]], "onnxresizecropimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[245, "neural_compressor.experimental.data.transforms.imagenet_transform.ONNXResizeCropImagenetTransform"]], "onnxbilinearimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[245, "neural_compressor.experimental.data.transforms.imagenet_transform.OnnxBilinearImagenetTransform"]], "parsedecodeimagenet (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[245, "neural_compressor.experimental.data.transforms.imagenet_transform.ParseDecodeImagenet"]], "parsedecodeimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[245, "neural_compressor.experimental.data.transforms.imagenet_transform.ParseDecodeImagenetTransform"]], "quantizedinput (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[245, "neural_compressor.experimental.data.transforms.imagenet_transform.QuantizedInput"]], "resizewithaspectratio (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[245, "neural_compressor.experimental.data.transforms.imagenet_transform.ResizeWithAspectRatio"]], "tensorflowresizecropimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[245, "neural_compressor.experimental.data.transforms.imagenet_transform.TensorflowResizeCropImagenetTransform"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[245, "module-neural_compressor.experimental.data.transforms.imagenet_transform"]], "neural_compressor.experimental.data.transforms": [[246, "module-neural_compressor.experimental.data.transforms"]], "basictokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[247, "neural_compressor.experimental.data.transforms.tokenization.BasicTokenizer"]], "fulltokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[247, "neural_compressor.experimental.data.transforms.tokenization.FullTokenizer"]], "wordpiecetokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[247, "neural_compressor.experimental.data.transforms.tokenization.WordpieceTokenizer"]], "convert_by_vocab() (in module neural_compressor.experimental.data.transforms.tokenization)": [[247, "neural_compressor.experimental.data.transforms.tokenization.convert_by_vocab"]], "convert_to_unicode() (in module neural_compressor.experimental.data.transforms.tokenization)": [[247, "neural_compressor.experimental.data.transforms.tokenization.convert_to_unicode"]], "load_vocab() (in module neural_compressor.experimental.data.transforms.tokenization)": [[247, "neural_compressor.experimental.data.transforms.tokenization.load_vocab"]], "neural_compressor.experimental.data.transforms.tokenization": [[247, "module-neural_compressor.experimental.data.transforms.tokenization"]], "whitespace_tokenize() (in module neural_compressor.experimental.data.transforms.tokenization)": [[247, "neural_compressor.experimental.data.transforms.tokenization.whitespace_tokenize"]], "alignimagechanneltransform (class in neural_compressor.experimental.data.transforms.transform)": [[248, "neural_compressor.experimental.data.transforms.transform.AlignImageChannelTransform"]], "basetransform (class in neural_compressor.experimental.data.transforms.transform)": [[248, "neural_compressor.experimental.data.transforms.transform.BaseTransform"]], "castonnxtransform (class in neural_compressor.experimental.data.transforms.transform)": [[248, "neural_compressor.experimental.data.transforms.transform.CastONNXTransform"]], "castpytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[248, "neural_compressor.experimental.data.transforms.transform.CastPyTorchTransform"]], "casttftransform (class in neural_compressor.experimental.data.transforms.transform)": [[248, "neural_compressor.experimental.data.transforms.transform.CastTFTransform"]], "centercroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[248, "neural_compressor.experimental.data.transforms.transform.CenterCropTFTransform"]], "centercroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[248, "neural_compressor.experimental.data.transforms.transform.CenterCropTransform"]], "collecttransform (class in neural_compressor.experimental.data.transforms.transform)": [[248, "neural_compressor.experimental.data.transforms.transform.CollectTransform"]], "composetransform (class in neural_compressor.experimental.data.transforms.transform)": [[248, "neural_compressor.experimental.data.transforms.transform.ComposeTransform"]], "cropresizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[248, "neural_compressor.experimental.data.transforms.transform.CropResizeTFTransform"]], "cropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[248, "neural_compressor.experimental.data.transforms.transform.CropResizeTransform"]], "croptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[248, "neural_compressor.experimental.data.transforms.transform.CropToBoundingBox"]], "inputfeatures (class in neural_compressor.experimental.data.transforms.transform)": [[248, "neural_compressor.experimental.data.transforms.transform.InputFeatures"]], "mxnetcropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[248, "neural_compressor.experimental.data.transforms.transform.MXNetCropResizeTransform"]], "mxnetcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[248, "neural_compressor.experimental.data.transforms.transform.MXNetCropToBoundingBox"]], "mxnetnormalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[248, "neural_compressor.experimental.data.transforms.transform.MXNetNormalizeTransform"]], "mxnettransforms (class in neural_compressor.experimental.data.transforms.transform)": [[248, "neural_compressor.experimental.data.transforms.transform.MXNetTransforms"]], "mxnettranspose (class in neural_compressor.experimental.data.transforms.transform)": [[248, "neural_compressor.experimental.data.transforms.transform.MXNetTranspose"]], "normalizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[248, "neural_compressor.experimental.data.transforms.transform.NormalizeTFTransform"]], "normalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[248, "neural_compressor.experimental.data.transforms.transform.NormalizeTransform"]], "onnxrtcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[248, "neural_compressor.experimental.data.transforms.transform.ONNXRTCropToBoundingBox"]], "onnxrtittransforms (class in neural_compressor.experimental.data.transforms.transform)": [[248, "neural_compressor.experimental.data.transforms.transform.ONNXRTITTransforms"]], "onnxrtqltransforms (class in neural_compressor.experimental.data.transforms.transform)": [[248, "neural_compressor.experimental.data.transforms.transform.ONNXRTQLTransforms"]], "paddedcentercroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[248, "neural_compressor.experimental.data.transforms.transform.PaddedCenterCropTransform"]], "parsedecodevoctransform (class in neural_compressor.experimental.data.transforms.transform)": [[248, "neural_compressor.experimental.data.transforms.transform.ParseDecodeVocTransform"]], "pytorchalignimagechannel (class in neural_compressor.experimental.data.transforms.transform)": [[248, "neural_compressor.experimental.data.transforms.transform.PyTorchAlignImageChannel"]], "pytorchcropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[248, "neural_compressor.experimental.data.transforms.transform.PyTorchCropResizeTransform"]], "pytorchnormalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[248, "neural_compressor.experimental.data.transforms.transform.PyTorchNormalizeTransform"]], "pytorchtransforms (class in neural_compressor.experimental.data.transforms.transform)": [[248, "neural_compressor.experimental.data.transforms.transform.PyTorchTransforms"]], "pytorchtranspose (class in neural_compressor.experimental.data.transforms.transform)": [[248, "neural_compressor.experimental.data.transforms.transform.PyTorchTranspose"]], "pytorchmxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[248, "neural_compressor.experimental.data.transforms.transform.PytorchMxnetTransform"]], "pytorchmxnetwrapfunction (class in neural_compressor.experimental.data.transforms.transform)": [[248, "neural_compressor.experimental.data.transforms.transform.PytorchMxnetWrapFunction"]], "randomcroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[248, "neural_compressor.experimental.data.transforms.transform.RandomCropTFTransform"]], "randomcroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[248, "neural_compressor.experimental.data.transforms.transform.RandomCropTransform"]], "randomhorizontalflip (class in neural_compressor.experimental.data.transforms.transform)": [[248, "neural_compressor.experimental.data.transforms.transform.RandomHorizontalFlip"]], "randomresizedcropmxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[248, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropMXNetTransform"]], "randomresizedcroppytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[248, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropPytorchTransform"]], "randomresizedcroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[248, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTFTransform"]], "randomresizedcroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[248, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTransform"]], "randomverticalflip (class in neural_compressor.experimental.data.transforms.transform)": [[248, "neural_compressor.experimental.data.transforms.transform.RandomVerticalFlip"]], "rescalekeraspretraintransform (class in neural_compressor.experimental.data.transforms.transform)": [[248, "neural_compressor.experimental.data.transforms.transform.RescaleKerasPretrainTransform"]], "rescaletftransform (class in neural_compressor.experimental.data.transforms.transform)": [[248, "neural_compressor.experimental.data.transforms.transform.RescaleTFTransform"]], "rescaletransform (class in neural_compressor.experimental.data.transforms.transform)": [[248, "neural_compressor.experimental.data.transforms.transform.RescaleTransform"]], "resizemxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[248, "neural_compressor.experimental.data.transforms.transform.ResizeMXNetTransform"]], "resizepytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[248, "neural_compressor.experimental.data.transforms.transform.ResizePytorchTransform"]], "resizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[248, "neural_compressor.experimental.data.transforms.transform.ResizeTFTransform"]], "resizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[248, "neural_compressor.experimental.data.transforms.transform.ResizeTransform"]], "resizewithratio (class in neural_compressor.experimental.data.transforms.transform)": [[248, "neural_compressor.experimental.data.transforms.transform.ResizeWithRatio"]], "squadexample (class in neural_compressor.experimental.data.transforms.transform)": [[248, "neural_compressor.experimental.data.transforms.transform.SquadExample"]], "tfmodelzoocollecttransform (class in neural_compressor.experimental.data.transforms.transform)": [[248, "neural_compressor.experimental.data.transforms.transform.TFModelZooCollectTransform"]], "tfsquadv1modelzooposttransform (class in neural_compressor.experimental.data.transforms.transform)": [[248, "neural_compressor.experimental.data.transforms.transform.TFSquadV1ModelZooPostTransform"]], "tfsquadv1posttransform (class in neural_compressor.experimental.data.transforms.transform)": [[248, "neural_compressor.experimental.data.transforms.transform.TFSquadV1PostTransform"]], "transforms (class in neural_compressor.experimental.data.transforms.transform)": [[248, "neural_compressor.experimental.data.transforms.transform.TRANSFORMS"], [248, "neural_compressor.experimental.data.transforms.transform.Transforms"]], "tensorflowcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[248, "neural_compressor.experimental.data.transforms.transform.TensorflowCropToBoundingBox"]], "tensorflowrandomhorizontalflip (class in neural_compressor.experimental.data.transforms.transform)": [[248, "neural_compressor.experimental.data.transforms.transform.TensorflowRandomHorizontalFlip"]], "tensorflowrandomverticalflip (class in neural_compressor.experimental.data.transforms.transform)": [[248, "neural_compressor.experimental.data.transforms.transform.TensorflowRandomVerticalFlip"]], "tensorflowresizewithratio (class in neural_compressor.experimental.data.transforms.transform)": [[248, "neural_compressor.experimental.data.transforms.transform.TensorflowResizeWithRatio"]], "tensorflowtransform (class in neural_compressor.experimental.data.transforms.transform)": [[248, "neural_compressor.experimental.data.transforms.transform.TensorflowTransform"]], "tensorflowtransforms (class in neural_compressor.experimental.data.transforms.transform)": [[248, "neural_compressor.experimental.data.transforms.transform.TensorflowTransforms"]], "tensorflowtranspose (class in neural_compressor.experimental.data.transforms.transform)": [[248, "neural_compressor.experimental.data.transforms.transform.TensorflowTranspose"]], "tensorflowwrapfunction (class in neural_compressor.experimental.data.transforms.transform)": [[248, "neural_compressor.experimental.data.transforms.transform.TensorflowWrapFunction"]], "toarray (class in neural_compressor.experimental.data.transforms.transform)": [[248, "neural_compressor.experimental.data.transforms.transform.ToArray"]], "tondarraytransform (class in neural_compressor.experimental.data.transforms.transform)": [[248, "neural_compressor.experimental.data.transforms.transform.ToNDArrayTransform"]], "transpose (class in neural_compressor.experimental.data.transforms.transform)": [[248, "neural_compressor.experimental.data.transforms.transform.Transpose"]], "convert_examples_to_features() (in module neural_compressor.experimental.data.transforms.transform)": [[248, "neural_compressor.experimental.data.transforms.transform.convert_examples_to_features"]], "get_final_text() (in module neural_compressor.experimental.data.transforms.transform)": [[248, "neural_compressor.experimental.data.transforms.transform.get_final_text"]], "get_torchvision_map() (in module neural_compressor.experimental.data.transforms.transform)": [[248, "neural_compressor.experimental.data.transforms.transform.get_torchvision_map"]], "neural_compressor.experimental.data.transforms.transform": [[248, "module-neural_compressor.experimental.data.transforms.transform"]], "read_squad_examples() (in module neural_compressor.experimental.data.transforms.transform)": [[248, "neural_compressor.experimental.data.transforms.transform.read_squad_examples"]], "transform_registry() (in module neural_compressor.experimental.data.transforms.transform)": [[248, "neural_compressor.experimental.data.transforms.transform.transform_registry"]], "distillation (class in neural_compressor.experimental.distillation)": [[249, "neural_compressor.experimental.distillation.Distillation"]], "_epoch_ran (neural_compressor.experimental.distillation.distillation attribute)": [[249, "neural_compressor.experimental.distillation.Distillation._epoch_ran"]], "best_model (neural_compressor.experimental.distillation.distillation attribute)": [[249, "neural_compressor.experimental.distillation.Distillation.best_model"]], "best_score (neural_compressor.experimental.distillation.distillation attribute)": [[249, "neural_compressor.experimental.distillation.Distillation.best_score"]], "eval_frequency (neural_compressor.experimental.distillation.distillation attribute)": [[249, "neural_compressor.experimental.distillation.Distillation.eval_frequency"]], "neural_compressor.experimental.distillation": [[249, "module-neural_compressor.experimental.distillation"]], "neural_compressor.experimental.export": [[250, "module-neural_compressor.experimental.export"]], "check_model() (in module neural_compressor.experimental.export.qlinear2qdq)": [[251, "neural_compressor.experimental.export.qlinear2qdq.check_model"]], "neural_compressor.experimental.export.qlinear2qdq": [[251, "module-neural_compressor.experimental.export.qlinear2qdq"]], "onnx_qlinear_to_qdq() (in module neural_compressor.experimental.export.qlinear2qdq)": [[251, "neural_compressor.experimental.export.qlinear2qdq.onnx_qlinear_to_qdq"]], "neural_compressor.experimental.export.tf2onnx": [[252, "module-neural_compressor.experimental.export.tf2onnx"]], "tf_to_fp32_onnx() (in module neural_compressor.experimental.export.tf2onnx)": [[252, "neural_compressor.experimental.export.tf2onnx.tf_to_fp32_onnx"]], "tf_to_int8_onnx() (in module neural_compressor.experimental.export.tf2onnx)": [[252, "neural_compressor.experimental.export.tf2onnx.tf_to_int8_onnx"]], "build_scale_mapping() (in module neural_compressor.experimental.export.torch2onnx)": [[253, "neural_compressor.experimental.export.torch2onnx.build_scale_mapping"]], "get_node_mapping() (in module neural_compressor.experimental.export.torch2onnx)": [[253, "neural_compressor.experimental.export.torch2onnx.get_node_mapping"]], "get_quantizable_onnx_ops() (in module neural_compressor.experimental.export.torch2onnx)": [[253, "neural_compressor.experimental.export.torch2onnx.get_quantizable_onnx_ops"]], "neural_compressor.experimental.export.torch2onnx": [[253, "module-neural_compressor.experimental.export.torch2onnx"]], "qdq_fp32_bias() (in module neural_compressor.experimental.export.torch2onnx)": [[253, "neural_compressor.experimental.export.torch2onnx.qdq_fp32_bias"]], "qdq_fp32_bias_qdq() (in module neural_compressor.experimental.export.torch2onnx)": [[253, "neural_compressor.experimental.export.torch2onnx.qdq_fp32_bias_qdq"]], "qdq_int32_bias() (in module neural_compressor.experimental.export.torch2onnx)": [[253, "neural_compressor.experimental.export.torch2onnx.qdq_int32_bias"]], "recalculate_bias() (in module neural_compressor.experimental.export.torch2onnx)": [[253, "neural_compressor.experimental.export.torch2onnx.recalculate_bias"]], "remove_nodes_by_name() (in module neural_compressor.experimental.export.torch2onnx)": [[253, "neural_compressor.experimental.export.torch2onnx.remove_nodes_by_name"]], "set_data_type() (in module neural_compressor.experimental.export.torch2onnx)": [[253, "neural_compressor.experimental.export.torch2onnx.set_data_type"]], "set_scale_info() (in module neural_compressor.experimental.export.torch2onnx)": [[253, "neural_compressor.experimental.export.torch2onnx.set_scale_info"]], "sub_graph_with_int32_bias() (in module neural_compressor.experimental.export.torch2onnx)": [[253, "neural_compressor.experimental.export.torch2onnx.sub_graph_with_int32_bias"]], "torch_to_fp32_onnx() (in module neural_compressor.experimental.export.torch2onnx)": [[253, "neural_compressor.experimental.export.torch2onnx.torch_to_fp32_onnx"]], "torch_to_int8_onnx() (in module neural_compressor.experimental.export.torch2onnx)": [[253, "neural_compressor.experimental.export.torch2onnx.torch_to_int8_onnx"]], "update_weight_bias() (in module neural_compressor.experimental.export.torch2onnx)": [[253, "neural_compressor.experimental.export.torch2onnx.update_weight_bias"]], "dummydatareader (class in neural_compressor.experimental.export.utils)": [[254, "neural_compressor.experimental.export.utils.DummyDataReader"]], "onnx2numpy_dtype() (in module neural_compressor.experimental.export.utils)": [[254, "neural_compressor.experimental.export.utils.ONNX2Numpy_dtype"]], "neural_compressor.experimental.export.utils": [[254, "module-neural_compressor.experimental.export.utils"]], "graph_optimization (class in neural_compressor.experimental.graph_optimization)": [[255, "neural_compressor.experimental.graph_optimization.Graph_Optimization"]], "neural_compressor.experimental.graph_optimization": [[255, "module-neural_compressor.experimental.graph_optimization"]], "neural_compressor.experimental": [[256, "module-neural_compressor.experimental"]], "bleu (class in neural_compressor.experimental.metric.bleu)": [[257, "neural_compressor.experimental.metric.bleu.BLEU"]], "unicoderegex (class in neural_compressor.experimental.metric.bleu)": [[257, "neural_compressor.experimental.metric.bleu.UnicodeRegex"]], "bleu_tokenize() (in module neural_compressor.experimental.metric.bleu)": [[257, "neural_compressor.experimental.metric.bleu.bleu_tokenize"]], "labels (neural_compressor.experimental.metric.bleu.bleu attribute)": [[257, "neural_compressor.experimental.metric.bleu.BLEU.labels"]], "neural_compressor.experimental.metric.bleu": [[257, "module-neural_compressor.experimental.metric.bleu"]], "nondigit_punct_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[257, "neural_compressor.experimental.metric.bleu.UnicodeRegex.nondigit_punct_re"]], "predictions (neural_compressor.experimental.metric.bleu.bleu attribute)": [[257, "neural_compressor.experimental.metric.bleu.BLEU.predictions"]], "punct_nondigit_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[257, "neural_compressor.experimental.metric.bleu.UnicodeRegex.punct_nondigit_re"]], "symbol_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[257, "neural_compressor.experimental.metric.bleu.UnicodeRegex.symbol_re"]], "compute_bleu() (in module neural_compressor.experimental.metric.bleu_util)": [[258, "neural_compressor.experimental.metric.bleu_util.compute_bleu"]], "neural_compressor.experimental.metric.bleu_util": [[258, "module-neural_compressor.experimental.metric.bleu_util"]], "neural_compressor.experimental.metric.coco_label_map": [[259, "module-neural_compressor.experimental.metric.coco_label_map"]], "cocoevalwrapper (class in neural_compressor.experimental.metric.coco_tools)": [[260, "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper"]], "cocowrapper (class in neural_compressor.experimental.metric.coco_tools)": [[260, "neural_compressor.experimental.metric.coco_tools.COCOWrapper"]], "exportsingleimagedetectionboxestococo() (in module neural_compressor.experimental.metric.coco_tools)": [[260, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageDetectionBoxesToCoco"]], "exportsingleimagedetectionmaskstococo() (in module neural_compressor.experimental.metric.coco_tools)": [[260, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageDetectionMasksToCoco"]], "exportsingleimagegroundtruthtococo() (in module neural_compressor.experimental.metric.coco_tools)": [[260, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageGroundtruthToCoco"]], "dataset (neural_compressor.experimental.metric.coco_tools.cocowrapper attribute)": [[260, "neural_compressor.experimental.metric.coco_tools.COCOWrapper.dataset"]], "detection_type (neural_compressor.experimental.metric.coco_tools.cocowrapper attribute)": [[260, "neural_compressor.experimental.metric.coco_tools.COCOWrapper.detection_type"]], "neural_compressor.experimental.metric.coco_tools": [[260, "module-neural_compressor.experimental.metric.coco_tools"]], "evaluate() (in module neural_compressor.experimental.metric.evaluate_squad)": [[261, "neural_compressor.experimental.metric.evaluate_squad.evaluate"]], "exact_match_score() (in module neural_compressor.experimental.metric.evaluate_squad)": [[261, "neural_compressor.experimental.metric.evaluate_squad.exact_match_score"]], "f1_score() (in module neural_compressor.experimental.metric.evaluate_squad)": [[261, "neural_compressor.experimental.metric.evaluate_squad.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.experimental.metric.evaluate_squad)": [[261, "neural_compressor.experimental.metric.evaluate_squad.metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.evaluate_squad": [[261, "module-neural_compressor.experimental.metric.evaluate_squad"]], "evaluate() (in module neural_compressor.experimental.metric.f1)": [[262, "neural_compressor.experimental.metric.f1.evaluate"]], "f1_score() (in module neural_compressor.experimental.metric.f1)": [[262, "neural_compressor.experimental.metric.f1.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.experimental.metric.f1)": [[262, "neural_compressor.experimental.metric.f1.metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.f1": [[262, "module-neural_compressor.experimental.metric.f1"]], "normalize_answer() (in module neural_compressor.experimental.metric.f1)": [[262, "neural_compressor.experimental.metric.f1.normalize_answer"]], "neural_compressor.experimental.metric": [[263, "module-neural_compressor.experimental.metric"]], "accuracy (class in neural_compressor.experimental.metric.metric)": [[264, "neural_compressor.experimental.metric.metric.Accuracy"]], "basemetric (class in neural_compressor.experimental.metric.metric)": [[264, "neural_compressor.experimental.metric.metric.BaseMetric"]], "cocomapv2 (class in neural_compressor.experimental.metric.metric)": [[264, "neural_compressor.experimental.metric.metric.COCOmAPv2"]], "f1 (class in neural_compressor.experimental.metric.metric)": [[264, "neural_compressor.experimental.metric.metric.F1"]], "generaltopk (class in neural_compressor.experimental.metric.metric)": [[264, "neural_compressor.experimental.metric.metric.GeneralTopK"]], "loss (class in neural_compressor.experimental.metric.metric)": [[264, "neural_compressor.experimental.metric.metric.Loss"]], "mae (class in neural_compressor.experimental.metric.metric)": [[264, "neural_compressor.experimental.metric.metric.MAE"]], "metrics (class in neural_compressor.experimental.metric.metric)": [[264, "neural_compressor.experimental.metric.metric.METRICS"]], "mse (class in neural_compressor.experimental.metric.metric)": [[264, "neural_compressor.experimental.metric.metric.MSE"]], "mxnetmetrics (class in neural_compressor.experimental.metric.metric)": [[264, "neural_compressor.experimental.metric.metric.MXNetMetrics"]], "onnxrtglue (class in neural_compressor.experimental.metric.metric)": [[264, "neural_compressor.experimental.metric.metric.ONNXRTGLUE"]], "onnxrtitmetrics (class in neural_compressor.experimental.metric.metric)": [[264, "neural_compressor.experimental.metric.metric.ONNXRTITMetrics"]], "onnxrtqlmetrics (class in neural_compressor.experimental.metric.metric)": [[264, "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics"]], "pytorchloss (class in neural_compressor.experimental.metric.metric)": [[264, "neural_compressor.experimental.metric.metric.PyTorchLoss"]], "pytorchmetrics (class in neural_compressor.experimental.metric.metric)": [[264, "neural_compressor.experimental.metric.metric.PyTorchMetrics"]], "rmse (class in neural_compressor.experimental.metric.metric)": [[264, "neural_compressor.experimental.metric.metric.RMSE"]], "roc (class in neural_compressor.experimental.metric.metric)": [[264, "neural_compressor.experimental.metric.metric.ROC"]], "squadf1 (class in neural_compressor.experimental.metric.metric)": [[264, "neural_compressor.experimental.metric.metric.SquadF1"]], "tensorflowcocomap (class in neural_compressor.experimental.metric.metric)": [[264, "neural_compressor.experimental.metric.metric.TensorflowCOCOMAP"]], "tensorflowmap (class in neural_compressor.experimental.metric.metric)": [[264, "neural_compressor.experimental.metric.metric.TensorflowMAP"]], "tensorflowmetrics (class in neural_compressor.experimental.metric.metric)": [[264, "neural_compressor.experimental.metric.metric.TensorflowMetrics"]], "tensorflowtopk (class in neural_compressor.experimental.metric.metric)": [[264, "neural_compressor.experimental.metric.metric.TensorflowTopK"]], "tensorflowvocmap (class in neural_compressor.experimental.metric.metric)": [[264, "neural_compressor.experimental.metric.metric.TensorflowVOCMAP"]], "wrapmxnetmetric (class in neural_compressor.experimental.metric.metric)": [[264, "neural_compressor.experimental.metric.metric.WrapMXNetMetric"]], "wraponnxrtmetric (class in neural_compressor.experimental.metric.metric)": [[264, "neural_compressor.experimental.metric.metric.WrapONNXRTMetric"]], "wrappytorchmetric (class in neural_compressor.experimental.metric.metric)": [[264, "neural_compressor.experimental.metric.metric.WrapPyTorchMetric"]], "compare_label (neural_compressor.experimental.metric.metric.mae attribute)": [[264, "neural_compressor.experimental.metric.metric.MAE.compare_label"]], "compare_label (neural_compressor.experimental.metric.metric.mse attribute)": [[264, "neural_compressor.experimental.metric.metric.MSE.compare_label"]], "k (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[264, "neural_compressor.experimental.metric.metric.GeneralTopK.k"]], "k (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[264, "neural_compressor.experimental.metric.metric.TensorflowTopK.k"]], "label_list (neural_compressor.experimental.metric.metric.accuracy attribute)": [[264, "neural_compressor.experimental.metric.metric.Accuracy.label_list"]], "label_list (neural_compressor.experimental.metric.metric.mae attribute)": [[264, "neural_compressor.experimental.metric.metric.MAE.label_list"]], "label_list (neural_compressor.experimental.metric.metric.mse attribute)": [[264, "neural_compressor.experimental.metric.metric.MSE.label_list"]], "miou (class in neural_compressor.experimental.metric.metric)": [[264, "neural_compressor.experimental.metric.metric.mIOU"]], "metric_registry() (in module neural_compressor.experimental.metric.metric)": [[264, "neural_compressor.experimental.metric.metric.metric_registry"]], "metrics (neural_compressor.experimental.metric.metric.metrics attribute)": [[264, "neural_compressor.experimental.metric.metric.METRICS.metrics"]], "metrics (neural_compressor.experimental.metric.metric.mxnetmetrics attribute)": [[264, "neural_compressor.experimental.metric.metric.MXNetMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.onnxrtitmetrics attribute)": [[264, "neural_compressor.experimental.metric.metric.ONNXRTITMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.onnxrtqlmetrics attribute)": [[264, "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.pytorchmetrics attribute)": [[264, "neural_compressor.experimental.metric.metric.PyTorchMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.tensorflowmetrics attribute)": [[264, "neural_compressor.experimental.metric.metric.TensorflowMetrics.metrics"]], "mse (neural_compressor.experimental.metric.metric.rmse attribute)": [[264, "neural_compressor.experimental.metric.metric.RMSE.mse"]], "neural_compressor.experimental.metric.metric": [[264, "module-neural_compressor.experimental.metric.metric"]], "num_correct (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[264, "neural_compressor.experimental.metric.metric.GeneralTopK.num_correct"]], "num_correct (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[264, "neural_compressor.experimental.metric.metric.TensorflowTopK.num_correct"]], "num_sample (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[264, "neural_compressor.experimental.metric.metric.GeneralTopK.num_sample"]], "num_sample (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[264, "neural_compressor.experimental.metric.metric.TensorflowTopK.num_sample"]], "pred_list (neural_compressor.experimental.metric.metric.accuracy attribute)": [[264, "neural_compressor.experimental.metric.metric.Accuracy.pred_list"]], "pred_list (neural_compressor.experimental.metric.metric.mae attribute)": [[264, "neural_compressor.experimental.metric.metric.MAE.pred_list"]], "pred_list (neural_compressor.experimental.metric.metric.mse attribute)": [[264, "neural_compressor.experimental.metric.metric.MSE.pred_list"]], "sample (neural_compressor.experimental.metric.metric.accuracy attribute)": [[264, "neural_compressor.experimental.metric.metric.Accuracy.sample"]], "sample (neural_compressor.experimental.metric.metric.loss attribute)": [[264, "neural_compressor.experimental.metric.metric.Loss.sample"]], "sum (neural_compressor.experimental.metric.metric.loss attribute)": [[264, "neural_compressor.experimental.metric.metric.Loss.sum"]], "mixedprecision (class in neural_compressor.experimental.mixed_precision)": [[265, "neural_compressor.experimental.mixed_precision.MixedPrecision"]], "neural_compressor.experimental.mixed_precision": [[265, "module-neural_compressor.experimental.mixed_precision"]], "modelconversion (class in neural_compressor.experimental.model_conversion)": [[266, "neural_compressor.experimental.model_conversion.ModelConversion"]], "neural_compressor.experimental.model_conversion": [[266, "module-neural_compressor.experimental.model_conversion"]], "basicnas (class in neural_compressor.experimental.nas.basic_nas)": [[267, "neural_compressor.experimental.nas.basic_nas.BasicNAS"]], "neural_compressor.experimental.nas.basic_nas": [[267, "module-neural_compressor.experimental.nas.basic_nas"]], "dynas (class in neural_compressor.experimental.nas.dynas)": [[268, "neural_compressor.experimental.nas.dynas.DyNAS"]], "neural_compressor.experimental.nas.dynas": [[268, "module-neural_compressor.experimental.nas.dynas"]], "neural_compressor.experimental.nas": [[269, "module-neural_compressor.experimental.nas"]], "nas (class in neural_compressor.experimental.nas.nas)": [[270, "neural_compressor.experimental.nas.nas.NAS"]], "nasbase (class in neural_compressor.experimental.nas.nas)": [[270, "neural_compressor.experimental.nas.nas.NASBase"]], "neural_compressor.experimental.nas.nas": [[270, "module-neural_compressor.experimental.nas.nas"]], "create_search_space_pool() (in module neural_compressor.experimental.nas.nas_utils)": [[271, "neural_compressor.experimental.nas.nas_utils.create_search_space_pool"]], "find_pareto_front() (in module neural_compressor.experimental.nas.nas_utils)": [[271, "neural_compressor.experimental.nas.nas_utils.find_pareto_front"]], "nas_registry() (in module neural_compressor.experimental.nas.nas_utils)": [[271, "neural_compressor.experimental.nas.nas_utils.nas_registry"]], "neural_compressor.experimental.nas.nas_utils": [[271, "module-neural_compressor.experimental.nas.nas_utils"]], "bayesianoptimizationsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[272, "neural_compressor.experimental.nas.search_algorithms.BayesianOptimizationSearcher"]], "gridsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[272, "neural_compressor.experimental.nas.search_algorithms.GridSearcher"]], "randomsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[272, "neural_compressor.experimental.nas.search_algorithms.RandomSearcher"]], "searcher (class in neural_compressor.experimental.nas.search_algorithms)": [[272, "neural_compressor.experimental.nas.search_algorithms.Searcher"]], "neural_compressor.experimental.nas.search_algorithms": [[272, "module-neural_compressor.experimental.nas.search_algorithms"]], "gradientsensitivitypruner (class in neural_compressor.experimental.pruner_legacy.gradient_sensitivity)": [[273, "neural_compressor.experimental.pruner_legacy.gradient_sensitivity.GradientSensitivityPruner"]], "neural_compressor.experimental.pruner_legacy.gradient_sensitivity": [[273, "module-neural_compressor.experimental.pruner_legacy.gradient_sensitivity"]], "grouplassopruner (class in neural_compressor.experimental.pruner_legacy.group_lasso)": [[274, "neural_compressor.experimental.pruner_legacy.group_lasso.GroupLassoPruner"]], "neural_compressor.experimental.pruner_legacy.group_lasso": [[274, "module-neural_compressor.experimental.pruner_legacy.group_lasso"]], "neural_compressor.experimental.pruner_legacy": [[275, "module-neural_compressor.experimental.pruner_legacy"]], "basicmagnitudepruner (class in neural_compressor.experimental.pruner_legacy.magnitude)": [[276, "neural_compressor.experimental.pruner_legacy.magnitude.BasicMagnitudePruner"]], "neural_compressor.experimental.pruner_legacy.magnitude": [[276, "module-neural_compressor.experimental.pruner_legacy.magnitude"]], "patternlockpruner (class in neural_compressor.experimental.pruner_legacy.pattern_lock)": [[277, "neural_compressor.experimental.pruner_legacy.pattern_lock.PatternLockPruner"]], "neural_compressor.experimental.pruner_legacy.pattern_lock": [[277, "module-neural_compressor.experimental.pruner_legacy.pattern_lock"]], "pruner (class in neural_compressor.experimental.pruner_legacy.pruner)": [[278, "neural_compressor.experimental.pruner_legacy.pruner.Pruner"]], "neural_compressor.experimental.pruner_legacy.pruner": [[278, "module-neural_compressor.experimental.pruner_legacy.pruner"]], "pruner_registry() (in module neural_compressor.experimental.pruner_legacy.pruner)": [[278, "neural_compressor.experimental.pruner_legacy.pruner.pruner_registry"]], "pruning (class in neural_compressor.experimental.pruning)": [[279, "neural_compressor.experimental.pruning.Pruning"]], "tfpruningcallback (class in neural_compressor.experimental.pruning)": [[279, "neural_compressor.experimental.pruning.TfPruningCallback"]], "conf (neural_compressor.experimental.pruning.pruning attribute)": [[279, "neural_compressor.experimental.pruning.Pruning.conf"]], "neural_compressor.experimental.pruning": [[279, "module-neural_compressor.experimental.pruning"]], "pruners (neural_compressor.experimental.pruning.pruning attribute)": [[279, "neural_compressor.experimental.pruning.Pruning.pruners"]], "neural_compressor.experimental.pruning_recipes": [[280, "module-neural_compressor.experimental.pruning_recipes"]], "neural_compressor.experimental.pruning_recipes.patterns": [[281, "module-neural_compressor.experimental.pruning_recipes.patterns"]], "patterns (class in neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[282, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS"]], "patternbase (class in neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[282, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PatternBase"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[282, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"]], "pattern_registry() (in module neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[282, "neural_compressor.experimental.pruning_recipes.patterns.pattern.pattern_registry"]], "patterns (neural_compressor.experimental.pruning_recipes.patterns.pattern.patterns attribute)": [[282, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS.patterns"]], "tilepatternbase (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[283, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePatternBase"]], "tilepattern_1x1 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[283, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x1"]], "tilepattern_1x16 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[283, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x16"]], "tilepattern_1x2 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[283, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x2"]], "tilepattern_2x2 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[283, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_2x2"]], "tilepattern_4x1 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[283, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_4x1"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[283, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"]], "pruning (class in neural_compressor.experimental.pruning_v2)": [[284, "neural_compressor.experimental.pruning_v2.Pruning"]], "tfpruningcallback (class in neural_compressor.experimental.pruning_v2)": [[284, "neural_compressor.experimental.pruning_v2.TfPruningCallback"]], "conf (neural_compressor.experimental.pruning_v2.pruning attribute)": [[284, "neural_compressor.experimental.pruning_v2.Pruning.conf"]], "neural_compressor.experimental.pruning_v2": [[284, "module-neural_compressor.experimental.pruning_v2"]], "pruners (neural_compressor.experimental.pruning_v2.pruning attribute)": [[284, "neural_compressor.experimental.pruning_v2.Pruning.pruners"]], "neural_compressor.experimental.pytorch_pruner": [[285, "module-neural_compressor.experimental.pytorch_pruner"]], "neural_compressor.experimental.pytorch_pruner.logger": [[286, "module-neural_compressor.experimental.pytorch_pruner.logger"]], "m (neural_compressor.experimental.pytorch_pruner.patterns.patternninm attribute)": [[287, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.M"]], "n (neural_compressor.experimental.pytorch_pruner.patterns.patternninm attribute)": [[287, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.N"]], "pattern (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[287, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern"]], "patternninm (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[287, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM"]], "patternnxm (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[287, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM"]], "block_size (neural_compressor.experimental.pytorch_pruner.patterns.patternnxm attribute)": [[287, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM.block_size"]], "get_pattern() (in module neural_compressor.experimental.pytorch_pruner.patterns)": [[287, "neural_compressor.experimental.pytorch_pruner.patterns.get_pattern"]], "is_global (neural_compressor.experimental.pytorch_pruner.patterns.pattern attribute)": [[287, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.is_global"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[287, "module-neural_compressor.experimental.pytorch_pruner.patterns"]], "pattern (neural_compressor.experimental.pytorch_pruner.patterns.pattern attribute)": [[287, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.pattern"]], "register_pattern() (in module neural_compressor.experimental.pytorch_pruner.patterns)": [[287, "neural_compressor.experimental.pytorch_pruner.patterns.register_pattern"]], "check_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[288, "neural_compressor.experimental.pytorch_pruner.prune_utils.check_config"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[288, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"]], "parse_not_to_prune() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[288, "neural_compressor.experimental.pytorch_pruner.prune_utils.parse_not_to_prune"]], "parse_to_prune() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[288, "neural_compressor.experimental.pytorch_pruner.prune_utils.parse_to_prune"]], "process_and_check_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[288, "neural_compressor.experimental.pytorch_pruner.prune_utils.process_and_check_config"]], "process_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[288, "neural_compressor.experimental.pytorch_pruner.prune_utils.process_config"]], "reset_non_value_to_default() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[288, "neural_compressor.experimental.pytorch_pruner.prune_utils.reset_non_value_to_default"]], "magnitudepruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[289, "neural_compressor.experimental.pytorch_pruner.pruner.MagnitudePruner"]], "patternlockpruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[289, "neural_compressor.experimental.pytorch_pruner.pruner.PatternLockPruner"]], "pruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[289, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner"]], "snipmomentumpruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[289, "neural_compressor.experimental.pytorch_pruner.pruner.SnipMomentumPruner"]], "snippruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[289, "neural_compressor.experimental.pytorch_pruner.pruner.SnipPruner"]], "config (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[289, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.config"]], "current_sparsity_ratio (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[289, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.current_sparsity_ratio"]], "end_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[289, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.end_step"]], "get_pruner() (in module neural_compressor.experimental.pytorch_pruner.pruner)": [[289, "neural_compressor.experimental.pytorch_pruner.pruner.get_pruner"]], "global_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[289, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.global_step"]], "masks (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[289, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.masks"]], "max_sparsity_ratio_per_layer (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[289, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.max_sparsity_ratio_per_layer"]], "modules (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[289, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.modules"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[289, "module-neural_compressor.experimental.pytorch_pruner.pruner"]], "pattern (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[289, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.pattern"]], "register_pruners() (in module neural_compressor.experimental.pytorch_pruner.pruner)": [[289, "neural_compressor.experimental.pytorch_pruner.pruner.register_pruners"]], "scheduler (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[289, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.scheduler"]], "scores (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[289, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.scores"]], "start_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[289, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.start_step"]], "target_sparsity_ratio (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[289, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.target_sparsity_ratio"]], "update_frequency_on_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[289, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.update_frequency_on_step"]], "pruning (class in neural_compressor.experimental.pytorch_pruner.pruning)": [[290, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning"]], "config_file_path (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[290, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.config_file_path"]], "model (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[290, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.model"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[290, "module-neural_compressor.experimental.pytorch_pruner.pruning"]], "pruner_info (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[290, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.pruner_info"]], "pruners (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[290, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.pruners"]], "iterativescheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[291, "neural_compressor.experimental.pytorch_pruner.scheduler.IterativeScheduler"]], "oneshotscheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[291, "neural_compressor.experimental.pytorch_pruner.scheduler.OneshotScheduler"]], "scheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[291, "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler"]], "config (neural_compressor.experimental.pytorch_pruner.scheduler.scheduler attribute)": [[291, "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler.config"]], "get_scheduler() (in module neural_compressor.experimental.pytorch_pruner.scheduler)": [[291, "neural_compressor.experimental.pytorch_pruner.scheduler.get_scheduler"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[291, "module-neural_compressor.experimental.pytorch_pruner.scheduler"]], "register_scheduler() (in module neural_compressor.experimental.pytorch_pruner.scheduler)": [[291, "neural_compressor.experimental.pytorch_pruner.scheduler.register_scheduler"]], "quantization (class in neural_compressor.experimental.quantization)": [[292, "neural_compressor.experimental.quantization.Quantization"]], "neural_compressor.experimental.quantization": [[292, "module-neural_compressor.experimental.quantization"]], "scheduler (class in neural_compressor.experimental.scheduler)": [[293, "neural_compressor.experimental.scheduler.Scheduler"]], "neural_compressor.experimental.scheduler": [[293, "module-neural_compressor.experimental.scheduler"]], "neural_compressor": [[294, "module-neural_compressor"]], "bleu (class in neural_compressor.metric.bleu)": [[295, "neural_compressor.metric.bleu.BLEU"]], "unicoderegex (class in neural_compressor.metric.bleu)": [[295, "neural_compressor.metric.bleu.UnicodeRegex"]], "bleu_tokenize() (in module neural_compressor.metric.bleu)": [[295, "neural_compressor.metric.bleu.bleu_tokenize"]], "labels (neural_compressor.metric.bleu.bleu attribute)": [[295, "neural_compressor.metric.bleu.BLEU.labels"]], "neural_compressor.metric.bleu": [[295, "module-neural_compressor.metric.bleu"]], "nondigit_punct_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[295, "neural_compressor.metric.bleu.UnicodeRegex.nondigit_punct_re"]], "predictions (neural_compressor.metric.bleu.bleu attribute)": [[295, "neural_compressor.metric.bleu.BLEU.predictions"]], "punct_nondigit_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[295, "neural_compressor.metric.bleu.UnicodeRegex.punct_nondigit_re"]], "symbol_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[295, "neural_compressor.metric.bleu.UnicodeRegex.symbol_re"]], "compute_bleu() (in module neural_compressor.metric.bleu_util)": [[296, "neural_compressor.metric.bleu_util.compute_bleu"]], "neural_compressor.metric.bleu_util": [[296, "module-neural_compressor.metric.bleu_util"]], "neural_compressor.metric.coco_label_map": [[297, "module-neural_compressor.metric.coco_label_map"]], "cocoevalwrapper (class in neural_compressor.metric.coco_tools)": [[298, "neural_compressor.metric.coco_tools.COCOEvalWrapper"]], "cocowrapper (class in neural_compressor.metric.coco_tools)": [[298, "neural_compressor.metric.coco_tools.COCOWrapper"]], "exportsingleimagedetectionboxestococo() (in module neural_compressor.metric.coco_tools)": [[298, "neural_compressor.metric.coco_tools.ExportSingleImageDetectionBoxesToCoco"]], "exportsingleimagedetectionmaskstococo() (in module neural_compressor.metric.coco_tools)": [[298, "neural_compressor.metric.coco_tools.ExportSingleImageDetectionMasksToCoco"]], "exportsingleimagegroundtruthtococo() (in module neural_compressor.metric.coco_tools)": [[298, "neural_compressor.metric.coco_tools.ExportSingleImageGroundtruthToCoco"]], "dataset (neural_compressor.metric.coco_tools.cocowrapper attribute)": [[298, "neural_compressor.metric.coco_tools.COCOWrapper.dataset"]], "detection_type (neural_compressor.metric.coco_tools.cocowrapper attribute)": [[298, "neural_compressor.metric.coco_tools.COCOWrapper.detection_type"]], "neural_compressor.metric.coco_tools": [[298, "module-neural_compressor.metric.coco_tools"]], "evaluate() (in module neural_compressor.metric.evaluate_squad)": [[299, "neural_compressor.metric.evaluate_squad.evaluate"]], "exact_match_score() (in module neural_compressor.metric.evaluate_squad)": [[299, "neural_compressor.metric.evaluate_squad.exact_match_score"]], "f1_score() (in module neural_compressor.metric.evaluate_squad)": [[299, "neural_compressor.metric.evaluate_squad.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.metric.evaluate_squad)": [[299, "neural_compressor.metric.evaluate_squad.metric_max_over_ground_truths"]], "neural_compressor.metric.evaluate_squad": [[299, "module-neural_compressor.metric.evaluate_squad"]], "evaluate() (in module neural_compressor.metric.f1)": [[300, "neural_compressor.metric.f1.evaluate"]], "f1_score() (in module neural_compressor.metric.f1)": [[300, "neural_compressor.metric.f1.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.metric.f1)": [[300, "neural_compressor.metric.f1.metric_max_over_ground_truths"]], "neural_compressor.metric.f1": [[300, "module-neural_compressor.metric.f1"]], "normalize_answer() (in module neural_compressor.metric.f1)": [[300, "neural_compressor.metric.f1.normalize_answer"]], "neural_compressor.metric": [[301, "module-neural_compressor.metric"]], "accuracy (class in neural_compressor.metric.metric)": [[302, "neural_compressor.metric.metric.Accuracy"]], "basemetric (class in neural_compressor.metric.metric)": [[302, "neural_compressor.metric.metric.BaseMetric"]], "cocomapv2 (class in neural_compressor.metric.metric)": [[302, "neural_compressor.metric.metric.COCOmAPv2"]], "f1 (class in neural_compressor.metric.metric)": [[302, "neural_compressor.metric.metric.F1"]], "generaltopk (class in neural_compressor.metric.metric)": [[302, "neural_compressor.metric.metric.GeneralTopK"]], "loss (class in neural_compressor.metric.metric)": [[302, "neural_compressor.metric.metric.Loss"]], "mae (class in neural_compressor.metric.metric)": [[302, "neural_compressor.metric.metric.MAE"]], "metrics (class in neural_compressor.metric.metric)": [[302, "neural_compressor.metric.metric.METRICS"]], "mse (class in neural_compressor.metric.metric)": [[302, "neural_compressor.metric.metric.MSE"]], "mxnetmetrics (class in neural_compressor.metric.metric)": [[302, "neural_compressor.metric.metric.MXNetMetrics"]], "metric (class in neural_compressor.metric.metric)": [[302, "neural_compressor.metric.metric.Metric"]], "onnxrtglue (class in neural_compressor.metric.metric)": [[302, "neural_compressor.metric.metric.ONNXRTGLUE"]], "onnxrtitmetrics (class in neural_compressor.metric.metric)": [[302, "neural_compressor.metric.metric.ONNXRTITMetrics"]], "onnxrtqlmetrics (class in neural_compressor.metric.metric)": [[302, "neural_compressor.metric.metric.ONNXRTQLMetrics"]], "pytorchloss (class in neural_compressor.metric.metric)": [[302, "neural_compressor.metric.metric.PyTorchLoss"]], "pytorchmetrics (class in neural_compressor.metric.metric)": [[302, "neural_compressor.metric.metric.PyTorchMetrics"]], "rmse (class in neural_compressor.metric.metric)": [[302, "neural_compressor.metric.metric.RMSE"]], "roc (class in neural_compressor.metric.metric)": [[302, "neural_compressor.metric.metric.ROC"]], "squadf1 (class in neural_compressor.metric.metric)": [[302, "neural_compressor.metric.metric.SquadF1"]], "tensorflowcocomap (class in neural_compressor.metric.metric)": [[302, "neural_compressor.metric.metric.TensorflowCOCOMAP"]], "tensorflowmap (class in neural_compressor.metric.metric)": [[302, "neural_compressor.metric.metric.TensorflowMAP"]], "tensorflowmetrics (class in neural_compressor.metric.metric)": [[302, "neural_compressor.metric.metric.TensorflowMetrics"]], "tensorflowtopk (class in neural_compressor.metric.metric)": [[302, "neural_compressor.metric.metric.TensorflowTopK"]], "tensorflowvocmap (class in neural_compressor.metric.metric)": [[302, "neural_compressor.metric.metric.TensorflowVOCMAP"]], "wrapmxnetmetric (class in neural_compressor.metric.metric)": [[302, "neural_compressor.metric.metric.WrapMXNetMetric"]], "wraponnxrtmetric (class in neural_compressor.metric.metric)": [[302, "neural_compressor.metric.metric.WrapONNXRTMetric"]], "wrappytorchmetric (class in neural_compressor.metric.metric)": [[302, "neural_compressor.metric.metric.WrapPyTorchMetric"]], "compare_label (neural_compressor.metric.metric.mae attribute)": [[302, "neural_compressor.metric.metric.MAE.compare_label"]], "compare_label (neural_compressor.metric.metric.mse attribute)": [[302, "neural_compressor.metric.metric.MSE.compare_label"]], "k (neural_compressor.metric.metric.generaltopk attribute)": [[302, "neural_compressor.metric.metric.GeneralTopK.k"]], "k (neural_compressor.metric.metric.tensorflowtopk attribute)": [[302, "neural_compressor.metric.metric.TensorflowTopK.k"]], "label_list (neural_compressor.metric.metric.accuracy attribute)": [[302, "neural_compressor.metric.metric.Accuracy.label_list"]], "label_list (neural_compressor.metric.metric.mae attribute)": [[302, "neural_compressor.metric.metric.MAE.label_list"]], "label_list (neural_compressor.metric.metric.mse attribute)": [[302, "neural_compressor.metric.metric.MSE.label_list"]], "miou (class in neural_compressor.metric.metric)": [[302, "neural_compressor.metric.metric.mIOU"]], "metric_registry() (in module neural_compressor.metric.metric)": [[302, "neural_compressor.metric.metric.metric_registry"]], "metrics (neural_compressor.metric.metric.metrics attribute)": [[302, "neural_compressor.metric.metric.METRICS.metrics"]], "metrics (neural_compressor.metric.metric.mxnetmetrics attribute)": [[302, "neural_compressor.metric.metric.MXNetMetrics.metrics"]], "metrics (neural_compressor.metric.metric.onnxrtitmetrics attribute)": [[302, "neural_compressor.metric.metric.ONNXRTITMetrics.metrics"]], "metrics (neural_compressor.metric.metric.onnxrtqlmetrics attribute)": [[302, "neural_compressor.metric.metric.ONNXRTQLMetrics.metrics"]], "metrics (neural_compressor.metric.metric.pytorchmetrics attribute)": [[302, "neural_compressor.metric.metric.PyTorchMetrics.metrics"]], "metrics (neural_compressor.metric.metric.tensorflowmetrics attribute)": [[302, "neural_compressor.metric.metric.TensorflowMetrics.metrics"]], "mse (neural_compressor.metric.metric.rmse attribute)": [[302, "neural_compressor.metric.metric.RMSE.mse"]], "neural_compressor.metric.metric": [[302, "module-neural_compressor.metric.metric"]], "num_correct (neural_compressor.metric.metric.generaltopk attribute)": [[302, "neural_compressor.metric.metric.GeneralTopK.num_correct"]], "num_correct (neural_compressor.metric.metric.tensorflowtopk attribute)": [[302, "neural_compressor.metric.metric.TensorflowTopK.num_correct"]], "num_sample (neural_compressor.metric.metric.generaltopk attribute)": [[302, "neural_compressor.metric.metric.GeneralTopK.num_sample"]], "num_sample (neural_compressor.metric.metric.tensorflowtopk attribute)": [[302, "neural_compressor.metric.metric.TensorflowTopK.num_sample"]], "pred_list (neural_compressor.metric.metric.accuracy attribute)": [[302, "neural_compressor.metric.metric.Accuracy.pred_list"]], "pred_list (neural_compressor.metric.metric.mae attribute)": [[302, "neural_compressor.metric.metric.MAE.pred_list"]], "pred_list (neural_compressor.metric.metric.mse attribute)": [[302, "neural_compressor.metric.metric.MSE.pred_list"]], "sample (neural_compressor.metric.metric.accuracy attribute)": [[302, "neural_compressor.metric.metric.Accuracy.sample"]], "sample (neural_compressor.metric.metric.loss attribute)": [[302, "neural_compressor.metric.metric.Loss.sample"]], "sum (neural_compressor.metric.metric.loss attribute)": [[302, "neural_compressor.metric.metric.Loss.sum"]], "fit() (in module neural_compressor.mix_precision)": [[303, "neural_compressor.mix_precision.fit"]], "neural_compressor.mix_precision": [[303, "module-neural_compressor.mix_precision"]], "basemodel (class in neural_compressor.model.base_model)": [[304, "neural_compressor.model.base_model.BaseModel"]], "neural_compressor.model.base_model": [[304, "module-neural_compressor.model.base_model"]], "neural_compressor.model": [[305, "module-neural_compressor.model"]], "kerasmodel (class in neural_compressor.model.keras_model)": [[306, "neural_compressor.model.keras_model.KerasModel"]], "neural_compressor.model.keras_model": [[306, "module-neural_compressor.model.keras_model"]], "model (class in neural_compressor.model.model)": [[307, "neural_compressor.model.model.Model"]], "get_model_fwk_name() (in module neural_compressor.model.model)": [[307, "neural_compressor.model.model.get_model_fwk_name"]], "neural_compressor.model.model": [[307, "module-neural_compressor.model.model"]], "mxnetmodel (class in neural_compressor.model.mxnet_model)": [[308, "neural_compressor.model.mxnet_model.MXNetModel"]], "neural_compressor.model.mxnet_model": [[308, "module-neural_compressor.model.mxnet_model"]], "tfslimnetsfactory (class in neural_compressor.model.nets_factory)": [[309, "neural_compressor.model.nets_factory.TFSlimNetsFactory"]], "neural_compressor.model.nets_factory": [[309, "module-neural_compressor.model.nets_factory"]], "onnxmodel (class in neural_compressor.model.onnx_model)": [[310, "neural_compressor.model.onnx_model.ONNXModel"]], "neural_compressor.model.onnx_model": [[310, "module-neural_compressor.model.onnx_model"]], "tensorflowbasemodel (class in neural_compressor.model.tensorflow_model)": [[311, "neural_compressor.model.tensorflow_model.TensorflowBaseModel"]], "tensorflowcheckpointmodel (class in neural_compressor.model.tensorflow_model)": [[311, "neural_compressor.model.tensorflow_model.TensorflowCheckpointModel"]], "tensorflowmodel (class in neural_compressor.model.tensorflow_model)": [[311, "neural_compressor.model.tensorflow_model.TensorflowModel"]], "tensorflowqatmodel (class in neural_compressor.model.tensorflow_model)": [[311, "neural_compressor.model.tensorflow_model.TensorflowQATModel"]], "tensorflowsavedmodelmodel (class in neural_compressor.model.tensorflow_model)": [[311, "neural_compressor.model.tensorflow_model.TensorflowSavedModelModel"]], "checkpoint_session() (in module neural_compressor.model.tensorflow_model)": [[311, "neural_compressor.model.tensorflow_model.checkpoint_session"]], "estimator_session() (in module neural_compressor.model.tensorflow_model)": [[311, "neural_compressor.model.tensorflow_model.estimator_session"]], "frozen_pb_session() (in module neural_compressor.model.tensorflow_model)": [[311, "neural_compressor.model.tensorflow_model.frozen_pb_session"]], "get_model_type() (in module neural_compressor.model.tensorflow_model)": [[311, "neural_compressor.model.tensorflow_model.get_model_type"]], "graph_def_session() (in module neural_compressor.model.tensorflow_model)": [[311, "neural_compressor.model.tensorflow_model.graph_def_session"]], "graph_session() (in module neural_compressor.model.tensorflow_model)": [[311, "neural_compressor.model.tensorflow_model.graph_session"]], "keras_session() (in module neural_compressor.model.tensorflow_model)": [[311, "neural_compressor.model.tensorflow_model.keras_session"]], "load_saved_model() (in module neural_compressor.model.tensorflow_model)": [[311, "neural_compressor.model.tensorflow_model.load_saved_model"]], "neural_compressor.model.tensorflow_model": [[311, "module-neural_compressor.model.tensorflow_model"]], "saved_model_session() (in module neural_compressor.model.tensorflow_model)": [[311, "neural_compressor.model.tensorflow_model.saved_model_session"]], "slim_session() (in module neural_compressor.model.tensorflow_model)": [[311, "neural_compressor.model.tensorflow_model.slim_session"]], "validate_and_inference_input_output() (in module neural_compressor.model.tensorflow_model)": [[311, "neural_compressor.model.tensorflow_model.validate_and_inference_input_output"]], "validate_graph_node() (in module neural_compressor.model.tensorflow_model)": [[311, "neural_compressor.model.tensorflow_model.validate_graph_node"]], "ipexmodel (class in neural_compressor.model.torch_model)": [[312, "neural_compressor.model.torch_model.IPEXModel"]], "pytorchbasemodel (class in neural_compressor.model.torch_model)": [[312, "neural_compressor.model.torch_model.PyTorchBaseModel"]], "pytorchfxmodel (class in neural_compressor.model.torch_model)": [[312, "neural_compressor.model.torch_model.PyTorchFXModel"]], "pytorchmodel (class in neural_compressor.model.torch_model)": [[312, "neural_compressor.model.torch_model.PyTorchModel"]], "neural_compressor.model.torch_model": [[312, "module-neural_compressor.model.torch_model"]], "accuracy (class in neural_compressor.objective)": [[313, "neural_compressor.objective.Accuracy"]], "footprint (class in neural_compressor.objective)": [[313, "neural_compressor.objective.Footprint"]], "modelsize (class in neural_compressor.objective)": [[313, "neural_compressor.objective.ModelSize"]], "multiobjective (class in neural_compressor.objective)": [[313, "neural_compressor.objective.MultiObjective"]], "objective (class in neural_compressor.objective)": [[313, "neural_compressor.objective.Objective"]], "performance (class in neural_compressor.objective)": [[313, "neural_compressor.objective.Performance"]], "neural_compressor.objective": [[313, "module-neural_compressor.objective"]], "objective_custom_registry() (in module neural_compressor.objective)": [[313, "neural_compressor.objective.objective_custom_registry"]], "objective_registry() (in module neural_compressor.objective)": [[313, "neural_compressor.objective.objective_registry"]], "fit() (in module neural_compressor.quantization)": [[314, "neural_compressor.quantization.fit"]], "neural_compressor.quantization": [[314, "module-neural_compressor.quantization"]], "autotunestrategy (class in neural_compressor.strategy.auto)": [[315, "neural_compressor.strategy.auto.AutoTuneStrategy"]], "neural_compressor.strategy.auto": [[315, "module-neural_compressor.strategy.auto"]], "automixedprecisiontunestrategy (class in neural_compressor.strategy.auto_mixed_precision)": [[316, "neural_compressor.strategy.auto_mixed_precision.AutoMixedPrecisionTuneStrategy"]], "neural_compressor.strategy.auto_mixed_precision": [[316, "module-neural_compressor.strategy.auto_mixed_precision"]], "basictunestrategy (class in neural_compressor.strategy.basic)": [[317, "neural_compressor.strategy.basic.BasicTuneStrategy"]], "neural_compressor.strategy.basic": [[317, "module-neural_compressor.strategy.basic"]], "bayesianoptimization (class in neural_compressor.strategy.bayesian)": [[318, "neural_compressor.strategy.bayesian.BayesianOptimization"]], "bayesiantunestrategy (class in neural_compressor.strategy.bayesian)": [[318, "neural_compressor.strategy.bayesian.BayesianTuneStrategy"]], "targetspace (class in neural_compressor.strategy.bayesian)": [[318, "neural_compressor.strategy.bayesian.TargetSpace"]], "acq_max() (in module neural_compressor.strategy.bayesian)": [[318, "neural_compressor.strategy.bayesian.acq_max"]], "neural_compressor.strategy.bayesian": [[318, "module-neural_compressor.strategy.bayesian"]], "conservativetunestrategy (class in neural_compressor.strategy.conservative)": [[319, "neural_compressor.strategy.conservative.ConservativeTuneStrategy"]], "neural_compressor.strategy.conservative": [[319, "module-neural_compressor.strategy.conservative"]], "exhaustivetunestrategy (class in neural_compressor.strategy.exhaustive)": [[320, "neural_compressor.strategy.exhaustive.ExhaustiveTuneStrategy"]], "neural_compressor.strategy.exhaustive": [[320, "module-neural_compressor.strategy.exhaustive"]], "hawq_v2tunestrategy (class in neural_compressor.strategy.hawq_v2)": [[321, "neural_compressor.strategy.hawq_v2.HAWQ_V2TuneStrategy"]], "neural_compressor.strategy.hawq_v2": [[321, "module-neural_compressor.strategy.hawq_v2"]], "neural_compressor.strategy": [[322, "module-neural_compressor.strategy"]], "msetunestrategy (class in neural_compressor.strategy.mse)": [[323, "neural_compressor.strategy.mse.MSETuneStrategy"]], "neural_compressor.strategy.mse": [[323, "module-neural_compressor.strategy.mse"]], "mse_v2tunestrategy (class in neural_compressor.strategy.mse_v2)": [[324, "neural_compressor.strategy.mse_v2.MSE_V2TuneStrategy"]], "neural_compressor.strategy.mse_v2": [[324, "module-neural_compressor.strategy.mse_v2"]], "randomtunestrategy (class in neural_compressor.strategy.random)": [[325, "neural_compressor.strategy.random.RandomTuneStrategy"]], "neural_compressor.strategy.random": [[325, "module-neural_compressor.strategy.random"]], "tunestrategy (class in neural_compressor.strategy.strategy)": [[326, "neural_compressor.strategy.strategy.TuneStrategy"]], "neural_compressor.strategy.strategy": [[326, "module-neural_compressor.strategy.strategy"]], "strategy_registry() (in module neural_compressor.strategy.strategy)": [[326, "neural_compressor.strategy.strategy.strategy_registry"]], "neural_compressor.strategy.utils.constant": [[327, "module-neural_compressor.strategy.utils.constant"]], "neural_compressor.strategy.utils": [[328, "module-neural_compressor.strategy.utils"]], "blockfallbacktuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[329, "neural_compressor.strategy.utils.tuning_sampler.BlockFallbackTuningSampler"]], "fallbacktuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[329, "neural_compressor.strategy.utils.tuning_sampler.FallbackTuningSampler"]], "modelwisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[329, "neural_compressor.strategy.utils.tuning_sampler.ModelWiseTuningSampler"]], "optypewisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[329, "neural_compressor.strategy.utils.tuning_sampler.OpTypeWiseTuningSampler"]], "opwisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[329, "neural_compressor.strategy.utils.tuning_sampler.OpWiseTuningSampler"]], "tuningorder (class in neural_compressor.strategy.utils.tuning_sampler)": [[329, "neural_compressor.strategy.utils.tuning_sampler.TuningOrder"]], "tuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[329, "neural_compressor.strategy.utils.tuning_sampler.TuningSampler"]], "tuningsamplerregistry (class in neural_compressor.strategy.utils.tuning_sampler)": [[329, "neural_compressor.strategy.utils.tuning_sampler.TuningSamplerRegistry"]], "neural_compressor.strategy.utils.tuning_sampler": [[329, "module-neural_compressor.strategy.utils.tuning_sampler"]], "tuningitem (class in neural_compressor.strategy.utils.tuning_space)": [[330, "neural_compressor.strategy.utils.tuning_space.TuningItem"]], "tuningspace (class in neural_compressor.strategy.utils.tuning_space)": [[330, "neural_compressor.strategy.utils.tuning_space.TuningSpace"]], "get_op_mode_by_query_order() (in module neural_compressor.strategy.utils.tuning_space)": [[330, "neural_compressor.strategy.utils.tuning_space.get_op_mode_by_query_order"]], "initial_tuning_cfg_with_quant_mode() (in module neural_compressor.strategy.utils.tuning_space)": [[330, "neural_compressor.strategy.utils.tuning_space.initial_tuning_cfg_with_quant_mode"]], "neural_compressor.strategy.utils.tuning_space": [[330, "module-neural_compressor.strategy.utils.tuning_space"]], "pattern_to_internal() (in module neural_compressor.strategy.utils.tuning_space)": [[330, "neural_compressor.strategy.utils.tuning_space.pattern_to_internal"]], "pattern_to_path() (in module neural_compressor.strategy.utils.tuning_space)": [[330, "neural_compressor.strategy.utils.tuning_space.pattern_to_path"]], "quant_mode_from_pattern() (in module neural_compressor.strategy.utils.tuning_space)": [[330, "neural_compressor.strategy.utils.tuning_space.quant_mode_from_pattern"]], "optuningconfig (class in neural_compressor.strategy.utils.tuning_structs)": [[331, "neural_compressor.strategy.utils.tuning_structs.OpTuningConfig"]], "neural_compressor.strategy.utils.tuning_structs": [[331, "module-neural_compressor.strategy.utils.tuning_structs"]], "ordereddefaultdict (class in neural_compressor.strategy.utils.utility)": [[332, "neural_compressor.strategy.utils.utility.OrderedDefaultDict"]], "extract_data_type() (in module neural_compressor.strategy.utils.utility)": [[332, "neural_compressor.strategy.utils.utility.extract_data_type"]], "get_adaptor_name() (in module neural_compressor.strategy.utils.utility)": [[332, "neural_compressor.strategy.utils.utility.get_adaptor_name"]], "neural_compressor.strategy.utils.utility": [[332, "module-neural_compressor.strategy.utils.utility"]], "reverted_data_type() (in module neural_compressor.strategy.utils.utility)": [[332, "neural_compressor.strategy.utils.utility.reverted_data_type"]], "exampleclass (class in neural_compressor.template.api_doc_example)": [[333, "neural_compressor.template.api_doc_example.ExampleClass"]], "attr1 (neural_compressor.template.api_doc_example.exampleclass attribute)": [[333, "neural_compressor.template.api_doc_example.ExampleClass.attr1"]], "attr2 (neural_compressor.template.api_doc_example.exampleclass attribute)": [[333, "neural_compressor.template.api_doc_example.ExampleClass.attr2"]], "attr5 (neural_compressor.template.api_doc_example.exampleclass attribute)": [[333, "neural_compressor.template.api_doc_example.ExampleClass.attr5"]], "attribute1 (in module neural_compressor.template.api_doc_example)": [[333, "neural_compressor.template.api_doc_example.attribute1"]], "function1() (in module neural_compressor.template.api_doc_example)": [[333, "neural_compressor.template.api_doc_example.function1"]], "function2() (in module neural_compressor.template.api_doc_example)": [[333, "neural_compressor.template.api_doc_example.function2"]], "function3() (in module neural_compressor.template.api_doc_example)": [[333, "neural_compressor.template.api_doc_example.function3"]], "generator1() (in module neural_compressor.template.api_doc_example)": [[333, "neural_compressor.template.api_doc_example.generator1"]], "module_debug_level1 (in module neural_compressor.template.api_doc_example)": [[333, "neural_compressor.template.api_doc_example.module_debug_level1"]], "neural_compressor.template.api_doc_example": [[333, "module-neural_compressor.template.api_doc_example"]], "neural_compressor.template": [[334, "module-neural_compressor.template"]], "callbacks (class in neural_compressor.training)": [[335, "neural_compressor.training.CallBacks"]], "compressionmanager (class in neural_compressor.training)": [[335, "neural_compressor.training.CompressionManager"]], "fit() (in module neural_compressor.training)": [[335, "neural_compressor.training.fit"]], "neural_compressor.training": [[335, "module-neural_compressor.training"]], "prepare_compression() (in module neural_compressor.training)": [[335, "neural_compressor.training.prepare_compression"]], "layerhistogramcollector (class in neural_compressor.utils.collect_layer_histogram)": [[336, "neural_compressor.utils.collect_layer_histogram.LayerHistogramCollector"]], "neural_compressor.utils.collect_layer_histogram": [[336, "module-neural_compressor.utils.collect_layer_histogram"]], "neural_compressor.utils.constant": [[337, "module-neural_compressor.utils.constant"]], "create_dataloader() (in module neural_compressor.utils.create_obj_from_config)": [[338, "neural_compressor.utils.create_obj_from_config.create_dataloader"]], "create_dataset() (in module neural_compressor.utils.create_obj_from_config)": [[338, "neural_compressor.utils.create_obj_from_config.create_dataset"]], "create_eval_func() (in module neural_compressor.utils.create_obj_from_config)": [[338, "neural_compressor.utils.create_obj_from_config.create_eval_func"]], "create_train_func() (in module neural_compressor.utils.create_obj_from_config)": [[338, "neural_compressor.utils.create_obj_from_config.create_train_func"]], "get_algorithm() (in module neural_compressor.utils.create_obj_from_config)": [[338, "neural_compressor.utils.create_obj_from_config.get_algorithm"]], "get_func_from_config() (in module neural_compressor.utils.create_obj_from_config)": [[338, "neural_compressor.utils.create_obj_from_config.get_func_from_config"]], "get_metrics() (in module neural_compressor.utils.create_obj_from_config)": [[338, "neural_compressor.utils.create_obj_from_config.get_metrics"]], "get_postprocess() (in module neural_compressor.utils.create_obj_from_config)": [[338, "neural_compressor.utils.create_obj_from_config.get_postprocess"]], "get_preprocess() (in module neural_compressor.utils.create_obj_from_config)": [[338, "neural_compressor.utils.create_obj_from_config.get_preprocess"]], "neural_compressor.utils.create_obj_from_config": [[338, "module-neural_compressor.utils.create_obj_from_config"]], "neural_compressor.utils": [[339, "module-neural_compressor.utils"]], "kl_divergence (class in neural_compressor.utils.kl_divergence)": [[340, "neural_compressor.utils.kl_divergence.KL_Divergence"]], "neural_compressor.utils.kl_divergence": [[340, "module-neural_compressor.utils.kl_divergence"]], "optimizedmodel (class in neural_compressor.utils.load_huggingface)": [[341, "neural_compressor.utils.load_huggingface.OptimizedModel"]], "neural_compressor.utils.load_huggingface": [[341, "module-neural_compressor.utils.load_huggingface"]], "save_for_huggingface_upstream() (in module neural_compressor.utils.load_huggingface)": [[341, "neural_compressor.utils.load_huggingface.save_for_huggingface_upstream"]], "logger (class in neural_compressor.utils.logger)": [[342, "neural_compressor.utils.logger.Logger"]], "debug() (in module neural_compressor.utils.logger)": [[342, "neural_compressor.utils.logger.debug"]], "error() (in module neural_compressor.utils.logger)": [[342, "neural_compressor.utils.logger.error"]], "fatal() (in module neural_compressor.utils.logger)": [[342, "neural_compressor.utils.logger.fatal"]], "info() (in module neural_compressor.utils.logger)": [[342, "neural_compressor.utils.logger.info"]], "log() (in module neural_compressor.utils.logger)": [[342, "neural_compressor.utils.logger.log"]], "neural_compressor.utils.logger": [[342, "module-neural_compressor.utils.logger"]], "warn() (in module neural_compressor.utils.logger)": [[342, "neural_compressor.utils.logger.warn"]], "warning() (in module neural_compressor.utils.logger)": [[342, "neural_compressor.utils.logger.warning"]], "neural_compressor.utils.options": [[343, "module-neural_compressor.utils.options"]], "onnxrt (class in neural_compressor.utils.options)": [[343, "neural_compressor.utils.options.onnxrt"]], "is_int8_model() (in module neural_compressor.utils.pytorch)": [[344, "neural_compressor.utils.pytorch.is_int8_model"]], "load() (in module neural_compressor.utils.pytorch)": [[344, "neural_compressor.utils.pytorch.load"]], "neural_compressor.utils.pytorch": [[344, "module-neural_compressor.utils.pytorch"]], "captureoutputtofile (class in neural_compressor.utils.utility)": [[345, "neural_compressor.utils.utility.CaptureOutputToFile"]], "cpuinfo (class in neural_compressor.utils.utility)": [[345, "neural_compressor.utils.utility.CpuInfo"]], "dequantize() (in module neural_compressor.utils.utility)": [[345, "neural_compressor.utils.utility.Dequantize"]], "dequantizeweight() (in module neural_compressor.utils.utility)": [[345, "neural_compressor.utils.utility.DequantizeWeight"]], "global_state (class in neural_compressor.utils.utility)": [[345, "neural_compressor.utils.utility.GLOBAL_STATE"]], "lazyimport (class in neural_compressor.utils.utility)": [[345, "neural_compressor.utils.utility.LazyImport"]], "mode (class in neural_compressor.utils.utility)": [[345, "neural_compressor.utils.utility.MODE"]], "statistics (class in neural_compressor.utils.utility)": [[345, "neural_compressor.utils.utility.Statistics"]], "combine_histogram() (in module neural_compressor.utils.utility)": [[345, "neural_compressor.utils.utility.combine_histogram"]], "compute_sparsity() (in module neural_compressor.utils.utility)": [[345, "neural_compressor.utils.utility.compute_sparsity"]], "dump_data_to_local() (in module neural_compressor.utils.utility)": [[345, "neural_compressor.utils.utility.dump_data_to_local"]], "dump_elapsed_time() (in module neural_compressor.utils.utility)": [[345, "neural_compressor.utils.utility.dump_elapsed_time"]], "equal_dicts() (in module neural_compressor.utils.utility)": [[345, "neural_compressor.utils.utility.equal_dicts"]], "fault_tolerant_file() (in module neural_compressor.utils.utility)": [[345, "neural_compressor.utils.utility.fault_tolerant_file"]], "get_all_fp32_data() (in module neural_compressor.utils.utility)": [[345, "neural_compressor.utils.utility.get_all_fp32_data"]], "get_size() (in module neural_compressor.utils.utility)": [[345, "neural_compressor.utils.utility.get_size"]], "get_tensor_histogram() (in module neural_compressor.utils.utility)": [[345, "neural_compressor.utils.utility.get_tensor_histogram"]], "get_tuning_history() (in module neural_compressor.utils.utility)": [[345, "neural_compressor.utils.utility.get_tuning_history"]], "load_data_from_pkl() (in module neural_compressor.utils.utility)": [[345, "neural_compressor.utils.utility.load_data_from_pkl"]], "neural_compressor.utils.utility": [[345, "module-neural_compressor.utils.utility"]], "recover() (in module neural_compressor.utils.utility)": [[345, "neural_compressor.utils.utility.recover"]], "set_random_seed() (in module neural_compressor.utils.utility)": [[345, "neural_compressor.utils.utility.set_random_seed"]], "set_resume_from() (in module neural_compressor.utils.utility)": [[345, "neural_compressor.utils.utility.set_resume_from"]], "set_tensorboard() (in module neural_compressor.utils.utility)": [[345, "neural_compressor.utils.utility.set_tensorboard"]], "set_workspace() (in module neural_compressor.utils.utility)": [[345, "neural_compressor.utils.utility.set_workspace"]], "show_memory_info() (in module neural_compressor.utils.utility)": [[345, "neural_compressor.utils.utility.show_memory_info"]], "singleton() (in module neural_compressor.utils.utility)": [[345, "neural_compressor.utils.utility.singleton"]], "str2array() (in module neural_compressor.utils.utility)": [[345, "neural_compressor.utils.utility.str2array"]], "time_limit() (in module neural_compressor.utils.utility)": [[345, "neural_compressor.utils.utility.time_limit"]], "version1_eq_version2() (in module neural_compressor.utils.utility)": [[345, "neural_compressor.utils.utility.version1_eq_version2"]], "version1_gt_version2() (in module neural_compressor.utils.utility)": [[345, "neural_compressor.utils.utility.version1_gt_version2"]], "version1_gte_version2() (in module neural_compressor.utils.utility)": [[345, "neural_compressor.utils.utility.version1_gte_version2"]], "version1_lt_version2() (in module neural_compressor.utils.utility)": [[345, "neural_compressor.utils.utility.version1_lt_version2"]], "version1_lte_version2() (in module neural_compressor.utils.utility)": [[345, "neural_compressor.utils.utility.version1_lte_version2"]], "benchmark (class in neural_compressor.ux.components.benchmark.benchmark)": [[346, "neural_compressor.ux.components.benchmark.benchmark.Benchmark"]], "dataloaderinterface (class in neural_compressor.ux.components.benchmark.benchmark)": [[346, "neural_compressor.ux.components.benchmark.benchmark.DataloaderInterface"]], "neural_compressor.ux.components.benchmark.benchmark": [[346, "module-neural_compressor.ux.components.benchmark.benchmark"]], "benchmark_model() (in module neural_compressor.ux.components.benchmark.benchmark_model)": [[347, "neural_compressor.ux.components.benchmark.benchmark_model.benchmark_model"]], "neural_compressor.ux.components.benchmark.benchmark_model": [[347, "module-neural_compressor.ux.components.benchmark.benchmark_model"]], "parse_args() (in module neural_compressor.ux.components.benchmark.benchmark_model)": [[347, "neural_compressor.ux.components.benchmark.benchmark_model.parse_args"]], "set_eager_execution() (in module neural_compressor.ux.components.benchmark.benchmark_model)": [[347, "neural_compressor.ux.components.benchmark.benchmark_model.set_eager_execution"]], "benchmark_result_update() (in module neural_compressor.ux.components.benchmark.execute_benchmark)": [[348, "neural_compressor.ux.components.benchmark.execute_benchmark.benchmark_result_update"]], "benchmark_result_update_pytorch_script() (in module neural_compressor.ux.components.benchmark.execute_benchmark)": [[348, "neural_compressor.ux.components.benchmark.execute_benchmark.benchmark_result_update_pytorch_script"]], "execute_benchmark() (in module neural_compressor.ux.components.benchmark.execute_benchmark)": [[348, "neural_compressor.ux.components.benchmark.execute_benchmark.execute_benchmark"]], "execute_real_benchmark() (in module neural_compressor.ux.components.benchmark.execute_benchmark)": [[348, "neural_compressor.ux.components.benchmark.execute_benchmark.execute_real_benchmark"]], "neural_compressor.ux.components.benchmark.execute_benchmark": [[348, "module-neural_compressor.ux.components.benchmark.execute_benchmark"]], "pytorch_script_bench_optimizations() (in module neural_compressor.ux.components.benchmark.execute_benchmark)": [[348, "neural_compressor.ux.components.benchmark.execute_benchmark.pytorch_script_bench_optimizations"]], "pytorch_script_bench_original_model() (in module neural_compressor.ux.components.benchmark.execute_benchmark)": [[348, "neural_compressor.ux.components.benchmark.execute_benchmark.pytorch_script_bench_original_model"]], "benchmarks (class in neural_compressor.ux.components.benchmark)": [[349, "neural_compressor.ux.components.benchmark.Benchmarks"]], "neural_compressor.ux.components.benchmark": [[349, "module-neural_compressor.ux.components.benchmark"]], "benchmarkconfiggenerator (class in neural_compressor.ux.components.config_generator.benchmark_config_generator)": [[350, "neural_compressor.ux.components.config_generator.benchmark_config_generator.BenchmarkConfigGenerator"]], "neural_compressor.ux.components.config_generator.benchmark_config_generator": [[350, "module-neural_compressor.ux.components.config_generator.benchmark_config_generator"]], "configgenerator (class in neural_compressor.ux.components.config_generator.config_generator)": [[351, "neural_compressor.ux.components.config_generator.config_generator.ConfigGenerator"]], "neural_compressor.ux.components.config_generator.config_generator": [[351, "module-neural_compressor.ux.components.config_generator.config_generator"]], "graphoptimizationconfiggenerator (class in neural_compressor.ux.components.config_generator.graph_optimization_config_generator)": [[352, "neural_compressor.ux.components.config_generator.graph_optimization_config_generator.GraphOptimizationConfigGenerator"]], "neural_compressor.ux.components.config_generator.graph_optimization_config_generator": [[352, "module-neural_compressor.ux.components.config_generator.graph_optimization_config_generator"]], "neural_compressor.ux.components.config_generator": [[353, "module-neural_compressor.ux.components.config_generator"]], "mixedprecisionconfiggenerator (class in neural_compressor.ux.components.config_generator.mixed_precision_config_generator)": [[354, "neural_compressor.ux.components.config_generator.mixed_precision_config_generator.MixedPrecisionConfigGenerator"]], "neural_compressor.ux.components.config_generator.mixed_precision_config_generator": [[354, "module-neural_compressor.ux.components.config_generator.mixed_precision_config_generator"]], "profilingconfiggenerator (class in neural_compressor.ux.components.config_generator.profiling_config_generator)": [[355, "neural_compressor.ux.components.config_generator.profiling_config_generator.ProfilingConfigGenerator"]], "neural_compressor.ux.components.config_generator.profiling_config_generator": [[355, "module-neural_compressor.ux.components.config_generator.profiling_config_generator"]], "pruningconfiggenerator (class in neural_compressor.ux.components.config_generator.pruning_config_generator)": [[356, "neural_compressor.ux.components.config_generator.pruning_config_generator.PruningConfigGenerator"]], "neural_compressor.ux.components.config_generator.pruning_config_generator": [[356, "module-neural_compressor.ux.components.config_generator.pruning_config_generator"]], "quantizationconfiggenerator (class in neural_compressor.ux.components.config_generator.quantization_config_generator)": [[357, "neural_compressor.ux.components.config_generator.quantization_config_generator.QuantizationConfigGenerator"]], "neural_compressor.ux.components.config_generator.quantization_config_generator": [[357, "module-neural_compressor.ux.components.config_generator.quantization_config_generator"]], "configurationparser (class in neural_compressor.ux.components.configuration_wizard.configuration_parser)": [[358, "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser"]], "neural_compressor.ux.components.configuration_wizard.configuration_parser": [[358, "module-neural_compressor.ux.components.configuration_wizard.configuration_parser"]], "normalize_string_list() (in module neural_compressor.ux.components.configuration_wizard.configuration_parser)": [[358, "neural_compressor.ux.components.configuration_wizard.configuration_parser.normalize_string_list"]], "parse_list_value() (in module neural_compressor.ux.components.configuration_wizard.configuration_parser)": [[358, "neural_compressor.ux.components.configuration_wizard.configuration_parser.parse_list_value"]], "parse_multidim_list() (in module neural_compressor.ux.components.configuration_wizard.configuration_parser)": [[358, "neural_compressor.ux.components.configuration_wizard.configuration_parser.parse_multidim_list"]], "get_boundary_nodes() (in module neural_compressor.ux.components.configuration_wizard.get_boundary_nodes)": [[359, "neural_compressor.ux.components.configuration_wizard.get_boundary_nodes.get_boundary_nodes"]], "neural_compressor.ux.components.configuration_wizard.get_boundary_nodes": [[359, "module-neural_compressor.ux.components.configuration_wizard.get_boundary_nodes"]], "get_predefined_configuration() (in module neural_compressor.ux.components.configuration_wizard.get_configuration)": [[360, "neural_compressor.ux.components.configuration_wizard.get_configuration.get_predefined_configuration"]], "neural_compressor.ux.components.configuration_wizard.get_configuration": [[360, "module-neural_compressor.ux.components.configuration_wizard.get_configuration"]], "update_config_to_machine_specification() (in module neural_compressor.ux.components.configuration_wizard.get_configuration)": [[360, "neural_compressor.ux.components.configuration_wizard.get_configuration.update_config_to_machine_specification"]], "neural_compressor.ux.components.configuration_wizard": [[361, "module-neural_compressor.ux.components.configuration_wizard"]], "feeder (class in neural_compressor.ux.components.configuration_wizard.params_feeder)": [[362, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder"]], "get_possible_values() (in module neural_compressor.ux.components.configuration_wizard.params_feeder)": [[362, "neural_compressor.ux.components.configuration_wizard.params_feeder.get_possible_values"]], "neural_compressor.ux.components.configuration_wizard.params_feeder": [[362, "module-neural_compressor.ux.components.configuration_wizard.params_feeder"]], "pruningconfigparser (class in neural_compressor.ux.components.configuration_wizard.pruning_config_parser)": [[363, "neural_compressor.ux.components.configuration_wizard.pruning_config_parser.PruningConfigParser"]], "neural_compressor.ux.components.configuration_wizard.pruning_config_parser": [[363, "module-neural_compressor.ux.components.configuration_wizard.pruning_config_parser"]], "dbmanager (class in neural_compressor.ux.components.db_manager.db_manager)": [[364, "neural_compressor.ux.components.db_manager.db_manager.DBManager"]], "neural_compressor.ux.components.db_manager.db_manager": [[364, "module-neural_compressor.ux.components.db_manager.db_manager"]], "benchmark (class in neural_compressor.ux.components.db_manager.db_models.benchmark)": [[365, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark"]], "neural_compressor.ux.components.db_manager.db_models.benchmark": [[365, "module-neural_compressor.ux.components.db_manager.db_models.benchmark"]], "benchmarkresult (class in neural_compressor.ux.components.db_manager.db_models.benchmark_result)": [[366, "neural_compressor.ux.components.db_manager.db_models.benchmark_result.BenchmarkResult"]], "neural_compressor.ux.components.db_manager.db_models.benchmark_result": [[366, "module-neural_compressor.ux.components.db_manager.db_models.benchmark_result"]], "dataloader (class in neural_compressor.ux.components.db_manager.db_models.dataloader)": [[367, "neural_compressor.ux.components.db_manager.db_models.dataloader.Dataloader"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.dataloader)": [[367, "neural_compressor.ux.components.db_manager.db_models.dataloader.fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.dataloader": [[367, "module-neural_compressor.ux.components.db_manager.db_models.dataloader"]], "dataset (class in neural_compressor.ux.components.db_manager.db_models.dataset)": [[368, "neural_compressor.ux.components.db_manager.db_models.dataset.Dataset"]], "neural_compressor.ux.components.db_manager.db_models.dataset": [[368, "module-neural_compressor.ux.components.db_manager.db_models.dataset"]], "domain (class in neural_compressor.ux.components.db_manager.db_models.domain)": [[369, "neural_compressor.ux.components.db_manager.db_models.domain.Domain"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.domain)": [[369, "neural_compressor.ux.components.db_manager.db_models.domain.fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.domain": [[369, "module-neural_compressor.ux.components.db_manager.db_models.domain"]], "domainflavour (class in neural_compressor.ux.components.db_manager.db_models.domain_flavour)": [[370, "neural_compressor.ux.components.db_manager.db_models.domain_flavour.DomainFlavour"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.domain_flavour)": [[370, "neural_compressor.ux.components.db_manager.db_models.domain_flavour.fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.domain_flavour": [[370, "module-neural_compressor.ux.components.db_manager.db_models.domain_flavour"]], "example (class in neural_compressor.ux.components.db_manager.db_models.example)": [[371, "neural_compressor.ux.components.db_manager.db_models.example.Example"]], "neural_compressor.ux.components.db_manager.db_models.example": [[371, "module-neural_compressor.ux.components.db_manager.db_models.example"]], "framework (class in neural_compressor.ux.components.db_manager.db_models.framework)": [[372, "neural_compressor.ux.components.db_manager.db_models.framework.Framework"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.framework)": [[372, "neural_compressor.ux.components.db_manager.db_models.framework.fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.framework": [[372, "module-neural_compressor.ux.components.db_manager.db_models.framework"]], "neural_compressor.ux.components.db_manager.db_models": [[373, "module-neural_compressor.ux.components.db_manager.db_models"]], "metric (class in neural_compressor.ux.components.db_manager.db_models.metric)": [[374, "neural_compressor.ux.components.db_manager.db_models.metric.Metric"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.metric)": [[374, "neural_compressor.ux.components.db_manager.db_models.metric.fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.metric": [[374, "module-neural_compressor.ux.components.db_manager.db_models.metric"]], "model (class in neural_compressor.ux.components.db_manager.db_models.model)": [[375, "neural_compressor.ux.components.db_manager.db_models.model.Model"]], "neural_compressor.ux.components.db_manager.db_models.model": [[375, "module-neural_compressor.ux.components.db_manager.db_models.model"]], "optimization (class in neural_compressor.ux.components.db_manager.db_models.optimization)": [[376, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization"]], "neural_compressor.ux.components.db_manager.db_models.optimization": [[376, "module-neural_compressor.ux.components.db_manager.db_models.optimization"]], "optimizationtype (class in neural_compressor.ux.components.db_manager.db_models.optimization_type)": [[377, "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.optimization_type)": [[377, "neural_compressor.ux.components.db_manager.db_models.optimization_type.fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.optimization_type": [[377, "module-neural_compressor.ux.components.db_manager.db_models.optimization_type"]], "precision (class in neural_compressor.ux.components.db_manager.db_models.precision)": [[378, "neural_compressor.ux.components.db_manager.db_models.precision.Precision"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.precision)": [[378, "neural_compressor.ux.components.db_manager.db_models.precision.fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.precision": [[378, "module-neural_compressor.ux.components.db_manager.db_models.precision"]], "profiling (class in neural_compressor.ux.components.db_manager.db_models.profiling)": [[379, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling"]], "neural_compressor.ux.components.db_manager.db_models.profiling": [[379, "module-neural_compressor.ux.components.db_manager.db_models.profiling"]], "profilingresult (class in neural_compressor.ux.components.db_manager.db_models.profiling_result)": [[380, "neural_compressor.ux.components.db_manager.db_models.profiling_result.ProfilingResult"]], "neural_compressor.ux.components.db_manager.db_models.profiling_result": [[380, "module-neural_compressor.ux.components.db_manager.db_models.profiling_result"]], "project (class in neural_compressor.ux.components.db_manager.db_models.project)": [[381, "neural_compressor.ux.components.db_manager.db_models.project.Project"]], "neural_compressor.ux.components.db_manager.db_models.project": [[381, "module-neural_compressor.ux.components.db_manager.db_models.project"]], "pruningdetails (class in neural_compressor.ux.components.db_manager.db_models.pruning_details)": [[382, "neural_compressor.ux.components.db_manager.db_models.pruning_details.PruningDetails"]], "neural_compressor.ux.components.db_manager.db_models.pruning_details": [[382, "module-neural_compressor.ux.components.db_manager.db_models.pruning_details"]], "transform (class in neural_compressor.ux.components.db_manager.db_models.transform)": [[383, "neural_compressor.ux.components.db_manager.db_models.transform.Transform"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.transform)": [[383, "neural_compressor.ux.components.db_manager.db_models.transform.fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.transform": [[383, "module-neural_compressor.ux.components.db_manager.db_models.transform"]], "tuningdetails (class in neural_compressor.ux.components.db_manager.db_models.tuning_details)": [[384, "neural_compressor.ux.components.db_manager.db_models.tuning_details.TuningDetails"]], "neural_compressor.ux.components.db_manager.db_models.tuning_details": [[384, "module-neural_compressor.ux.components.db_manager.db_models.tuning_details"]], "tuninghistory (class in neural_compressor.ux.components.db_manager.db_models.tuning_history)": [[385, "neural_compressor.ux.components.db_manager.db_models.tuning_history.TuningHistory"]], "neural_compressor.ux.components.db_manager.db_models.tuning_history": [[385, "module-neural_compressor.ux.components.db_manager.db_models.tuning_history"]], "benchmarkapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface)": [[386, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface"]], "before_delete_benchmark_entry() (in module neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface)": [[386, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.before_delete_benchmark_entry"]], "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface": [[386, "module-neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface"]], "datasetapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface)": [[387, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface"]], "initialize_associations() (in module neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface)": [[387, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.initialize_associations"]], "initialize_precision_optimization_types_association() (in module neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface)": [[387, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.initialize_precision_optimization_types_association"]], "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface": [[387, "module-neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface"]], "search_in_list_of_dict() (in module neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface)": [[387, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.search_in_list_of_dict"]], "search_in_list_of_dict_for_unique_value() (in module neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface)": [[387, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.search_in_list_of_dict_for_unique_value"]], "set_database_version() (in module neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface)": [[387, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.set_database_version"]], "initialize_associations() (in module neural_compressor.ux.components.db_manager.db_operations.db_operations)": [[388, "neural_compressor.ux.components.db_manager.db_operations.db_operations.initialize_associations"]], "initialize_precision_optimization_types_association() (in module neural_compressor.ux.components.db_manager.db_operations.db_operations)": [[388, "neural_compressor.ux.components.db_manager.db_operations.db_operations.initialize_precision_optimization_types_association"]], "neural_compressor.ux.components.db_manager.db_operations.db_operations": [[388, "module-neural_compressor.ux.components.db_manager.db_operations.db_operations"]], "search_in_list_of_dict() (in module neural_compressor.ux.components.db_manager.db_operations.db_operations)": [[388, "neural_compressor.ux.components.db_manager.db_operations.db_operations.search_in_list_of_dict"]], "search_in_list_of_dict_for_unique_value() (in module neural_compressor.ux.components.db_manager.db_operations.db_operations)": [[388, "neural_compressor.ux.components.db_manager.db_operations.db_operations.search_in_list_of_dict_for_unique_value"]], "set_database_version() (in module neural_compressor.ux.components.db_manager.db_operations.db_operations)": [[388, "neural_compressor.ux.components.db_manager.db_operations.db_operations.set_database_version"]], "diagnosisapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface)": [[389, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface": [[389, "module-neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface"]], "dictionariesapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface)": [[390, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface": [[390, "module-neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface"]], "examplesapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.examples_api_interface)": [[391, "neural_compressor.ux.components.db_manager.db_operations.examples_api_interface.ExamplesAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.examples_api_interface": [[391, "module-neural_compressor.ux.components.db_manager.db_operations.examples_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations": [[392, "module-neural_compressor.ux.components.db_manager.db_operations"]], "modelapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.model_api_interface)": [[393, "neural_compressor.ux.components.db_manager.db_operations.model_api_interface.ModelAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.model_api_interface": [[393, "module-neural_compressor.ux.components.db_manager.db_operations.model_api_interface"]], "optimizationapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface)": [[394, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface": [[394, "module-neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface"]], "profilingapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface)": [[395, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface": [[395, "module-neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface"]], "projectapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.project_api_interface)": [[396, "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.project_api_interface": [[396, "module-neural_compressor.ux.components.db_manager.db_operations.project_api_interface"]], "neural_compressor.ux.components.db_manager": [[397, "module-neural_compressor.ux.components.db_manager"]], "benchmarkaddparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[398, "neural_compressor.ux.components.db_manager.params_interfaces.BenchmarkAddParamsInterface"]], "benchmarkeditparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[398, "neural_compressor.ux.components.db_manager.params_interfaces.BenchmarkEditParamsInterface"]], "datasetaddparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[398, "neural_compressor.ux.components.db_manager.params_interfaces.DatasetAddParamsInterface"]], "diagnosisoptimizationparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[398, "neural_compressor.ux.components.db_manager.params_interfaces.DiagnosisOptimizationParamsInterface"]], "modeladdparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[398, "neural_compressor.ux.components.db_manager.params_interfaces.ModelAddParamsInterface"]], "optimizationaddparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[398, "neural_compressor.ux.components.db_manager.params_interfaces.OptimizationAddParamsInterface"]], "optimizationeditparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[398, "neural_compressor.ux.components.db_manager.params_interfaces.OptimizationEditParamsInterface"]], "profilingaddparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[398, "neural_compressor.ux.components.db_manager.params_interfaces.ProfilingAddParamsInterface"]], "profilingeditparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[398, "neural_compressor.ux.components.db_manager.params_interfaces.ProfilingEditParamsInterface"]], "profilingresultaddparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[398, "neural_compressor.ux.components.db_manager.params_interfaces.ProfilingResultAddParamsInterface"]], "tuninghistoryinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[398, "neural_compressor.ux.components.db_manager.params_interfaces.TuningHistoryInterface"]], "tuninghistoryiteminterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[398, "neural_compressor.ux.components.db_manager.params_interfaces.TuningHistoryItemInterface"]], "neural_compressor.ux.components.db_manager.params_interfaces": [[398, "module-neural_compressor.ux.components.db_manager.params_interfaces"]], "get_framework_dataloaders_config() (in module neural_compressor.ux.components.db_manager.utils)": [[399, "neural_compressor.ux.components.db_manager.utils.get_framework_dataloaders_config"]], "get_framework_transforms_config() (in module neural_compressor.ux.components.db_manager.utils)": [[399, "neural_compressor.ux.components.db_manager.utils.get_framework_transforms_config"]], "neural_compressor.ux.components.db_manager.utils": [[399, "module-neural_compressor.ux.components.db_manager.utils"]], "update_dataloaders_params() (in module neural_compressor.ux.components.db_manager.utils)": [[399, "neural_compressor.ux.components.db_manager.utils.update_dataloaders_params"]], "diagnosis (class in neural_compressor.ux.components.diagnosis.diagnosis)": [[400, "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis"]], "neural_compressor.ux.components.diagnosis.diagnosis": [[400, "module-neural_compressor.ux.components.diagnosis.diagnosis"]], "diagnosisfactory (class in neural_compressor.ux.components.diagnosis.factory)": [[401, "neural_compressor.ux.components.diagnosis.factory.DiagnosisFactory"]], "neural_compressor.ux.components.diagnosis.factory": [[401, "module-neural_compressor.ux.components.diagnosis.factory"]], "neural_compressor.ux.components.diagnosis": [[402, "module-neural_compressor.ux.components.diagnosis"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis": [[403, "module-neural_compressor.ux.components.diagnosis.onnx_diagnosis"]], "onnxrtdiagnosis (class in neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis)": [[404, "neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis.OnnxRtDiagnosis"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis": [[404, "module-neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis"]], "opactivation (class in neural_compressor.ux.components.diagnosis.op_details)": [[405, "neural_compressor.ux.components.diagnosis.op_details.OpActivation"]], "opdetails (class in neural_compressor.ux.components.diagnosis.op_details)": [[405, "neural_compressor.ux.components.diagnosis.op_details.OpDetails"]], "oppattern (class in neural_compressor.ux.components.diagnosis.op_details)": [[405, "neural_compressor.ux.components.diagnosis.op_details.OpPattern"]], "opweights (class in neural_compressor.ux.components.diagnosis.op_details)": [[405, "neural_compressor.ux.components.diagnosis.op_details.OpWeights"]], "neural_compressor.ux.components.diagnosis.op_details": [[405, "module-neural_compressor.ux.components.diagnosis.op_details"]], "opentry (class in neural_compressor.ux.components.diagnosis.op_entry)": [[406, "neural_compressor.ux.components.diagnosis.op_entry.OpEntry"]], "neural_compressor.ux.components.diagnosis.op_entry": [[406, "module-neural_compressor.ux.components.diagnosis.op_entry"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis": [[407, "module-neural_compressor.ux.components.diagnosis.tensorflow_diagnosis"]], "tensorflowdiagnosis (class in neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis)": [[408, "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis.TensorflowDiagnosis"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis": [[408, "module-neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis"]], "create_dir_entry() (in module neural_compressor.ux.components.file_browser.file_browser)": [[409, "neural_compressor.ux.components.file_browser.file_browser.create_dir_entry"]], "create_entry() (in module neural_compressor.ux.components.file_browser.file_browser)": [[409, "neural_compressor.ux.components.file_browser.file_browser.create_entry"]], "create_file_entry() (in module neural_compressor.ux.components.file_browser.file_browser)": [[409, "neural_compressor.ux.components.file_browser.file_browser.create_file_entry"]], "filter_requested_entries() (in module neural_compressor.ux.components.file_browser.file_browser)": [[409, "neural_compressor.ux.components.file_browser.file_browser.filter_requested_entries"]], "get_directory_entries() (in module neural_compressor.ux.components.file_browser.file_browser)": [[409, "neural_compressor.ux.components.file_browser.file_browser.get_directory_entries"]], "get_filter_value() (in module neural_compressor.ux.components.file_browser.file_browser)": [[409, "neural_compressor.ux.components.file_browser.file_browser.get_filter_value"]], "get_non_hidden_directory_entries() (in module neural_compressor.ux.components.file_browser.file_browser)": [[409, "neural_compressor.ux.components.file_browser.file_browser.get_non_hidden_directory_entries"]], "get_requested_path() (in module neural_compressor.ux.components.file_browser.file_browser)": [[409, "neural_compressor.ux.components.file_browser.file_browser.get_requested_path"]], "get_setting_value() (in module neural_compressor.ux.components.file_browser.file_browser)": [[409, "neural_compressor.ux.components.file_browser.file_browser.get_setting_value"]], "is_dataset_or_directory_entry() (in module neural_compressor.ux.components.file_browser.file_browser)": [[409, "neural_compressor.ux.components.file_browser.file_browser.is_dataset_or_directory_entry"]], "is_directory_entry() (in module neural_compressor.ux.components.file_browser.file_browser)": [[409, "neural_compressor.ux.components.file_browser.file_browser.is_directory_entry"]], "is_model_or_directory_entry() (in module neural_compressor.ux.components.file_browser.file_browser)": [[409, "neural_compressor.ux.components.file_browser.file_browser.is_model_or_directory_entry"]], "neural_compressor.ux.components.file_browser.file_browser": [[409, "module-neural_compressor.ux.components.file_browser.file_browser"]], "should_show_files() (in module neural_compressor.ux.components.file_browser.file_browser)": [[409, "neural_compressor.ux.components.file_browser.file_browser.should_show_files"]], "should_show_only_model_files() (in module neural_compressor.ux.components.file_browser.file_browser)": [[409, "neural_compressor.ux.components.file_browser.file_browser.should_show_only_model_files"]], "sort_entries() (in module neural_compressor.ux.components.file_browser.file_browser)": [[409, "neural_compressor.ux.components.file_browser.file_browser.sort_entries"]], "neural_compressor.ux.components.file_browser": [[410, "module-neural_compressor.ux.components.file_browser"]], "attribute (class in neural_compressor.ux.components.graph.attribute)": [[411, "neural_compressor.ux.components.graph.attribute.Attribute"]], "neural_compressor.ux.components.graph.attribute": [[411, "module-neural_compressor.ux.components.graph.attribute"]], "collapser (class in neural_compressor.ux.components.graph.collapser)": [[412, "neural_compressor.ux.components.graph.collapser.Collapser"]], "neural_compressor.ux.components.graph.collapser": [[412, "module-neural_compressor.ux.components.graph.collapser"]], "edge (class in neural_compressor.ux.components.graph.edge)": [[413, "neural_compressor.ux.components.graph.edge.Edge"]], "neural_compressor.ux.components.graph.edge": [[413, "module-neural_compressor.ux.components.graph.edge"]], "graph (class in neural_compressor.ux.components.graph.graph)": [[414, "neural_compressor.ux.components.graph.graph.Graph"]], "neural_compressor.ux.components.graph.graph": [[414, "module-neural_compressor.ux.components.graph.graph"]], "graphreader (class in neural_compressor.ux.components.graph.graph_reader)": [[415, "neural_compressor.ux.components.graph.graph_reader.GraphReader"]], "neural_compressor.ux.components.graph.graph_reader": [[415, "module-neural_compressor.ux.components.graph.graph_reader"]], "neural_compressor.ux.components.graph": [[416, "module-neural_compressor.ux.components.graph"]], "groupnode (class in neural_compressor.ux.components.graph.node)": [[417, "neural_compressor.ux.components.graph.node.GroupNode"]], "node (class in neural_compressor.ux.components.graph.node)": [[417, "neural_compressor.ux.components.graph.node.Node"]], "neural_compressor.ux.components.graph.node": [[417, "module-neural_compressor.ux.components.graph.node"]], "neural_compressor.ux.components.graph.reader": [[418, "module-neural_compressor.ux.components.graph.reader"]], "onnxrtreader (class in neural_compressor.ux.components.graph.reader.onnxrt_reader)": [[419, "neural_compressor.ux.components.graph.reader.onnxrt_reader.OnnxrtReader"]], "neural_compressor.ux.components.graph.reader.onnxrt_reader": [[419, "module-neural_compressor.ux.components.graph.reader.onnxrt_reader"]], "tensorflowreader (class in neural_compressor.ux.components.graph.reader.tensorflow_reader)": [[420, "neural_compressor.ux.components.graph.reader.tensorflow_reader.TensorflowReader"]], "neural_compressor.ux.components.graph.reader.tensorflow_reader": [[420, "module-neural_compressor.ux.components.graph.reader.tensorflow_reader"]], "neural_compressor.ux.components": [[421, "module-neural_compressor.ux.components"]], "neural_compressor.ux.components.jobs_management": [[422, "module-neural_compressor.ux.components.jobs_management"]], "neural_compressor.ux.components.jobs_management.jobs_control_queue": [[423, "module-neural_compressor.ux.components.jobs_management.jobs_control_queue"]], "neural_compressor.ux.components.jobs_management.jobs_manager": [[424, "module-neural_compressor.ux.components.jobs_management.jobs_manager"]], "neural_compressor.ux.components.jobs_management.request": [[425, "module-neural_compressor.ux.components.jobs_management.request"]], "get_default_path() (in module neural_compressor.ux.components.manage_workspace)": [[426, "neural_compressor.ux.components.manage_workspace.get_default_path"]], "neural_compressor.ux.components.manage_workspace": [[426, "module-neural_compressor.ux.components.manage_workspace"]], "domain (class in neural_compressor.ux.components.model.domain)": [[427, "neural_compressor.ux.components.model.domain.Domain"]], "neural_compressor.ux.components.model.domain": [[427, "module-neural_compressor.ux.components.model.domain"]], "neural_compressor.ux.components.model": [[428, "module-neural_compressor.ux.components.model"]], "model (class in neural_compressor.ux.components.model.model)": [[429, "neural_compressor.ux.components.model.model.Model"]], "neural_compressor.ux.components.model.model": [[429, "module-neural_compressor.ux.components.model.model"]], "get_model_type() (in module neural_compressor.ux.components.model.model_type_getter)": [[430, "neural_compressor.ux.components.model.model_type_getter.get_model_type"]], "neural_compressor.ux.components.model.model_type_getter": [[430, "module-neural_compressor.ux.components.model.model_type_getter"]], "neural_compressor.ux.components.model.onnxrt": [[431, "module-neural_compressor.ux.components.model.onnxrt"]], "onnxrtmodel (class in neural_compressor.ux.components.model.onnxrt.model)": [[432, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel"]], "neural_compressor.ux.components.model.onnxrt.model": [[432, "module-neural_compressor.ux.components.model.onnxrt.model"]], "remove_number_of_samples_from_shape() (in module neural_compressor.ux.components.model.onnxrt.model)": [[432, "neural_compressor.ux.components.model.onnxrt.model.remove_number_of_samples_from_shape"]], "neural_compressor.ux.components.model.pytorch": [[433, "module-neural_compressor.ux.components.model.pytorch"]], "pytorchscriptmodel (class in neural_compressor.ux.components.model.pytorch.model)": [[434, "neural_compressor.ux.components.model.pytorch.model.PyTorchScriptModel"]], "neural_compressor.ux.components.model.pytorch.model": [[434, "module-neural_compressor.ux.components.model.pytorch.model"]], "modelrepository (class in neural_compressor.ux.components.model.repository)": [[435, "neural_compressor.ux.components.model.repository.ModelRepository"]], "neural_compressor.ux.components.model.repository": [[435, "module-neural_compressor.ux.components.model.repository"]], "shape (class in neural_compressor.ux.components.model.shape)": [[436, "neural_compressor.ux.components.model.shape.Shape"]], "neural_compressor.ux.components.model.shape": [[436, "module-neural_compressor.ux.components.model.shape"]], "frozenpbmodel (class in neural_compressor.ux.components.model.tensorflow.frozen_pb)": [[437, "neural_compressor.ux.components.model.tensorflow.frozen_pb.FrozenPbModel"]], "neural_compressor.ux.components.model.tensorflow.frozen_pb": [[437, "module-neural_compressor.ux.components.model.tensorflow.frozen_pb"]], "neural_compressor.ux.components.model.tensorflow": [[438, "module-neural_compressor.ux.components.model.tensorflow"]], "kerasmodel (class in neural_compressor.ux.components.model.tensorflow.keras)": [[439, "neural_compressor.ux.components.model.tensorflow.keras.KerasModel"]], "neural_compressor.ux.components.model.tensorflow.keras": [[439, "module-neural_compressor.ux.components.model.tensorflow.keras"]], "metagraphmodel (class in neural_compressor.ux.components.model.tensorflow.meta_graph)": [[440, "neural_compressor.ux.components.model.tensorflow.meta_graph.MetaGraphModel"]], "neural_compressor.ux.components.model.tensorflow.meta_graph": [[440, "module-neural_compressor.ux.components.model.tensorflow.meta_graph"]], "tensorflowmodel (class in neural_compressor.ux.components.model.tensorflow.model)": [[441, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel"]], "neural_compressor.ux.components.model.tensorflow.model": [[441, "module-neural_compressor.ux.components.model.tensorflow.model"]], "savedmodelmodel (class in neural_compressor.ux.components.model.tensorflow.saved_model)": [[442, "neural_compressor.ux.components.model.tensorflow.saved_model.SavedModelModel"]], "neural_compressor.ux.components.model.tensorflow.saved_model": [[442, "module-neural_compressor.ux.components.model.tensorflow.saved_model"]], "get_input_shape() (in module neural_compressor.ux.components.model.tensorflow.utils)": [[443, "neural_compressor.ux.components.model.tensorflow.utils.get_input_shape"]], "neural_compressor.ux.components.model.tensorflow.utils": [[443, "module-neural_compressor.ux.components.model.tensorflow.utils"]], "download_config() (in module neural_compressor.ux.components.model_zoo.download_config)": [[444, "neural_compressor.ux.components.model_zoo.download_config.download_config"]], "neural_compressor.ux.components.model_zoo.download_config": [[444, "module-neural_compressor.ux.components.model_zoo.download_config"]], "download_model() (in module neural_compressor.ux.components.model_zoo.download_model)": [[445, "neural_compressor.ux.components.model_zoo.download_model.download_model"]], "neural_compressor.ux.components.model_zoo.download_model": [[445, "module-neural_compressor.ux.components.model_zoo.download_model"]], "downloader (class in neural_compressor.ux.components.model_zoo.downloader)": [[446, "neural_compressor.ux.components.model_zoo.downloader.Downloader"]], "neural_compressor.ux.components.model_zoo.downloader": [[446, "module-neural_compressor.ux.components.model_zoo.downloader"]], "neural_compressor.ux.components.model_zoo": [[447, "module-neural_compressor.ux.components.model_zoo"]], "check_version() (in module neural_compressor.ux.components.model_zoo.list_models)": [[448, "neural_compressor.ux.components.model_zoo.list_models.check_version"]], "get_available_models() (in module neural_compressor.ux.components.model_zoo.list_models)": [[448, "neural_compressor.ux.components.model_zoo.list_models.get_available_models"]], "get_framework_module_name() (in module neural_compressor.ux.components.model_zoo.list_models)": [[448, "neural_compressor.ux.components.model_zoo.list_models.get_framework_module_name"]], "get_installed_frameworks() (in module neural_compressor.ux.components.model_zoo.list_models)": [[448, "neural_compressor.ux.components.model_zoo.list_models.get_installed_frameworks"]], "list_models() (in module neural_compressor.ux.components.model_zoo.list_models)": [[448, "neural_compressor.ux.components.model_zoo.list_models.list_models"]], "neural_compressor.ux.components.model_zoo.list_models": [[448, "module-neural_compressor.ux.components.model_zoo.list_models"]], "validate_model_list() (in module neural_compressor.ux.components.model_zoo.list_models)": [[448, "neural_compressor.ux.components.model_zoo.list_models.validate_model_list"]], "neural_compressor.ux.components.names_mapper": [[449, "module-neural_compressor.ux.components.names_mapper"]], "mappingdirection (class in neural_compressor.ux.components.names_mapper.names_mapper)": [[450, "neural_compressor.ux.components.names_mapper.names_mapper.MappingDirection"]], "namesmapper (class in neural_compressor.ux.components.names_mapper.names_mapper)": [[450, "neural_compressor.ux.components.names_mapper.names_mapper.NamesMapper"]], "neural_compressor.ux.components.names_mapper.names_mapper": [[450, "module-neural_compressor.ux.components.names_mapper.names_mapper"]], "check_if_collect_tuning_history() (in module neural_compressor.ux.components.optimization.execute_optimization)": [[451, "neural_compressor.ux.components.optimization.execute_optimization.check_if_collect_tuning_history"]], "execute_optimization() (in module neural_compressor.ux.components.optimization.execute_optimization)": [[451, "neural_compressor.ux.components.optimization.execute_optimization.execute_optimization"]], "execute_optimization_pytorch_script() (in module neural_compressor.ux.components.optimization.execute_optimization)": [[451, "neural_compressor.ux.components.optimization.execute_optimization.execute_optimization_pytorch_script"]], "execute_optimization_regular() (in module neural_compressor.ux.components.optimization.execute_optimization)": [[451, "neural_compressor.ux.components.optimization.execute_optimization.execute_optimization_regular"]], "neural_compressor.ux.components.optimization.execute_optimization": [[451, "module-neural_compressor.ux.components.optimization.execute_optimization"]], "parse_logs() (in module neural_compressor.ux.components.optimization.execute_optimization)": [[451, "neural_compressor.ux.components.optimization.execute_optimization.parse_logs"]], "parse_model_data_to_bench_names() (in module neural_compressor.ux.components.optimization.execute_optimization)": [[451, "neural_compressor.ux.components.optimization.execute_optimization.parse_model_data_to_bench_names"]], "optimizationfactory (class in neural_compressor.ux.components.optimization.factory)": [[452, "neural_compressor.ux.components.optimization.factory.OptimizationFactory"]], "neural_compressor.ux.components.optimization.factory": [[452, "module-neural_compressor.ux.components.optimization.factory"]], "graphoptimization (class in neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization)": [[453, "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.GraphOptimization"]], "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization": [[453, "module-neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization"]], "neural_compressor.ux.components.optimization.graph_optimizer": [[454, "module-neural_compressor.ux.components.optimization.graph_optimizer"]], "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model": [[455, "module-neural_compressor.ux.components.optimization.graph_optimizer.optimize_model"]], "optimize_graph() (in module neural_compressor.ux.components.optimization.graph_optimizer.optimize_model)": [[455, "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model.optimize_graph"]], "optimize_graph_config() (in module neural_compressor.ux.components.optimization.graph_optimizer.optimize_model)": [[455, "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model.optimize_graph_config"]], "parse_args() (in module neural_compressor.ux.components.optimization.graph_optimizer.optimize_model)": [[455, "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model.parse_args"]], "set_eager_execution() (in module neural_compressor.ux.components.optimization.graph_optimizer.optimize_model)": [[455, "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model.set_eager_execution"]], "optimizations (class in neural_compressor.ux.components.optimization)": [[456, "neural_compressor.ux.components.optimization.Optimizations"]], "neural_compressor.ux.components.optimization": [[456, "module-neural_compressor.ux.components.optimization"]], "neural_compressor.ux.components.optimization.mixed_precision": [[457, "module-neural_compressor.ux.components.optimization.mixed_precision"]], "mixedprecision (class in neural_compressor.ux.components.optimization.mixed_precision.mixed_precision)": [[458, "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.MixedPrecision"]], "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision": [[458, "module-neural_compressor.ux.components.optimization.mixed_precision.mixed_precision"]], "neural_compressor.ux.components.optimization.mixed_precision.optimize_model": [[459, "module-neural_compressor.ux.components.optimization.mixed_precision.optimize_model"]], "optimize_graph() (in module neural_compressor.ux.components.optimization.mixed_precision.optimize_model)": [[459, "neural_compressor.ux.components.optimization.mixed_precision.optimize_model.optimize_graph"]], "optimize_graph_config() (in module neural_compressor.ux.components.optimization.mixed_precision.optimize_model)": [[459, "neural_compressor.ux.components.optimization.mixed_precision.optimize_model.optimize_graph_config"]], "parse_args() (in module neural_compressor.ux.components.optimization.mixed_precision.optimize_model)": [[459, "neural_compressor.ux.components.optimization.mixed_precision.optimize_model.parse_args"]], "set_eager_execution() (in module neural_compressor.ux.components.optimization.mixed_precision.optimize_model)": [[459, "neural_compressor.ux.components.optimization.mixed_precision.optimize_model.set_eager_execution"]], "neural_compressor.ux.components.optimization.neural_coder_optimization": [[460, "module-neural_compressor.ux.components.optimization.neural_coder_optimization"]], "neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model": [[461, "module-neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model"]], "optimize_pt_script() (in module neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model)": [[461, "neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model.optimize_pt_script"]], "dataloaderinterface (class in neural_compressor.ux.components.optimization.optimization)": [[462, "neural_compressor.ux.components.optimization.optimization.DataloaderInterface"]], "optimization (class in neural_compressor.ux.components.optimization.optimization)": [[462, "neural_compressor.ux.components.optimization.optimization.Optimization"]], "optimizationinterface (class in neural_compressor.ux.components.optimization.optimization)": [[462, "neural_compressor.ux.components.optimization.optimization.OptimizationInterface"]], "neural_compressor.ux.components.optimization.optimization": [[462, "module-neural_compressor.ux.components.optimization.optimization"]], "neural_compressor.ux.components.optimization.pruning": [[463, "module-neural_compressor.ux.components.optimization.pruning"]], "neural_compressor.ux.components.optimization.pruning.optimize_model": [[464, "module-neural_compressor.ux.components.optimization.pruning.optimize_model"]], "optimize_model() (in module neural_compressor.ux.components.optimization.pruning.optimize_model)": [[464, "neural_compressor.ux.components.optimization.pruning.optimize_model.optimize_model"]], "parse_args() (in module neural_compressor.ux.components.optimization.pruning.optimize_model)": [[464, "neural_compressor.ux.components.optimization.pruning.optimize_model.parse_args"]], "pruning (class in neural_compressor.ux.components.optimization.pruning.pruning)": [[465, "neural_compressor.ux.components.optimization.pruning.pruning.Pruning"]], "neural_compressor.ux.components.optimization.pruning.pruning": [[465, "module-neural_compressor.ux.components.optimization.pruning.pruning"]], "neural_compressor.ux.components.optimization.tune": [[466, "module-neural_compressor.ux.components.optimization.tune"]], "neural_compressor.ux.components.optimization.tune.tune_model": [[467, "module-neural_compressor.ux.components.optimization.tune.tune_model"]], "parse_args() (in module neural_compressor.ux.components.optimization.tune.tune_model)": [[467, "neural_compressor.ux.components.optimization.tune.tune_model.parse_args"]], "set_eager_execution() (in module neural_compressor.ux.components.optimization.tune.tune_model)": [[467, "neural_compressor.ux.components.optimization.tune.tune_model.set_eager_execution"]], "tune_model() (in module neural_compressor.ux.components.optimization.tune.tune_model)": [[467, "neural_compressor.ux.components.optimization.tune.tune_model.tune_model"]], "accuracycriterion (class in neural_compressor.ux.components.optimization.tune.tuning)": [[468, "neural_compressor.ux.components.optimization.tune.tuning.AccuracyCriterion"]], "tuning (class in neural_compressor.ux.components.optimization.tune.tuning)": [[468, "neural_compressor.ux.components.optimization.tune.tuning.Tuning"]], "tuningdetails (class in neural_compressor.ux.components.optimization.tune.tuning)": [[468, "neural_compressor.ux.components.optimization.tune.tuning.TuningDetails"]], "neural_compressor.ux.components.optimization.tune.tuning": [[468, "module-neural_compressor.ux.components.optimization.tune.tuning"]], "tuninghistory (class in neural_compressor.ux.components.optimization.tuning_history)": [[469, "neural_compressor.ux.components.optimization.tuning_history.TuningHistory"]], "watcher (class in neural_compressor.ux.components.optimization.tuning_history)": [[469, "neural_compressor.ux.components.optimization.tuning_history.Watcher"]], "neural_compressor.ux.components.optimization.tuning_history": [[469, "module-neural_compressor.ux.components.optimization.tuning_history"]], "tuning_history() (in module neural_compressor.ux.components.optimization.tuning_history)": [[469, "neural_compressor.ux.components.optimization.tuning_history.tuning_history"]], "tuning_history_path() (in module neural_compressor.ux.components.optimization.tuning_history)": [[469, "neural_compressor.ux.components.optimization.tuning_history.tuning_history_path"]], "execute_profiling() (in module neural_compressor.ux.components.profiling.execute_profiling)": [[470, "neural_compressor.ux.components.profiling.execute_profiling.execute_profiling"]], "execute_real_profiling() (in module neural_compressor.ux.components.profiling.execute_profiling)": [[470, "neural_compressor.ux.components.profiling.execute_profiling.execute_real_profiling"]], "neural_compressor.ux.components.profiling.execute_profiling": [[470, "module-neural_compressor.ux.components.profiling.execute_profiling"]], "profilerfactory (class in neural_compressor.ux.components.profiling.factory)": [[471, "neural_compressor.ux.components.profiling.factory.ProfilerFactory"]], "neural_compressor.ux.components.profiling.factory": [[471, "module-neural_compressor.ux.components.profiling.factory"]], "neural_compressor.ux.components.profiling": [[472, "module-neural_compressor.ux.components.profiling"]], "load_profiling_details() (in module neural_compressor.ux.components.profiling.profile_model)": [[473, "neural_compressor.ux.components.profiling.profile_model.load_profiling_details"]], "neural_compressor.ux.components.profiling.profile_model": [[473, "module-neural_compressor.ux.components.profiling.profile_model"]], "parse_args() (in module neural_compressor.ux.components.profiling.profile_model)": [[473, "neural_compressor.ux.components.profiling.profile_model.parse_args"]], "profiler (class in neural_compressor.ux.components.profiling.profiler)": [[474, "neural_compressor.ux.components.profiling.profiler.Profiler"]], "neural_compressor.ux.components.profiling.profiler": [[474, "module-neural_compressor.ux.components.profiling.profiler"]], "dataloaderinterface (class in neural_compressor.ux.components.profiling.profiling)": [[475, "neural_compressor.ux.components.profiling.profiling.DataloaderInterface"]], "profiling (class in neural_compressor.ux.components.profiling.profiling)": [[475, "neural_compressor.ux.components.profiling.profiling.Profiling"]], "neural_compressor.ux.components.profiling.profiling": [[475, "module-neural_compressor.ux.components.profiling.profiling"]], "profilerfactory (class in neural_compressor.ux.components.profiling.tensorflow_profiler.factory)": [[476, "neural_compressor.ux.components.profiling.tensorflow_profiler.factory.ProfilerFactory"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.factory": [[476, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.factory"]], "neural_compressor.ux.components.profiling.tensorflow_profiler": [[477, "module-neural_compressor.ux.components.profiling.tensorflow_profiler"]], "profiler (class in neural_compressor.ux.components.profiling.tensorflow_profiler.profiler)": [[478, "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.Profiler"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler": [[478, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.profiler"]], "delete_assign() (in module neural_compressor.ux.components.profiling.tensorflow_profiler.utils)": [[479, "neural_compressor.ux.components.profiling.tensorflow_profiler.utils.delete_assign"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.utils": [[479, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.utils"]], "main() (in module neural_compressor.ux.inc_bench)": [[480, "neural_compressor.ux.inc_bench.main"]], "neural_compressor.ux.inc_bench": [[480, "module-neural_compressor.ux.inc_bench"]], "prepare_environment() (in module neural_compressor.ux.inc_bench)": [[480, "neural_compressor.ux.inc_bench.prepare_environment"]], "neural_compressor.ux": [[481, "module-neural_compressor.ux"]], "domainflavours (class in neural_compressor.ux.utils.consts)": [[482, "neural_compressor.ux.utils.consts.DomainFlavours"]], "domains (class in neural_compressor.ux.utils.consts)": [[482, "neural_compressor.ux.utils.consts.Domains"]], "executionstatus (class in neural_compressor.ux.utils.consts)": [[482, "neural_compressor.ux.utils.consts.ExecutionStatus"]], "frameworks (class in neural_compressor.ux.utils.consts)": [[482, "neural_compressor.ux.utils.consts.Frameworks"]], "optimizationtypes (class in neural_compressor.ux.utils.consts)": [[482, "neural_compressor.ux.utils.consts.OptimizationTypes"]], "precisions (class in neural_compressor.ux.utils.consts)": [[482, "neural_compressor.ux.utils.consts.Precisions"]], "strategies (class in neural_compressor.ux.utils.consts)": [[482, "neural_compressor.ux.utils.consts.Strategies"]], "neural_compressor.ux.utils.consts": [[482, "module-neural_compressor.ux.utils.consts"]], "environment (class in neural_compressor.ux.utils.environment)": [[483, "neural_compressor.ux.utils.environment.Environment"]], "neural_compressor.ux.utils.environment": [[483, "module-neural_compressor.ux.utils.environment"]], "accessdeniedexception": [[484, "neural_compressor.ux.utils.exceptions.AccessDeniedException"]], "clienterrorexception": [[484, "neural_compressor.ux.utils.exceptions.ClientErrorException"]], "internalexception": [[484, "neural_compressor.ux.utils.exceptions.InternalException"]], "notfoundexception": [[484, "neural_compressor.ux.utils.exceptions.NotFoundException"]], "neural_compressor.ux.utils.exceptions": [[484, "module-neural_compressor.ux.utils.exceptions"]], "executor (class in neural_compressor.ux.utils.executor)": [[485, "neural_compressor.ux.utils.executor.Executor"]], "neural_compressor.ux.utils.executor": [[485, "module-neural_compressor.ux.utils.executor"]], "expiringdict (class in neural_compressor.ux.utils.expiring_dict)": [[486, "neural_compressor.ux.utils.expiring_dict.ExpiringDict"]], "expiringdictitem (class in neural_compressor.ux.utils.expiring_dict)": [[486, "neural_compressor.ux.utils.expiring_dict.ExpiringDictItem"]], "neural_compressor.ux.utils.expiring_dict": [[486, "module-neural_compressor.ux.utils.expiring_dict"]], "githubinfo (class in neural_compressor.ux.utils.github_info)": [[487, "neural_compressor.ux.utils.github_info.GithubInfo"]], "neural_compressor.ux.utils.github_info": [[487, "module-neural_compressor.ux.utils.github_info"]], "hwinfo (class in neural_compressor.ux.utils.hw_info)": [[488, "neural_compressor.ux.utils.hw_info.HWInfo"]], "get_bios_version() (in module neural_compressor.ux.utils.hw_info)": [[488, "neural_compressor.ux.utils.hw_info.get_bios_version"]], "get_distribution() (in module neural_compressor.ux.utils.hw_info)": [[488, "neural_compressor.ux.utils.hw_info.get_distribution"]], "get_framework_dependency_info() (in module neural_compressor.ux.utils.hw_info)": [[488, "neural_compressor.ux.utils.hw_info.get_framework_dependency_info"]], "get_framework_info() (in module neural_compressor.ux.utils.hw_info)": [[488, "neural_compressor.ux.utils.hw_info.get_framework_info"]], "get_kernel_version() (in module neural_compressor.ux.utils.hw_info)": [[488, "neural_compressor.ux.utils.hw_info.get_kernel_version"]], "get_number_of_sockets() (in module neural_compressor.ux.utils.hw_info)": [[488, "neural_compressor.ux.utils.hw_info.get_number_of_sockets"]], "is_turbo_boost_enabled() (in module neural_compressor.ux.utils.hw_info)": [[488, "neural_compressor.ux.utils.hw_info.is_turbo_boost_enabled"]], "neural_compressor.ux.utils.hw_info": [[488, "module-neural_compressor.ux.utils.hw_info"]], "neural_compressor.ux.utils": [[489, "module-neural_compressor.ux.utils"]], "jsonserializer (class in neural_compressor.ux.utils.json_serializer)": [[490, "neural_compressor.ux.utils.json_serializer.JsonSerializer"]], "neural_compressor.ux.utils.json_serializer": [[490, "module-neural_compressor.ux.utils.json_serializer"]], "change_log_level() (in module neural_compressor.ux.utils.logger)": [[491, "neural_compressor.ux.utils.logger.change_log_level"]], "neural_compressor.ux.utils.logger": [[491, "module-neural_compressor.ux.utils.logger"]], "accuracyparser (class in neural_compressor.ux.utils.parser)": [[492, "neural_compressor.ux.utils.parser.AccuracyParser"]], "benchmarkparserfactory (class in neural_compressor.ux.utils.parser)": [[492, "neural_compressor.ux.utils.parser.BenchmarkParserFactory"]], "optimizationparser (class in neural_compressor.ux.utils.parser)": [[492, "neural_compressor.ux.utils.parser.OptimizationParser"]], "parser (class in neural_compressor.ux.utils.parser)": [[492, "neural_compressor.ux.utils.parser.Parser"]], "performanceparser (class in neural_compressor.ux.utils.parser)": [[492, "neural_compressor.ux.utils.parser.PerformanceParser"]], "profilingparser (class in neural_compressor.ux.utils.parser)": [[492, "neural_compressor.ux.utils.parser.ProfilingParser"]], "neural_compressor.ux.utils.parser": [[492, "module-neural_compressor.ux.utils.parser"]], "proc (class in neural_compressor.ux.utils.proc)": [[493, "neural_compressor.ux.utils.proc.Proc"]], "neural_compressor.ux.utils.proc": [[493, "module-neural_compressor.ux.utils.proc"]], "ncprocesses (class in neural_compressor.ux.utils.processes)": [[494, "neural_compressor.ux.utils.processes.NCProcesses"]], "neural_compressor.ux.utils.processes": [[494, "module-neural_compressor.ux.utils.processes"]], "singleton (class in neural_compressor.ux.utils.singleton)": [[495, "neural_compressor.ux.utils.singleton.Singleton"]], "neural_compressor.ux.utils.singleton": [[495, "module-neural_compressor.ux.utils.singleton"]], "get_status_update_function() (in module neural_compressor.ux.utils.status_updates)": [[496, "neural_compressor.ux.utils.status_updates.get_status_update_function"]], "neural_compressor.ux.utils.status_updates": [[496, "module-neural_compressor.ux.utils.status_updates"]], "neural_compressor.ux.utils.templates": [[497, "module-neural_compressor.ux.utils.templates"]], "metric (class in neural_compressor.ux.utils.templates.metric)": [[498, "neural_compressor.ux.utils.templates.metric.Metric"]], "neural_compressor.ux.utils.templates.metric": [[498, "module-neural_compressor.ux.utils.templates.metric"]], "workdir (class in neural_compressor.ux.utils.templates.workdir)": [[499, "neural_compressor.ux.utils.templates.workdir.Workdir"]], "neural_compressor.ux.utils.templates.workdir": [[499, "module-neural_compressor.ux.utils.templates.workdir"]], "are_archive_filenames_valid() (in module neural_compressor.ux.utils.utils)": [[500, "neural_compressor.ux.utils.utils.are_archive_filenames_valid"]], "check_module() (in module neural_compressor.ux.utils.utils)": [[500, "neural_compressor.ux.utils.utils.check_module"]], "deprecated() (in module neural_compressor.ux.utils.utils)": [[500, "neural_compressor.ux.utils.utils.deprecated"]], "determine_ip() (in module neural_compressor.ux.utils.utils)": [[500, "neural_compressor.ux.utils.utils.determine_ip"]], "export_to_csv() (in module neural_compressor.ux.utils.utils)": [[500, "neural_compressor.ux.utils.utils.export_to_csv"]], "filter_transforms() (in module neural_compressor.ux.utils.utils)": [[500, "neural_compressor.ux.utils.utils.filter_transforms"]], "get_dataset_path() (in module neural_compressor.ux.utils.utils)": [[500, "neural_compressor.ux.utils.utils.get_dataset_path"]], "get_default_pruning_config_path() (in module neural_compressor.ux.utils.utils)": [[500, "neural_compressor.ux.utils.utils.get_default_pruning_config_path"]], "get_file_extension() (in module neural_compressor.ux.utils.utils)": [[500, "neural_compressor.ux.utils.utils.get_file_extension"]], "get_framework_from_path() (in module neural_compressor.ux.utils.utils)": [[500, "neural_compressor.ux.utils.utils.get_framework_from_path"]], "get_height_width_from_size() (in module neural_compressor.ux.utils.utils)": [[500, "neural_compressor.ux.utils.utils.get_height_width_from_size"]], "get_metrics_dict() (in module neural_compressor.ux.utils.utils)": [[500, "neural_compressor.ux.utils.utils.get_metrics_dict"]], "get_model_zoo_config_path() (in module neural_compressor.ux.utils.utils)": [[500, "neural_compressor.ux.utils.utils.get_model_zoo_config_path"]], "get_model_zoo_model_path() (in module neural_compressor.ux.utils.utils)": [[500, "neural_compressor.ux.utils.utils.get_model_zoo_model_path"]], "get_module_version() (in module neural_compressor.ux.utils.utils)": [[500, "neural_compressor.ux.utils.utils.get_module_version"]], "get_predefined_config_path() (in module neural_compressor.ux.utils.utils)": [[500, "neural_compressor.ux.utils.utils.get_predefined_config_path"]], "get_shape_from_transforms() (in module neural_compressor.ux.utils.utils)": [[500, "neural_compressor.ux.utils.utils.get_shape_from_transforms"]], "get_size() (in module neural_compressor.ux.utils.utils)": [[500, "neural_compressor.ux.utils.utils.get_size"]], "is_dataset_file() (in module neural_compressor.ux.utils.utils)": [[500, "neural_compressor.ux.utils.utils.is_dataset_file"]], "is_development_env() (in module neural_compressor.ux.utils.utils)": [[500, "neural_compressor.ux.utils.utils.is_development_env"]], "is_hidden() (in module neural_compressor.ux.utils.utils)": [[500, "neural_compressor.ux.utils.utils.is_hidden"]], "load_dataloader_config() (in module neural_compressor.ux.utils.utils)": [[500, "neural_compressor.ux.utils.utils.load_dataloader_config"]], "load_help_nc_params() (in module neural_compressor.ux.utils.utils)": [[500, "neural_compressor.ux.utils.utils.load_help_nc_params"]], "load_metrics_config() (in module neural_compressor.ux.utils.utils)": [[500, "neural_compressor.ux.utils.utils.load_metrics_config"]], "load_model_config() (in module neural_compressor.ux.utils.utils)": [[500, "neural_compressor.ux.utils.utils.load_model_config"]], "load_model_wise_params() (in module neural_compressor.ux.utils.utils)": [[500, "neural_compressor.ux.utils.utils.load_model_wise_params"]], "load_precisions_config() (in module neural_compressor.ux.utils.utils)": [[500, "neural_compressor.ux.utils.utils.load_precisions_config"]], "load_pruning_details_config() (in module neural_compressor.ux.utils.utils)": [[500, "neural_compressor.ux.utils.utils.load_pruning_details_config"]], "load_transforms_config() (in module neural_compressor.ux.utils.utils)": [[500, "neural_compressor.ux.utils.utils.load_transforms_config"]], "load_transforms_filter_config() (in module neural_compressor.ux.utils.utils)": [[500, "neural_compressor.ux.utils.utils.load_transforms_filter_config"]], "neural_compressor.ux.utils.utils": [[500, "module-neural_compressor.ux.utils.utils"]], "normalize_domain() (in module neural_compressor.ux.utils.utils)": [[500, "neural_compressor.ux.utils.utils.normalize_domain"]], "normalize_framework() (in module neural_compressor.ux.utils.utils)": [[500, "neural_compressor.ux.utils.utils.normalize_framework"]], "normalize_string() (in module neural_compressor.ux.utils.utils)": [[500, "neural_compressor.ux.utils.utils.normalize_string"]], "parse_bool_value() (in module neural_compressor.ux.utils.utils)": [[500, "neural_compressor.ux.utils.utils.parse_bool_value"]], "parse_to_float_list() (in module neural_compressor.ux.utils.utils)": [[500, "neural_compressor.ux.utils.utils.parse_to_float_list"]], "parse_to_string_list() (in module neural_compressor.ux.utils.utils)": [[500, "neural_compressor.ux.utils.utils.parse_to_string_list"]], "parse_version() (in module neural_compressor.ux.utils.utils)": [[500, "neural_compressor.ux.utils.utils.parse_version"]], "release_tag() (in module neural_compressor.ux.utils.utils)": [[500, "neural_compressor.ux.utils.utils.release_tag"]], "replace_with_values() (in module neural_compressor.ux.utils.utils)": [[500, "neural_compressor.ux.utils.utils.replace_with_values"]], "safe_extract_archive() (in module neural_compressor.ux.utils.utils)": [[500, "neural_compressor.ux.utils.utils.safe_extract_archive"]], "verify_file_path() (in module neural_compressor.ux.utils.utils)": [[500, "neural_compressor.ux.utils.utils.verify_file_path"]], "config (class in neural_compressor.ux.utils.workload.config)": [[501, "neural_compressor.ux.utils.workload.config.Config"]], "neural_compressor.ux.utils.workload.config": [[501, "module-neural_compressor.ux.utils.workload.config"]], "dataloader (class in neural_compressor.ux.utils.workload.dataloader)": [[502, "neural_compressor.ux.utils.workload.dataloader.Dataloader"]], "dataset (class in neural_compressor.ux.utils.workload.dataloader)": [[502, "neural_compressor.ux.utils.workload.dataloader.Dataset"]], "filter (class in neural_compressor.ux.utils.workload.dataloader)": [[502, "neural_compressor.ux.utils.workload.dataloader.Filter"]], "labelbalance (class in neural_compressor.ux.utils.workload.dataloader)": [[502, "neural_compressor.ux.utils.workload.dataloader.LabelBalance"]], "transform (class in neural_compressor.ux.utils.workload.dataloader)": [[502, "neural_compressor.ux.utils.workload.dataloader.Transform"]], "neural_compressor.ux.utils.workload.dataloader": [[502, "module-neural_compressor.ux.utils.workload.dataloader"]], "accuracy (class in neural_compressor.ux.utils.workload.evaluation)": [[503, "neural_compressor.ux.utils.workload.evaluation.Accuracy"]], "configs (class in neural_compressor.ux.utils.workload.evaluation)": [[503, "neural_compressor.ux.utils.workload.evaluation.Configs"]], "evaluation (class in neural_compressor.ux.utils.workload.evaluation)": [[503, "neural_compressor.ux.utils.workload.evaluation.Evaluation"]], "metric (class in neural_compressor.ux.utils.workload.evaluation)": [[503, "neural_compressor.ux.utils.workload.evaluation.Metric"]], "performance (class in neural_compressor.ux.utils.workload.evaluation)": [[503, "neural_compressor.ux.utils.workload.evaluation.Performance"]], "postprocess (class in neural_compressor.ux.utils.workload.evaluation)": [[503, "neural_compressor.ux.utils.workload.evaluation.Postprocess"]], "postprocessschema (class in neural_compressor.ux.utils.workload.evaluation)": [[503, "neural_compressor.ux.utils.workload.evaluation.PostprocessSchema"]], "neural_compressor.ux.utils.workload.evaluation": [[503, "module-neural_compressor.ux.utils.workload.evaluation"]], "graphoptimization (class in neural_compressor.ux.utils.workload.graph_optimization)": [[504, "neural_compressor.ux.utils.workload.graph_optimization.GraphOptimization"]], "neural_compressor.ux.utils.workload.graph_optimization": [[504, "module-neural_compressor.ux.utils.workload.graph_optimization"]], "neural_compressor.ux.utils.workload": [[505, "module-neural_compressor.ux.utils.workload"]], "mixedprecision (class in neural_compressor.ux.utils.workload.mixed_precision)": [[506, "neural_compressor.ux.utils.workload.mixed_precision.MixedPrecision"]], "neural_compressor.ux.utils.workload.mixed_precision": [[506, "module-neural_compressor.ux.utils.workload.mixed_precision"]], "model (class in neural_compressor.ux.utils.workload.model)": [[507, "neural_compressor.ux.utils.workload.model.Model"]], "neural_compressor.ux.utils.workload.model": [[507, "module-neural_compressor.ux.utils.workload.model"]], "adamoptimizer (class in neural_compressor.ux.utils.workload.pruning)": [[508, "neural_compressor.ux.utils.workload.pruning.AdamOptimizer"]], "adamwoptimizer (class in neural_compressor.ux.utils.workload.pruning)": [[508, "neural_compressor.ux.utils.workload.pruning.AdamWOptimizer"]], "approach (class in neural_compressor.ux.utils.workload.pruning)": [[508, "neural_compressor.ux.utils.workload.pruning.Approach"]], "criterion (class in neural_compressor.ux.utils.workload.pruning)": [[508, "neural_compressor.ux.utils.workload.pruning.Criterion"]], "crossentropylosscriterion (class in neural_compressor.ux.utils.workload.pruning)": [[508, "neural_compressor.ux.utils.workload.pruning.CrossEntropyLossCriterion"]], "intermediatelayersknowledgedistillationloss (class in neural_compressor.ux.utils.workload.pruning)": [[508, "neural_compressor.ux.utils.workload.pruning.IntermediateLayersKnowledgeDistillationLoss"]], "knowledgedistillationlosscriterion (class in neural_compressor.ux.utils.workload.pruning)": [[508, "neural_compressor.ux.utils.workload.pruning.KnowledgeDistillationLossCriterion"]], "optimizer (class in neural_compressor.ux.utils.workload.pruning)": [[508, "neural_compressor.ux.utils.workload.pruning.Optimizer"]], "pruning (class in neural_compressor.ux.utils.workload.pruning)": [[508, "neural_compressor.ux.utils.workload.pruning.Pruning"]], "sgdoptimizer (class in neural_compressor.ux.utils.workload.pruning)": [[508, "neural_compressor.ux.utils.workload.pruning.SGDOptimizer"]], "selfknowledgedistillationloss (class in neural_compressor.ux.utils.workload.pruning)": [[508, "neural_compressor.ux.utils.workload.pruning.SelfKnowledgeDistillationLoss"]], "sparsecategoricalcrossentropycriterion (class in neural_compressor.ux.utils.workload.pruning)": [[508, "neural_compressor.ux.utils.workload.pruning.SparseCategoricalCrossentropyCriterion"]], "train (class in neural_compressor.ux.utils.workload.pruning)": [[508, "neural_compressor.ux.utils.workload.pruning.Train"]], "weightcompressionapproach (class in neural_compressor.ux.utils.workload.pruning)": [[508, "neural_compressor.ux.utils.workload.pruning.WeightCompressionApproach"]], "neural_compressor.ux.utils.workload.pruning": [[508, "module-neural_compressor.ux.utils.workload.pruning"]], "parse_dict_value_to_float() (in module neural_compressor.ux.utils.workload.pruning)": [[508, "neural_compressor.ux.utils.workload.pruning.parse_dict_value_to_float"]], "parse_dict_value_to_int() (in module neural_compressor.ux.utils.workload.pruning)": [[508, "neural_compressor.ux.utils.workload.pruning.parse_dict_value_to_int"]], "advance (class in neural_compressor.ux.utils.workload.quantization)": [[509, "neural_compressor.ux.utils.workload.quantization.Advance"]], "calibration (class in neural_compressor.ux.utils.workload.quantization)": [[509, "neural_compressor.ux.utils.workload.quantization.Calibration"]], "quantization (class in neural_compressor.ux.utils.workload.quantization)": [[509, "neural_compressor.ux.utils.workload.quantization.Quantization"]], "wiseconfig (class in neural_compressor.ux.utils.workload.quantization)": [[509, "neural_compressor.ux.utils.workload.quantization.WiseConfig"]], "wiseconfigdetails (class in neural_compressor.ux.utils.workload.quantization)": [[509, "neural_compressor.ux.utils.workload.quantization.WiseConfigDetails"]], "neural_compressor.ux.utils.workload.quantization": [[509, "module-neural_compressor.ux.utils.workload.quantization"]], "acccriterion (class in neural_compressor.ux.utils.workload.tuning)": [[510, "neural_compressor.ux.utils.workload.tuning.AccCriterion"]], "diagnosis (class in neural_compressor.ux.utils.workload.tuning)": [[510, "neural_compressor.ux.utils.workload.tuning.Diagnosis"]], "exitpolicy (class in neural_compressor.ux.utils.workload.tuning)": [[510, "neural_compressor.ux.utils.workload.tuning.ExitPolicy"]], "multiobjectives (class in neural_compressor.ux.utils.workload.tuning)": [[510, "neural_compressor.ux.utils.workload.tuning.MultiObjectives"]], "strategy (class in neural_compressor.ux.utils.workload.tuning)": [[510, "neural_compressor.ux.utils.workload.tuning.Strategy"]], "tuning (class in neural_compressor.ux.utils.workload.tuning)": [[510, "neural_compressor.ux.utils.workload.tuning.Tuning"]], "workspace (class in neural_compressor.ux.utils.workload.tuning)": [[510, "neural_compressor.ux.utils.workload.tuning.Workspace"]], "neural_compressor.ux.utils.workload.tuning": [[510, "module-neural_compressor.ux.utils.workload.tuning"]], "float_representer() (in module neural_compressor.ux.utils.yaml_utils)": [[511, "neural_compressor.ux.utils.yaml_utils.float_representer"]], "neural_compressor.ux.utils.yaml_utils": [[511, "module-neural_compressor.ux.utils.yaml_utils"]], "pruner_representer() (in module neural_compressor.ux.utils.yaml_utils)": [[511, "neural_compressor.ux.utils.yaml_utils.pruner_representer"]], "message (class in neural_compressor.ux.web.communication)": [[512, "neural_compressor.ux.web.communication.Message"]], "messagequeue (class in neural_compressor.ux.web.communication)": [[512, "neural_compressor.ux.web.communication.MessageQueue"]], "request (class in neural_compressor.ux.web.communication)": [[512, "neural_compressor.ux.web.communication.Request"]], "response (class in neural_compressor.ux.web.communication)": [[512, "neural_compressor.ux.web.communication.Response"]], "create_simple_response() (in module neural_compressor.ux.web.communication)": [[512, "neural_compressor.ux.web.communication.create_simple_response"]], "neural_compressor.ux.web.communication": [[512, "module-neural_compressor.ux.web.communication"]], "configuration (class in neural_compressor.ux.web.configuration)": [[513, "neural_compressor.ux.web.configuration.Configuration"]], "neural_compressor.ux.web.configuration": [[513, "module-neural_compressor.ux.web.configuration"]], "servicenotfoundexception": [[514, "neural_compressor.ux.web.exceptions.ServiceNotFoundException"]], "neural_compressor.ux.web.exceptions": [[514, "module-neural_compressor.ux.web.exceptions"]], "neural_compressor.ux.web": [[515, "module-neural_compressor.ux.web"]], "deferredroutingdefinition (class in neural_compressor.ux.web.router)": [[516, "neural_compressor.ux.web.router.DeferredRoutingDefinition"]], "deferredsubprocessroutingdefinition (class in neural_compressor.ux.web.router)": [[516, "neural_compressor.ux.web.router.DeferredSubprocessRoutingDefinition"]], "realtimeroutingdefinition (class in neural_compressor.ux.web.router)": [[516, "neural_compressor.ux.web.router.RealtimeRoutingDefinition"]], "router (class in neural_compressor.ux.web.router)": [[516, "neural_compressor.ux.web.router.Router"]], "routingdefinition (class in neural_compressor.ux.web.router)": [[516, "neural_compressor.ux.web.router.RoutingDefinition"]], "find_pattern_in_graph() (in module neural_compressor.ux.web.router)": [[516, "neural_compressor.ux.web.router.find_pattern_in_graph"]], "get_model_graph() (in module neural_compressor.ux.web.router)": [[516, "neural_compressor.ux.web.router.get_model_graph"]], "get_system_info() (in module neural_compressor.ux.web.router)": [[516, "neural_compressor.ux.web.router.get_system_info"]], "neural_compressor.ux.web.router": [[516, "module-neural_compressor.ux.web.router"]], "allow_api_call() (in module neural_compressor.ux.web.server)": [[517, "neural_compressor.ux.web.server.allow_api_call"]], "block_iframe() (in module neural_compressor.ux.web.server)": [[517, "neural_compressor.ux.web.server.block_iframe"]], "block_sniffing() (in module neural_compressor.ux.web.server)": [[517, "neural_compressor.ux.web.server.block_sniffing"]], "build_parameters() (in module neural_compressor.ux.web.server)": [[517, "neural_compressor.ux.web.server.build_parameters"]], "disable_cache() (in module neural_compressor.ux.web.server)": [[517, "neural_compressor.ux.web.server.disable_cache"]], "get_tls_args() (in module neural_compressor.ux.web.server)": [[517, "neural_compressor.ux.web.server.get_tls_args"]], "handle_api_call() (in module neural_compressor.ux.web.server)": [[517, "neural_compressor.ux.web.server.handle_api_call"]], "neural_compressor.ux.web.server": [[517, "module-neural_compressor.ux.web.server"]], "page_not_found() (in module neural_compressor.ux.web.server)": [[517, "neural_compressor.ux.web.server.page_not_found"]], "require_api_token() (in module neural_compressor.ux.web.server)": [[517, "neural_compressor.ux.web.server.require_api_token"]], "root() (in module neural_compressor.ux.web.server)": [[517, "neural_compressor.ux.web.server.root"]], "run_server() (in module neural_compressor.ux.web.server)": [[517, "neural_compressor.ux.web.server.run_server"]], "web_socket_publisher() (in module neural_compressor.ux.web.server)": [[517, "neural_compressor.ux.web.server.web_socket_publisher"]], "benchmarkservice (class in neural_compressor.ux.web.service.benchmark)": [[518, "neural_compressor.ux.web.service.benchmark.BenchmarkService"]], "neural_compressor.ux.web.service.benchmark": [[518, "module-neural_compressor.ux.web.service.benchmark"]], "historysnapshotparser (class in neural_compressor.ux.web.service.history_snapshot_parser)": [[519, "neural_compressor.ux.web.service.history_snapshot_parser.HistorySnapshotParser"]], "neural_compressor.ux.web.service.history_snapshot_parser": [[519, "module-neural_compressor.ux.web.service.history_snapshot_parser"]], "neural_compressor.ux.web.service": [[520, "module-neural_compressor.ux.web.service"]], "modelservice (class in neural_compressor.ux.web.service.model)": [[521, "neural_compressor.ux.web.service.model.ModelService"]], "neural_compressor.ux.web.service.model": [[521, "module-neural_compressor.ux.web.service.model"]], "optimizationservice (class in neural_compressor.ux.web.service.optimization)": [[522, "neural_compressor.ux.web.service.optimization.OptimizationService"]], "neural_compressor.ux.web.service.optimization": [[522, "module-neural_compressor.ux.web.service.optimization"]], "profilingservice (class in neural_compressor.ux.web.service.profiling)": [[523, "neural_compressor.ux.web.service.profiling.ProfilingService"]], "neural_compressor.ux.web.service.profiling": [[523, "module-neural_compressor.ux.web.service.profiling"]], "requestdataprocessor (class in neural_compressor.ux.web.service.request_data_processor)": [[524, "neural_compressor.ux.web.service.request_data_processor.RequestDataProcessor"]], "neural_compressor.ux.web.service.request_data_processor": [[524, "module-neural_compressor.ux.web.service.request_data_processor"]], "responsegenerator (class in neural_compressor.ux.web.service.response_generator)": [[525, "neural_compressor.ux.web.service.response_generator.ResponseGenerator"]], "neural_compressor.ux.web.service.response_generator": [[525, "module-neural_compressor.ux.web.service.response_generator"]], "workloadservice (class in neural_compressor.ux.web.service.workload)": [[526, "neural_compressor.ux.web.service.workload.WorkloadService"]], "neural_compressor.ux.web.service.workload": [[526, "module-neural_compressor.ux.web.service.workload"]], "neural_compressor.version": [[527, "module-neural_compressor.version"]]}})